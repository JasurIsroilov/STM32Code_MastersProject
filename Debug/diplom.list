
diplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfbc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800d0d0  0800d0d0  0001d0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6f4  0800d6f4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6f4  0800d6f4  0001d6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6fc  0800d6fc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6fc  0800d6fc  0001d6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d700  0800d700  0001d700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200001e4  0800d8e8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800d8e8  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018039  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f27  00000000  00000000  00038246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab60  00000000  00000000  0003d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159ad  00000000  00000000  00057e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090185  00000000  00000000  0006d83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd9c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dd8  00000000  00000000  000fda18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d0b4 	.word	0x0800d0b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800d0b4 	.word	0x0800d0b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b9d9 	b.w	80013f8 <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f86d 	bl	8001134 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f860 	bl	8001134 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f84f 	bl	8001134 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f841 	bl	8001134 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__aeabi_d2lz>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	460c      	mov	r4, r1
 80010c8:	4605      	mov	r5, r0
 80010ca:	4621      	mov	r1, r4
 80010cc:	4628      	mov	r0, r5
 80010ce:	2200      	movs	r2, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	f7ff fc73 	bl	80009bc <__aeabi_dcmplt>
 80010d6:	b928      	cbnz	r0, 80010e4 <__aeabi_d2lz+0x20>
 80010d8:	4628      	mov	r0, r5
 80010da:	4621      	mov	r1, r4
 80010dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010e0:	f000 b80a 	b.w	80010f8 <__aeabi_d2ulz>
 80010e4:	4628      	mov	r0, r5
 80010e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010ea:	f000 f805 	bl	80010f8 <__aeabi_d2ulz>
 80010ee:	4240      	negs	r0, r0
 80010f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f4:	bd38      	pop	{r3, r4, r5, pc}
 80010f6:	bf00      	nop

080010f8 <__aeabi_d2ulz>:
 80010f8:	b5d0      	push	{r4, r6, r7, lr}
 80010fa:	2200      	movs	r2, #0
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <__aeabi_d2ulz+0x34>)
 80010fe:	4606      	mov	r6, r0
 8001100:	460f      	mov	r7, r1
 8001102:	f7ff f9e9 	bl	80004d8 <__aeabi_dmul>
 8001106:	f7ff fcbf 	bl	8000a88 <__aeabi_d2uiz>
 800110a:	4604      	mov	r4, r0
 800110c:	f7ff f96a 	bl	80003e4 <__aeabi_ui2d>
 8001110:	2200      	movs	r2, #0
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <__aeabi_d2ulz+0x38>)
 8001114:	f7ff f9e0 	bl	80004d8 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4630      	mov	r0, r6
 800111e:	4639      	mov	r1, r7
 8001120:	f7ff f822 	bl	8000168 <__aeabi_dsub>
 8001124:	f7ff fcb0 	bl	8000a88 <__aeabi_d2uiz>
 8001128:	4621      	mov	r1, r4
 800112a:	bdd0      	pop	{r4, r6, r7, pc}
 800112c:	3df00000 	.word	0x3df00000
 8001130:	41f00000 	.word	0x41f00000

08001134 <__udivmoddi4>:
 8001134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001138:	9e08      	ldr	r6, [sp, #32]
 800113a:	460d      	mov	r5, r1
 800113c:	4604      	mov	r4, r0
 800113e:	468e      	mov	lr, r1
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 8083 	bne.w	800124c <__udivmoddi4+0x118>
 8001146:	428a      	cmp	r2, r1
 8001148:	4617      	mov	r7, r2
 800114a:	d947      	bls.n	80011dc <__udivmoddi4+0xa8>
 800114c:	fab2 f382 	clz	r3, r2
 8001150:	b14b      	cbz	r3, 8001166 <__udivmoddi4+0x32>
 8001152:	f1c3 0120 	rsb	r1, r3, #32
 8001156:	fa05 fe03 	lsl.w	lr, r5, r3
 800115a:	fa20 f101 	lsr.w	r1, r0, r1
 800115e:	409f      	lsls	r7, r3
 8001160:	ea41 0e0e 	orr.w	lr, r1, lr
 8001164:	409c      	lsls	r4, r3
 8001166:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800116a:	fbbe fcf8 	udiv	ip, lr, r8
 800116e:	fa1f f987 	uxth.w	r9, r7
 8001172:	fb08 e21c 	mls	r2, r8, ip, lr
 8001176:	fb0c f009 	mul.w	r0, ip, r9
 800117a:	0c21      	lsrs	r1, r4, #16
 800117c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001180:	4290      	cmp	r0, r2
 8001182:	d90a      	bls.n	800119a <__udivmoddi4+0x66>
 8001184:	18ba      	adds	r2, r7, r2
 8001186:	f10c 31ff 	add.w	r1, ip, #4294967295
 800118a:	f080 8118 	bcs.w	80013be <__udivmoddi4+0x28a>
 800118e:	4290      	cmp	r0, r2
 8001190:	f240 8115 	bls.w	80013be <__udivmoddi4+0x28a>
 8001194:	f1ac 0c02 	sub.w	ip, ip, #2
 8001198:	443a      	add	r2, r7
 800119a:	1a12      	subs	r2, r2, r0
 800119c:	fbb2 f0f8 	udiv	r0, r2, r8
 80011a0:	fb08 2210 	mls	r2, r8, r0, r2
 80011a4:	fb00 f109 	mul.w	r1, r0, r9
 80011a8:	b2a4      	uxth	r4, r4
 80011aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ae:	42a1      	cmp	r1, r4
 80011b0:	d909      	bls.n	80011c6 <__udivmoddi4+0x92>
 80011b2:	193c      	adds	r4, r7, r4
 80011b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80011b8:	f080 8103 	bcs.w	80013c2 <__udivmoddi4+0x28e>
 80011bc:	42a1      	cmp	r1, r4
 80011be:	f240 8100 	bls.w	80013c2 <__udivmoddi4+0x28e>
 80011c2:	3802      	subs	r0, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	1a64      	subs	r4, r4, r1
 80011c8:	2100      	movs	r1, #0
 80011ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011ce:	b11e      	cbz	r6, 80011d8 <__udivmoddi4+0xa4>
 80011d0:	2200      	movs	r2, #0
 80011d2:	40dc      	lsrs	r4, r3
 80011d4:	e9c6 4200 	strd	r4, r2, [r6]
 80011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011dc:	b902      	cbnz	r2, 80011e0 <__udivmoddi4+0xac>
 80011de:	deff      	udf	#255	; 0xff
 80011e0:	fab2 f382 	clz	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d14f      	bne.n	8001288 <__udivmoddi4+0x154>
 80011e8:	1a8d      	subs	r5, r1, r2
 80011ea:	2101      	movs	r1, #1
 80011ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011f0:	fa1f f882 	uxth.w	r8, r2
 80011f4:	fbb5 fcfe 	udiv	ip, r5, lr
 80011f8:	fb0e 551c 	mls	r5, lr, ip, r5
 80011fc:	fb08 f00c 	mul.w	r0, r8, ip
 8001200:	0c22      	lsrs	r2, r4, #16
 8001202:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001206:	42a8      	cmp	r0, r5
 8001208:	d907      	bls.n	800121a <__udivmoddi4+0xe6>
 800120a:	197d      	adds	r5, r7, r5
 800120c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001210:	d202      	bcs.n	8001218 <__udivmoddi4+0xe4>
 8001212:	42a8      	cmp	r0, r5
 8001214:	f200 80e9 	bhi.w	80013ea <__udivmoddi4+0x2b6>
 8001218:	4694      	mov	ip, r2
 800121a:	1a2d      	subs	r5, r5, r0
 800121c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001220:	fb0e 5510 	mls	r5, lr, r0, r5
 8001224:	fb08 f800 	mul.w	r8, r8, r0
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800122e:	45a0      	cmp	r8, r4
 8001230:	d907      	bls.n	8001242 <__udivmoddi4+0x10e>
 8001232:	193c      	adds	r4, r7, r4
 8001234:	f100 32ff 	add.w	r2, r0, #4294967295
 8001238:	d202      	bcs.n	8001240 <__udivmoddi4+0x10c>
 800123a:	45a0      	cmp	r8, r4
 800123c:	f200 80d9 	bhi.w	80013f2 <__udivmoddi4+0x2be>
 8001240:	4610      	mov	r0, r2
 8001242:	eba4 0408 	sub.w	r4, r4, r8
 8001246:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800124a:	e7c0      	b.n	80011ce <__udivmoddi4+0x9a>
 800124c:	428b      	cmp	r3, r1
 800124e:	d908      	bls.n	8001262 <__udivmoddi4+0x12e>
 8001250:	2e00      	cmp	r6, #0
 8001252:	f000 80b1 	beq.w	80013b8 <__udivmoddi4+0x284>
 8001256:	2100      	movs	r1, #0
 8001258:	e9c6 0500 	strd	r0, r5, [r6]
 800125c:	4608      	mov	r0, r1
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	fab3 f183 	clz	r1, r3
 8001266:	2900      	cmp	r1, #0
 8001268:	d14b      	bne.n	8001302 <__udivmoddi4+0x1ce>
 800126a:	42ab      	cmp	r3, r5
 800126c:	d302      	bcc.n	8001274 <__udivmoddi4+0x140>
 800126e:	4282      	cmp	r2, r0
 8001270:	f200 80b9 	bhi.w	80013e6 <__udivmoddi4+0x2b2>
 8001274:	1a84      	subs	r4, r0, r2
 8001276:	eb65 0303 	sbc.w	r3, r5, r3
 800127a:	2001      	movs	r0, #1
 800127c:	469e      	mov	lr, r3
 800127e:	2e00      	cmp	r6, #0
 8001280:	d0aa      	beq.n	80011d8 <__udivmoddi4+0xa4>
 8001282:	e9c6 4e00 	strd	r4, lr, [r6]
 8001286:	e7a7      	b.n	80011d8 <__udivmoddi4+0xa4>
 8001288:	409f      	lsls	r7, r3
 800128a:	f1c3 0220 	rsb	r2, r3, #32
 800128e:	40d1      	lsrs	r1, r2
 8001290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001294:	fbb1 f0fe 	udiv	r0, r1, lr
 8001298:	fa1f f887 	uxth.w	r8, r7
 800129c:	fb0e 1110 	mls	r1, lr, r0, r1
 80012a0:	fa24 f202 	lsr.w	r2, r4, r2
 80012a4:	409d      	lsls	r5, r3
 80012a6:	fb00 fc08 	mul.w	ip, r0, r8
 80012aa:	432a      	orrs	r2, r5
 80012ac:	0c15      	lsrs	r5, r2, #16
 80012ae:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012b2:	45ac      	cmp	ip, r5
 80012b4:	fa04 f403 	lsl.w	r4, r4, r3
 80012b8:	d909      	bls.n	80012ce <__udivmoddi4+0x19a>
 80012ba:	197d      	adds	r5, r7, r5
 80012bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80012c0:	f080 808f 	bcs.w	80013e2 <__udivmoddi4+0x2ae>
 80012c4:	45ac      	cmp	ip, r5
 80012c6:	f240 808c 	bls.w	80013e2 <__udivmoddi4+0x2ae>
 80012ca:	3802      	subs	r0, #2
 80012cc:	443d      	add	r5, r7
 80012ce:	eba5 050c 	sub.w	r5, r5, ip
 80012d2:	fbb5 f1fe 	udiv	r1, r5, lr
 80012d6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012da:	fb01 f908 	mul.w	r9, r1, r8
 80012de:	b295      	uxth	r5, r2
 80012e0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012e4:	45a9      	cmp	r9, r5
 80012e6:	d907      	bls.n	80012f8 <__udivmoddi4+0x1c4>
 80012e8:	197d      	adds	r5, r7, r5
 80012ea:	f101 32ff 	add.w	r2, r1, #4294967295
 80012ee:	d274      	bcs.n	80013da <__udivmoddi4+0x2a6>
 80012f0:	45a9      	cmp	r9, r5
 80012f2:	d972      	bls.n	80013da <__udivmoddi4+0x2a6>
 80012f4:	3902      	subs	r1, #2
 80012f6:	443d      	add	r5, r7
 80012f8:	eba5 0509 	sub.w	r5, r5, r9
 80012fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001300:	e778      	b.n	80011f4 <__udivmoddi4+0xc0>
 8001302:	f1c1 0720 	rsb	r7, r1, #32
 8001306:	408b      	lsls	r3, r1
 8001308:	fa22 fc07 	lsr.w	ip, r2, r7
 800130c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001310:	fa25 f407 	lsr.w	r4, r5, r7
 8001314:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001318:	fbb4 f9fe 	udiv	r9, r4, lr
 800131c:	fa1f f88c 	uxth.w	r8, ip
 8001320:	fb0e 4419 	mls	r4, lr, r9, r4
 8001324:	fa20 f307 	lsr.w	r3, r0, r7
 8001328:	fb09 fa08 	mul.w	sl, r9, r8
 800132c:	408d      	lsls	r5, r1
 800132e:	431d      	orrs	r5, r3
 8001330:	0c2b      	lsrs	r3, r5, #16
 8001332:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001336:	45a2      	cmp	sl, r4
 8001338:	fa02 f201 	lsl.w	r2, r2, r1
 800133c:	fa00 f301 	lsl.w	r3, r0, r1
 8001340:	d909      	bls.n	8001356 <__udivmoddi4+0x222>
 8001342:	eb1c 0404 	adds.w	r4, ip, r4
 8001346:	f109 30ff 	add.w	r0, r9, #4294967295
 800134a:	d248      	bcs.n	80013de <__udivmoddi4+0x2aa>
 800134c:	45a2      	cmp	sl, r4
 800134e:	d946      	bls.n	80013de <__udivmoddi4+0x2aa>
 8001350:	f1a9 0902 	sub.w	r9, r9, #2
 8001354:	4464      	add	r4, ip
 8001356:	eba4 040a 	sub.w	r4, r4, sl
 800135a:	fbb4 f0fe 	udiv	r0, r4, lr
 800135e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001362:	fb00 fa08 	mul.w	sl, r0, r8
 8001366:	b2ad      	uxth	r5, r5
 8001368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800136c:	45a2      	cmp	sl, r4
 800136e:	d908      	bls.n	8001382 <__udivmoddi4+0x24e>
 8001370:	eb1c 0404 	adds.w	r4, ip, r4
 8001374:	f100 35ff 	add.w	r5, r0, #4294967295
 8001378:	d22d      	bcs.n	80013d6 <__udivmoddi4+0x2a2>
 800137a:	45a2      	cmp	sl, r4
 800137c:	d92b      	bls.n	80013d6 <__udivmoddi4+0x2a2>
 800137e:	3802      	subs	r0, #2
 8001380:	4464      	add	r4, ip
 8001382:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001386:	fba0 8902 	umull	r8, r9, r0, r2
 800138a:	eba4 040a 	sub.w	r4, r4, sl
 800138e:	454c      	cmp	r4, r9
 8001390:	46c6      	mov	lr, r8
 8001392:	464d      	mov	r5, r9
 8001394:	d319      	bcc.n	80013ca <__udivmoddi4+0x296>
 8001396:	d016      	beq.n	80013c6 <__udivmoddi4+0x292>
 8001398:	b15e      	cbz	r6, 80013b2 <__udivmoddi4+0x27e>
 800139a:	ebb3 020e 	subs.w	r2, r3, lr
 800139e:	eb64 0405 	sbc.w	r4, r4, r5
 80013a2:	fa04 f707 	lsl.w	r7, r4, r7
 80013a6:	fa22 f301 	lsr.w	r3, r2, r1
 80013aa:	431f      	orrs	r7, r3
 80013ac:	40cc      	lsrs	r4, r1
 80013ae:	e9c6 7400 	strd	r7, r4, [r6]
 80013b2:	2100      	movs	r1, #0
 80013b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b8:	4631      	mov	r1, r6
 80013ba:	4630      	mov	r0, r6
 80013bc:	e70c      	b.n	80011d8 <__udivmoddi4+0xa4>
 80013be:	468c      	mov	ip, r1
 80013c0:	e6eb      	b.n	800119a <__udivmoddi4+0x66>
 80013c2:	4610      	mov	r0, r2
 80013c4:	e6ff      	b.n	80011c6 <__udivmoddi4+0x92>
 80013c6:	4543      	cmp	r3, r8
 80013c8:	d2e6      	bcs.n	8001398 <__udivmoddi4+0x264>
 80013ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80013ce:	eb69 050c 	sbc.w	r5, r9, ip
 80013d2:	3801      	subs	r0, #1
 80013d4:	e7e0      	b.n	8001398 <__udivmoddi4+0x264>
 80013d6:	4628      	mov	r0, r5
 80013d8:	e7d3      	b.n	8001382 <__udivmoddi4+0x24e>
 80013da:	4611      	mov	r1, r2
 80013dc:	e78c      	b.n	80012f8 <__udivmoddi4+0x1c4>
 80013de:	4681      	mov	r9, r0
 80013e0:	e7b9      	b.n	8001356 <__udivmoddi4+0x222>
 80013e2:	4608      	mov	r0, r1
 80013e4:	e773      	b.n	80012ce <__udivmoddi4+0x19a>
 80013e6:	4608      	mov	r0, r1
 80013e8:	e749      	b.n	800127e <__udivmoddi4+0x14a>
 80013ea:	f1ac 0c02 	sub.w	ip, ip, #2
 80013ee:	443d      	add	r5, r7
 80013f0:	e713      	b.n	800121a <__udivmoddi4+0xe6>
 80013f2:	3802      	subs	r0, #2
 80013f4:	443c      	add	r4, r7
 80013f6:	e724      	b.n	8001242 <__udivmoddi4+0x10e>

080013f8 <__aeabi_idiv0>:
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <ADC1_Module_Init>:

#include "ADC_Modules.h"


void ADC1_Module_Init()
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	ADC1_Module.NChannels = ADC1_N_CHANNELS;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <ADC1_Module_Init+0x14>)
 8001402:	2202      	movs	r2, #2
 8001404:	711a      	strb	r2, [r3, #4]
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2000020c 	.word	0x2000020c

08001414 <AHT10_Init>:
//------------------------------------------------------------
uint8_t AHT10_TmpHum_Cmd[3] = {0xAC, 0x33, 0x00};
//------------------------------------------------------------

void AHT10_Init()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	AHT10_DataStruct.ADC_Raw = 0;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <AHT10_Init+0x30>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
	AHT10_DataStruct.Humidity = 0.00;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <AHT10_Init+0x30>)
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
	AHT10_DataStruct.Temperature = 0.00;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <AHT10_Init+0x30>)
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
	AHT10_DataStruct.TriggerTimeCounter = 0;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <AHT10_Init+0x30>)
 8001430:	2200      	movs	r2, #0
 8001432:	749a      	strb	r2, [r3, #18]
	AHT10_DataStruct.ReadDataTimerCounter = 0;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <AHT10_Init+0x30>)
 8001436:	2200      	movs	r2, #0
 8001438:	74da      	strb	r2, [r3, #19]
	AHT10_TriggerMeasurements();
 800143a:	f000 f81d 	bl	8001478 <AHT10_TriggerMeasurements>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200002ac 	.word	0x200002ac

08001448 <_AHT10_Error>:

void _AHT10_Error()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	sprintf(Router.MainBuff, "AHT10 error\n");
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <_AHT10_Error+0x24>)
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <_AHT10_Error+0x28>)
 8001450:	f008 f8a0 	bl	8009594 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)Router.MainBuff, strlen(Router.MainBuff));
 8001454:	4806      	ldr	r0, [pc, #24]	; (8001470 <_AHT10_Error+0x28>)
 8001456:	f7fe fe7b 	bl	8000150 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29b      	uxth	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <_AHT10_Error+0x28>)
 8001462:	4804      	ldr	r0, [pc, #16]	; (8001474 <_AHT10_Error+0x2c>)
 8001464:	f006 f97b 	bl	800775e <HAL_UART_Transmit_IT>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0800d0d0 	.word	0x0800d0d0
 8001470:	20000246 	.word	0x20000246
 8001474:	20000520 	.word	0x20000520

08001478 <AHT10_TriggerMeasurements>:

void AHT10_TriggerMeasurements()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Master_Transmit_IT(&hi2c1, AHT10_ADDRESS, (uint8_t *) AHT10_TmpHum_Cmd, 3);
 8001482:	2303      	movs	r3, #3
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <AHT10_TriggerMeasurements+0x2c>)
 8001486:	2170      	movs	r1, #112	; 0x70
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <AHT10_TriggerMeasurements+0x30>)
 800148a:	f002 fc67 	bl	8003d5c <HAL_I2C_Master_Transmit_IT>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK) _AHT10_Error();
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <AHT10_TriggerMeasurements+0x24>
 8001498:	f7ff ffd6 	bl	8001448 <_AHT10_Error>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000000 	.word	0x20000000
 80014a8:	2000031c 	.word	0x2000031c

080014ac <_AHT10_ReadRaw>:

void _AHT10_ReadRaw()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Master_Receive_IT(&hi2c1, AHT10_ADDRESS, (uint8_t *) AHT10_DataStruct.RX_Data, 6);
 80014b6:	2306      	movs	r3, #6
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <_AHT10_ReadRaw+0x2c>)
 80014ba:	2170      	movs	r1, #112	; 0x70
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <_AHT10_ReadRaw+0x30>)
 80014be:	f002 fced 	bl	8003e9c <HAL_I2C_Master_Receive_IT>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK) _AHT10_Error();
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <_AHT10_ReadRaw+0x24>
 80014cc:	f7ff ffbc 	bl	8001448 <_AHT10_Error>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200002b8 	.word	0x200002b8
 80014dc:	2000031c 	.word	0x2000031c

080014e0 <_AHT10_RawToHoomanVals>:

void _AHT10_RawToHoomanVals()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	AHT10_DataStruct.ADC_Raw = (((uint32_t)AHT10_DataStruct.RX_Data[3] & 15) << 16) |
 80014e4:	4b2d      	ldr	r3, [pc, #180]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 80014e6:	7bdb      	ldrb	r3, [r3, #15]
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
			((uint32_t)AHT10_DataStruct.RX_Data[4] << 8) | AHT10_DataStruct.RX_Data[5];
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 80014f0:	7c1b      	ldrb	r3, [r3, #16]
 80014f2:	021b      	lsls	r3, r3, #8
	AHT10_DataStruct.ADC_Raw = (((uint32_t)AHT10_DataStruct.RX_Data[3] & 15) << 16) |
 80014f4:	4313      	orrs	r3, r2
			((uint32_t)AHT10_DataStruct.RX_Data[4] << 8) | AHT10_DataStruct.RX_Data[5];
 80014f6:	4a29      	ldr	r2, [pc, #164]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 80014f8:	7c52      	ldrb	r2, [r2, #17]
 80014fa:	4313      	orrs	r3, r2
	AHT10_DataStruct.ADC_Raw = (((uint32_t)AHT10_DataStruct.RX_Data[3] & 15) << 16) |
 80014fc:	4a27      	ldr	r2, [pc, #156]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 80014fe:	6013      	str	r3, [r2, #0]
	AHT10_DataStruct.Temperature = (float)(AHT10_DataStruct.ADC_Raw * 200.00 / 1048576.00) - 50.00;
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ff6d 	bl	80003e4 <__aeabi_ui2d>
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <_AHT10_RawToHoomanVals+0xc0>)
 8001510:	f7fe ffe2 	bl	80004d8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <_AHT10_RawToHoomanVals+0xc4>)
 8001522:	f7ff f903 	bl	800072c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff facb 	bl	8000ac8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	491c      	ldr	r1, [pc, #112]	; (80015a8 <_AHT10_RawToHoomanVals+0xc8>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fb1a 	bl	8000b70 <__aeabi_fsub>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 8001542:	605a      	str	r2, [r3, #4]

	AHT10_DataStruct.ADC_Raw = ((uint32_t)AHT10_DataStruct.RX_Data[1] << 12) |
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 8001546:	7b5b      	ldrb	r3, [r3, #13]
 8001548:	031a      	lsls	r2, r3, #12
			((uint32_t)AHT10_DataStruct.RX_Data[2] << 4) | (AHT10_DataStruct.RX_Data[3] >> 4);
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 800154c:	7b9b      	ldrb	r3, [r3, #14]
 800154e:	011b      	lsls	r3, r3, #4
	AHT10_DataStruct.ADC_Raw = ((uint32_t)AHT10_DataStruct.RX_Data[1] << 12) |
 8001550:	4313      	orrs	r3, r2
			((uint32_t)AHT10_DataStruct.RX_Data[2] << 4) | (AHT10_DataStruct.RX_Data[3] >> 4);
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 8001554:	7bd2      	ldrb	r2, [r2, #15]
 8001556:	0912      	lsrs	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	4313      	orrs	r3, r2
	AHT10_DataStruct.ADC_Raw = ((uint32_t)AHT10_DataStruct.RX_Data[1] << 12) |
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 800155e:	6013      	str	r3, [r2, #0]
	AHT10_DataStruct.Humidity = (float)(AHT10_DataStruct.ADC_Raw*100.00/1048576.00);
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff3d 	bl	80003e4 <__aeabi_ui2d>
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <_AHT10_RawToHoomanVals+0xcc>)
 8001570:	f7fe ffb2 	bl	80004d8 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_AHT10_RawToHoomanVals+0xc4>)
 8001582:	f7ff f8d3 	bl	800072c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa9b 	bl	8000ac8 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a01      	ldr	r2, [pc, #4]	; (800159c <_AHT10_RawToHoomanVals+0xbc>)
 8001596:	6093      	str	r3, [r2, #8]
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200002ac 	.word	0x200002ac
 80015a0:	40690000 	.word	0x40690000
 80015a4:	41300000 	.word	0x41300000
 80015a8:	42480000 	.word	0x42480000
 80015ac:	40590000 	.word	0x40590000

080015b0 <AHT10_Measure>:

void AHT10_Measure()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	  _AHT10_ReadRaw();
 80015b4:	f7ff ff7a 	bl	80014ac <_AHT10_ReadRaw>
	  if(~AHT10_DataStruct.RX_Data[0] & 0x80) _AHT10_RawToHoomanVals();
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <AHT10_Measure+0x1c>)
 80015ba:	7b1b      	ldrb	r3, [r3, #12]
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db01      	blt.n	80015c6 <AHT10_Measure+0x16>
 80015c2:	f7ff ff8d 	bl	80014e0 <_AHT10_RawToHoomanVals>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002ac 	.word	0x200002ac

080015d0 <AirPump_AnswerRequest>:
#include "main.h"
#include "AirPump.h"
#include "UART_Router.h"

void AirPump_AnswerRequest()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(AirPump_GPIO_Port, AirPump_Pin) == GPIO_PIN_RESET)
 80015d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <AirPump_AnswerRequest+0x30>)
 80015da:	f002 fa07 	bl	80039ec <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <AirPump_AnswerRequest+0x20>
		sprintf(Router.MainBuff, "AirPump:%s\n", ROUTER_MSG_AirPump_ON);
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <AirPump_AnswerRequest+0x34>)
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <AirPump_AnswerRequest+0x38>)
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <AirPump_AnswerRequest+0x3c>)
 80015ea:	f007 ffd3 	bl	8009594 <siprintf>
	else
		sprintf(Router.MainBuff, "AirPump:%s\n", ROUTER_MSG_AirPump_OFF);
	return;
 80015ee:	e005      	b.n	80015fc <AirPump_AnswerRequest+0x2c>
		sprintf(Router.MainBuff, "AirPump:%s\n", ROUTER_MSG_AirPump_OFF);
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <AirPump_AnswerRequest+0x40>)
 80015f2:	4905      	ldr	r1, [pc, #20]	; (8001608 <AirPump_AnswerRequest+0x38>)
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <AirPump_AnswerRequest+0x3c>)
 80015f6:	f007 ffcd 	bl	8009594 <siprintf>
	return;
 80015fa:	bf00      	nop
}
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40010c00 	.word	0x40010c00
 8001604:	0800d0e0 	.word	0x0800d0e0
 8001608:	0800d0e4 	.word	0x0800d0e4
 800160c:	20000246 	.word	0x20000246
 8001610:	0800d0f0 	.word	0x0800d0f0

08001614 <_BMP280_Error>:
BMP280_CalibrationData _CalibrationData;
int32_t temper_int;
//------------------------------------------------------------

void _BMP280_Error(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	sprintf(Router.MainBuff, "BMP280 error\n");
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <_BMP280_Error+0x24>)
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <_BMP280_Error+0x28>)
 800161c:	f007 ffba 	bl	8009594 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)Router.MainBuff, strlen(Router.MainBuff));
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <_BMP280_Error+0x28>)
 8001622:	f7fe fd95 	bl	8000150 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29b      	uxth	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4903      	ldr	r1, [pc, #12]	; (800163c <_BMP280_Error+0x28>)
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <_BMP280_Error+0x2c>)
 8001630:	f006 f895 	bl	800775e <HAL_UART_Transmit_IT>
	return;
 8001634:	bf00      	nop
}
 8001636:	bd80      	pop	{r7, pc}
 8001638:	0800d0f4 	.word	0x0800d0f4
 800163c:	20000246 	.word	0x20000246
 8001640:	20000520 	.word	0x20000520

08001644 <_BMP280_I2Cx_WriteData>:

//------------------------------------------------------------
uint8_t _BMP280_I2Cx_WriteData(uint16_t addr, uint8_t reg, uint8_t value)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af04      	add	r7, sp, #16
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
 800164e:	460b      	mov	r3, r1
 8001650:	717b      	strb	r3, [r7, #5]
 8001652:	4613      	mov	r3, r2
 8001654:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c2, addr, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x1000);
 800165a:	797b      	ldrb	r3, [r7, #5]
 800165c:	b29a      	uxth	r2, r3
 800165e:	88f9      	ldrh	r1, [r7, #6]
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <_BMP280_I2Cx_WriteData+0x4c>)
 8001672:	f002 fcbb 	bl	8003fec <HAL_I2C_Mem_Write>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <_BMP280_I2Cx_WriteData+0x40>
 8001680:	f7ff ffc8 	bl	8001614 <_BMP280_Error>
	return value;
 8001684:	793b      	ldrb	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000370 	.word	0x20000370

08001694 <_BMP280_I2Cx_ReadData>:

uint8_t _BMP280_I2Cx_ReadData(uint16_t addr, uint8_t reg)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af04      	add	r7, sp, #16
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	80fb      	strh	r3, [r7, #6]
 80016a0:	4613      	mov	r3, r2
 80016a2:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x1000);
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	88f9      	ldrh	r1, [r7, #6]
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030e 	add.w	r3, r7, #14
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <_BMP280_I2Cx_ReadData+0x50>)
 80016c6:	f002 fd8b 	bl	80041e0 <HAL_I2C_Mem_Read>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <_BMP280_I2Cx_ReadData+0x44>
 80016d4:	f7ff ff9e 	bl	8001614 <_BMP280_Error>
	return value;
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000370 	.word	0x20000370

080016e8 <_BMP280_I2Cx_ReadData16>:

void _BMP280_I2Cx_ReadData16(uint16_t addr, uint8_t reg, uint16_t *value)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af04      	add	r7, sp, #16
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	80fb      	strh	r3, [r7, #6]
 80016f4:	460b      	mov	r3, r1
 80016f6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)value, 2, 0x1000);
 80016fc:	797b      	ldrb	r3, [r7, #5]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	88f9      	ldrh	r1, [r7, #6]
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2302      	movs	r3, #2
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <_BMP280_I2Cx_ReadData16+0x48>)
 8001714:	f002 fd64 	bl	80041e0 <HAL_I2C_Mem_Read>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <_BMP280_I2Cx_ReadData16+0x40>
 8001722:	f7ff ff77 	bl	8001614 <_BMP280_Error>
	return;
 8001726:	bf00      	nop
 8001728:	bf00      	nop
}
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000370 	.word	0x20000370

08001734 <_BMP280_I2Cx_ReadData24>:

void _BMP280_I2Cx_ReadData24(uint16_t addr, uint8_t reg, uint32_t *value)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af04      	add	r7, sp, #16
 800173a:	4603      	mov	r3, r0
 800173c:	603a      	str	r2, [r7, #0]
 800173e:	80fb      	strh	r3, [r7, #6]
 8001740:	460b      	mov	r3, r1
 8001742:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)value, 3, 0x1000);
 8001748:	797b      	ldrb	r3, [r7, #5]
 800174a:	b29a      	uxth	r2, r3
 800174c:	88f9      	ldrh	r1, [r7, #6]
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2303      	movs	r3, #3
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <_BMP280_I2Cx_ReadData24+0x48>)
 8001760:	f002 fd3e 	bl	80041e0 <HAL_I2C_Mem_Read>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <_BMP280_I2Cx_ReadData24+0x40>
 800176e:	f7ff ff51 	bl	8001614 <_BMP280_Error>
	return;
 8001772:	bf00      	nop
 8001774:	bf00      	nop
}
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000370 	.word	0x20000370

08001780 <_BMP280_WriteReg>:

void _BMP280_WriteReg(uint8_t reg, uint8_t value)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
	_BMP280_I2Cx_WriteData(BMP280_ADDRESS, reg, value);
 8001790:	79ba      	ldrb	r2, [r7, #6]
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4619      	mov	r1, r3
 8001796:	20ec      	movs	r0, #236	; 0xec
 8001798:	f7ff ff54 	bl	8001644 <_BMP280_I2Cx_WriteData>
	return;
 800179c:	bf00      	nop
}
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_BMP280_ReadReg>:

//------------------------------------------------------------

uint8_t _BMP280_ReadReg(uint8_t reg)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	uint8_t res = _BMP280_I2Cx_ReadData(BMP280_ADDRESS, reg);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4619      	mov	r1, r3
 80017b2:	20ec      	movs	r0, #236	; 0xec
 80017b4:	f7ff ff6e 	bl	8001694 <_BMP280_I2Cx_ReadData>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
	return res;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_BMP280_ReadStatus>:

uint8_t _BMP280_ReadStatus(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
	uint8_t res = _BMP280_ReadReg(BMP280_REGISTER_STATUS) & 0x09;
 80017cc:	20f3      	movs	r0, #243	; 0xf3
 80017ce:	f7ff ffe9 	bl	80017a4 <_BMP280_ReadReg>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f003 0309 	and.w	r3, r3, #9
 80017d8:	71fb      	strb	r3, [r7, #7]
	return res;
 80017da:	79fb      	ldrb	r3, [r7, #7]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_BMP280_ReadReg_U16>:

//------------------------------------------------------------

void _BMP280_ReadReg_U16(uint8_t reg, uint16_t *value)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
	_BMP280_I2Cx_ReadData16(BMP280_ADDRESS, reg, value);
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	20ec      	movs	r0, #236	; 0xec
 80017f8:	f7ff ff76 	bl	80016e8 <_BMP280_I2Cx_ReadData16>
	return;
 80017fc:	bf00      	nop
}
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_BMP280_ReadReg_S16>:

void _BMP280_ReadReg_S16(uint8_t reg, int16_t *value)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
	_BMP280_I2Cx_ReadData16(BMP280_ADDRESS, reg, (uint16_t*) value);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	20ec      	movs	r0, #236	; 0xec
 8001818:	f7ff ff66 	bl	80016e8 <_BMP280_I2Cx_ReadData16>
	return;
 800181c:	bf00      	nop
}
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_BMP280_ReadReg_BE_U24>:

void _BMP280_ReadReg_BE_U24(uint8_t reg, uint32_t *value)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
	_BMP280_I2Cx_ReadData24(BMP280_ADDRESS, reg, value);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	20ec      	movs	r0, #236	; 0xec
 8001838:	f7ff ff7c 	bl	8001734 <_BMP280_I2Cx_ReadData24>
	*(uint32_t *) value = be24toword(*(uint32_t *) value) & 0x00FFFFFF;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	b2da      	uxtb	r2, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800184c:	431a      	orrs	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001858:	4313      	orrs	r3, r2
 800185a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	601a      	str	r2, [r3, #0]
	return;
 8001862:	bf00      	nop
}
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <_BMP280_ReadCoefficients>:

//------------------------------------------------------------

void _BMP280_ReadCoefficients(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	_BMP280_ReadReg_U16(BMP280_REGISTER_DIG_P1, &_CalibrationData.dig_P1);
 8001870:	4912      	ldr	r1, [pc, #72]	; (80018bc <_BMP280_ReadCoefficients+0x50>)
 8001872:	208e      	movs	r0, #142	; 0x8e
 8001874:	f7ff ffb6 	bl	80017e4 <_BMP280_ReadReg_U16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P2, &_CalibrationData.dig_P2);
 8001878:	4911      	ldr	r1, [pc, #68]	; (80018c0 <_BMP280_ReadCoefficients+0x54>)
 800187a:	2090      	movs	r0, #144	; 0x90
 800187c:	f7ff ffc2 	bl	8001804 <_BMP280_ReadReg_S16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P3, &_CalibrationData.dig_P3);
 8001880:	4910      	ldr	r1, [pc, #64]	; (80018c4 <_BMP280_ReadCoefficients+0x58>)
 8001882:	2092      	movs	r0, #146	; 0x92
 8001884:	f7ff ffbe 	bl	8001804 <_BMP280_ReadReg_S16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P4, &_CalibrationData.dig_P4);
 8001888:	490f      	ldr	r1, [pc, #60]	; (80018c8 <_BMP280_ReadCoefficients+0x5c>)
 800188a:	2094      	movs	r0, #148	; 0x94
 800188c:	f7ff ffba 	bl	8001804 <_BMP280_ReadReg_S16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P5, &_CalibrationData.dig_P5);
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <_BMP280_ReadCoefficients+0x60>)
 8001892:	2096      	movs	r0, #150	; 0x96
 8001894:	f7ff ffb6 	bl	8001804 <_BMP280_ReadReg_S16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P6, &_CalibrationData.dig_P6);
 8001898:	490d      	ldr	r1, [pc, #52]	; (80018d0 <_BMP280_ReadCoefficients+0x64>)
 800189a:	2098      	movs	r0, #152	; 0x98
 800189c:	f7ff ffb2 	bl	8001804 <_BMP280_ReadReg_S16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P7, &_CalibrationData.dig_P7);
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <_BMP280_ReadCoefficients+0x68>)
 80018a2:	209a      	movs	r0, #154	; 0x9a
 80018a4:	f7ff ffae 	bl	8001804 <_BMP280_ReadReg_S16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P8, &_CalibrationData.dig_P8);
 80018a8:	490b      	ldr	r1, [pc, #44]	; (80018d8 <_BMP280_ReadCoefficients+0x6c>)
 80018aa:	209c      	movs	r0, #156	; 0x9c
 80018ac:	f7ff ffaa 	bl	8001804 <_BMP280_ReadReg_S16>

	_BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P9, &_CalibrationData.dig_P9);
 80018b0:	490a      	ldr	r1, [pc, #40]	; (80018dc <_BMP280_ReadCoefficients+0x70>)
 80018b2:	209e      	movs	r0, #158	; 0x9e
 80018b4:	f7ff ffa6 	bl	8001804 <_BMP280_ReadReg_S16>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002c4 	.word	0x200002c4
 80018c0:	200002c6 	.word	0x200002c6
 80018c4:	200002c8 	.word	0x200002c8
 80018c8:	200002ca 	.word	0x200002ca
 80018cc:	200002cc 	.word	0x200002cc
 80018d0:	200002ce 	.word	0x200002ce
 80018d4:	200002d0 	.word	0x200002d0
 80018d8:	200002d2 	.word	0x200002d2
 80018dc:	200002d4 	.word	0x200002d4

080018e0 <_BMP280_SetStandby>:

//------------------------------------------------------------

void _BMP280_SetStandby(uint8_t tsb) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = _BMP280_ReadReg(BMP280_REG_CONFIG) & ~BMP280_STBY_MSK;
 80018ea:	20f5      	movs	r0, #245	; 0xf5
 80018ec:	f7ff ff5a 	bl	80017a4 <_BMP280_ReadReg>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	73fb      	strb	r3, [r7, #15]
	reg |= tsb & BMP280_STBY_MSK;
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	f023 031f 	bic.w	r3, r3, #31
 8001900:	b25a      	sxtb	r2, r3
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4313      	orrs	r3, r2
 8001908:	b25b      	sxtb	r3, r3
 800190a:	73fb      	strb	r3, [r7, #15]
	_BMP280_WriteReg(BMP280_REG_CONFIG, reg);
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	4619      	mov	r1, r3
 8001910:	20f5      	movs	r0, #245	; 0xf5
 8001912:	f7ff ff35 	bl	8001780 <_BMP280_WriteReg>
	return;
 8001916:	bf00      	nop
}
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_BMP280_SetFilter>:

//------------------------------------------------------------

void _BMP280_SetFilter(uint8_t filter) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = _BMP280_ReadReg(BMP280_REG_CONFIG) & ~BMP280_FILTER_MSK;
 8001928:	20f5      	movs	r0, #245	; 0xf5
 800192a:	f7ff ff3b 	bl	80017a4 <_BMP280_ReadReg>
 800192e:	4603      	mov	r3, r0
 8001930:	f023 031c 	bic.w	r3, r3, #28
 8001934:	73fb      	strb	r3, [r7, #15]
	reg |= filter & BMP280_FILTER_MSK;
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	f003 031c 	and.w	r3, r3, #28
 800193e:	b25a      	sxtb	r2, r3
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	4313      	orrs	r3, r2
 8001946:	b25b      	sxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
	_BMP280_WriteReg(BMP280_REG_CONFIG, reg);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	4619      	mov	r1, r3
 800194e:	20f5      	movs	r0, #245	; 0xf5
 8001950:	f7ff ff16 	bl	8001780 <_BMP280_WriteReg>
	return;
 8001954:	bf00      	nop
}
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_BMP280_SetOversamplingPressure>:

//------------------------------------------------------------

void _BMP280_SetOversamplingPressure(uint8_t osrs)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = _BMP280_ReadReg(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_P_MSK;
 8001966:	20f4      	movs	r0, #244	; 0xf4
 8001968:	f7ff ff1c 	bl	80017a4 <_BMP280_ReadReg>
 800196c:	4603      	mov	r3, r0
 800196e:	f023 031c 	bic.w	r3, r3, #28
 8001972:	73fb      	strb	r3, [r7, #15]
	reg |= osrs & BMP280_OSRS_P_MSK;
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	f003 031c 	and.w	r3, r3, #28
 800197c:	b25a      	sxtb	r2, r3
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4313      	orrs	r3, r2
 8001984:	b25b      	sxtb	r3, r3
 8001986:	73fb      	strb	r3, [r7, #15]
	_BMP280_WriteReg(BMP280_REG_CTRL_MEAS, reg);
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	4619      	mov	r1, r3
 800198c:	20f4      	movs	r0, #244	; 0xf4
 800198e:	f7ff fef7 	bl	8001780 <_BMP280_WriteReg>
	return;
 8001992:	bf00      	nop
}
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_BMP280_SetMode>:

//------------------------------------------------------------

void _BMP280_SetMode(uint8_t mode)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = _BMP280_ReadReg(BMP280_REG_CTRL_MEAS) & ~BMP280_MODE_MSK;
 80019a4:	20f4      	movs	r0, #244	; 0xf4
 80019a6:	f7ff fefd 	bl	80017a4 <_BMP280_ReadReg>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f023 0303 	bic.w	r3, r3, #3
 80019b0:	73fb      	strb	r3, [r7, #15]
	reg |= mode & BMP280_MODE_MSK;
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	b25a      	sxtb	r2, r3
 80019bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	73fb      	strb	r3, [r7, #15]
	_BMP280_WriteReg(BMP280_REG_CTRL_MEAS, reg);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	4619      	mov	r1, r3
 80019ca:	20f4      	movs	r0, #244	; 0xf4
 80019cc:	f7ff fed8 	bl	8001780 <_BMP280_WriteReg>
	return;
 80019d0:	bf00      	nop
}
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <BMP280_ReadPressure>:

//------------------------------------------------------------

float BMP280_ReadPressure(void)
{
 80019d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019dc:	b09e      	sub	sp, #120	; 0x78
 80019de:	af00      	add	r7, sp, #0
	float press_float = 0.0f;
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;

	_BMP280_ReadReg_BE_U24(BMP280_REGISTER_PRESSUREDATA, &press_raw);
 80019e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ea:	4619      	mov	r1, r3
 80019ec:	20f7      	movs	r0, #247	; 0xf7
 80019ee:	f7ff ff19 	bl	8001824 <_BMP280_ReadReg_BE_U24>
	press_raw >>= 4;
 80019f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	653b      	str	r3, [r7, #80]	; 0x50
	val1 = ((int64_t) temper_int) - 128000;
 80019f8:	4b6b      	ldr	r3, [pc, #428]	; (8001ba8 <BMP280_ReadPressure+0x1d0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a02:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001a06:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001a0a:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	val2 = val1 * val1 * (int64_t)_CalibrationData.dig_P6;
 8001a0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a12:	fb03 f102 	mul.w	r1, r3, r2
 8001a16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a1a:	fb03 f302 	mul.w	r3, r3, r2
 8001a1e:	18ca      	adds	r2, r1, r3
 8001a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a22:	fba3 4503 	umull	r4, r5, r3, r3
 8001a26:	1953      	adds	r3, r2, r5
 8001a28:	461d      	mov	r5, r3
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <BMP280_ReadPressure+0x1d4>)
 8001a2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a36:	fb02 f005 	mul.w	r0, r2, r5
 8001a3a:	fb04 f103 	mul.w	r1, r4, r3
 8001a3e:	4401      	add	r1, r0
 8001a40:	fba4 2302 	umull	r2, r3, r4, r2
 8001a44:	4419      	add	r1, r3
 8001a46:	460b      	mov	r3, r1
 8001a48:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001a4c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	val2 = val2 + ((val1 * (int64_t)_CalibrationData.dig_P5) << 17);
 8001a50:	4b56      	ldr	r3, [pc, #344]	; (8001bac <BMP280_ReadPressure+0x1d4>)
 8001a52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001a5e:	fb03 f001 	mul.w	r0, r3, r1
 8001a62:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001a64:	fb02 f101 	mul.w	r1, r2, r1
 8001a68:	4408      	add	r0, r1
 8001a6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001a6c:	fba1 2302 	umull	r2, r3, r1, r2
 8001a70:	18c1      	adds	r1, r0, r3
 8001a72:	460b      	mov	r3, r1
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	0459      	lsls	r1, r3, #17
 8001a7e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001a82:	0450      	lsls	r0, r2, #17
 8001a84:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a88:	eb12 0800 	adds.w	r8, r2, r0
 8001a8c:	eb43 0901 	adc.w	r9, r3, r1
 8001a90:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	val2 = val2 + ((int64_t)_CalibrationData.dig_P4 << 35);
 8001a94:	4b45      	ldr	r3, [pc, #276]	; (8001bac <BMP280_ReadPressure+0x1d4>)
 8001a96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	00d1      	lsls	r1, r2, #3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ab0:	1814      	adds	r4, r2, r0
 8001ab2:	61bc      	str	r4, [r7, #24]
 8001ab4:	414b      	adcs	r3, r1
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001abc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	val1 = ((val1 * val1 * (int64_t)_CalibrationData.dig_P3) >> 8) + ((val1 * (int64_t)_CalibrationData.dig_P2) << 12);
 8001ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ac4:	fb03 f102 	mul.w	r1, r3, r2
 8001ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001acc:	fb03 f302 	mul.w	r3, r3, r2
 8001ad0:	18ca      	adds	r2, r1, r3
 8001ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad4:	fba3 4503 	umull	r4, r5, r3, r3
 8001ad8:	1953      	adds	r3, r2, r5
 8001ada:	461d      	mov	r5, r3
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <BMP280_ReadPressure+0x1d4>)
 8001ade:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ae8:	fb02 f005 	mul.w	r0, r2, r5
 8001aec:	fb04 f103 	mul.w	r1, r4, r3
 8001af0:	4401      	add	r1, r0
 8001af2:	fba4 2302 	umull	r2, r3, r4, r2
 8001af6:	4419      	add	r1, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	f04f 0800 	mov.w	r8, #0
 8001afe:	f04f 0900 	mov.w	r9, #0
 8001b02:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001b06:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001b0a:	ea4f 2923 	mov.w	r9, r3, asr #8
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <BMP280_ReadPressure+0x1d4>)
 8001b10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b1c:	fb03 f001 	mul.w	r0, r3, r1
 8001b20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b22:	fb02 f101 	mul.w	r1, r2, r1
 8001b26:	1844      	adds	r4, r0, r1
 8001b28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b2a:	fba1 0102 	umull	r0, r1, r1, r2
 8001b2e:	1863      	adds	r3, r4, r1
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	030b      	lsls	r3, r1, #12
 8001b3c:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001b40:	0302      	lsls	r2, r0, #12
 8001b42:	eb18 0102 	adds.w	r1, r8, r2
 8001b46:	6139      	str	r1, [r7, #16]
 8001b48:	eb49 0303 	adc.w	r3, r9, r3
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b52:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)_CalibrationData.dig_P1) >> 33;
 8001b56:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b5a:	1c11      	adds	r1, r2, #0
 8001b5c:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b5e:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <BMP280_ReadPressure+0x1d4>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001b72:	4629      	mov	r1, r5
 8001b74:	fb02 f001 	mul.w	r0, r2, r1
 8001b78:	4621      	mov	r1, r4
 8001b7a:	fb01 f103 	mul.w	r1, r1, r3
 8001b7e:	4401      	add	r1, r0
 8001b80:	4620      	mov	r0, r4
 8001b82:	fba0 2302 	umull	r2, r3, r0, r2
 8001b86:	4419      	add	r1, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	f04f 0000 	mov.w	r0, #0
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	1058      	asrs	r0, r3, #1
 8001b94:	17d9      	asrs	r1, r3, #31
 8001b96:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	if (val1 == 0)
 8001b9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	d106      	bne.n	8001bb0 <BMP280_ReadPressure+0x1d8>
	{
		return 0; // avoid exception caused by division by zero
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	e123      	b.n	8001df0 <BMP280_ReadPressure+0x418>
 8001ba8:	200002c0 	.word	0x200002c0
 8001bac:	200002c4 	.word	0x200002c4
	}
	p = 1048576 - press_raw;
 8001bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - val2) * 3125) / val1;
 8001bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc8:	07db      	lsls	r3, r3, #31
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
 8001bcc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001bd0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	ebb1 0a02 	subs.w	sl, r1, r2
 8001bda:	4629      	mov	r1, r5
 8001bdc:	eb61 0b03 	sbc.w	fp, r1, r3
 8001be0:	4652      	mov	r2, sl
 8001be2:	465b      	mov	r3, fp
 8001be4:	1891      	adds	r1, r2, r2
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	415b      	adcs	r3, r3
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf0:	eb12 020a 	adds.w	r2, r2, sl
 8001bf4:	eb43 030b 	adc.w	r3, r3, fp
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0199      	lsls	r1, r3, #6
 8001c02:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001c06:	0190      	lsls	r0, r2, #6
 8001c08:	1812      	adds	r2, r2, r0
 8001c0a:	eb41 0303 	adc.w	r3, r1, r3
 8001c0e:	f04f 0000 	mov.w	r0, #0
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c1c:	0090      	lsls	r0, r2, #2
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	eb12 020a 	adds.w	r2, r2, sl
 8001c26:	eb43 030b 	adc.w	r3, r3, fp
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	0099      	lsls	r1, r3, #2
 8001c34:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c38:	0090      	lsls	r0, r2, #2
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	eb12 010a 	adds.w	r1, r2, sl
 8001c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c44:	eb43 030b 	adc.w	r3, r3, fp
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c52:	f7ff f9e7 	bl	8001024 <__aeabi_ldivmod>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	val1 = (((int64_t)_CalibrationData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <BMP280_ReadPressure+0x424>)
 8001c60:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c64:	b218      	sxth	r0, r3
 8001c66:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c6a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	0b62      	lsrs	r2, r4, #13
 8001c78:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001c7c:	136b      	asrs	r3, r5, #13
 8001c7e:	fb02 f501 	mul.w	r5, r2, r1
 8001c82:	fb00 f403 	mul.w	r4, r0, r3
 8001c86:	442c      	add	r4, r5
 8001c88:	fba0 0102 	umull	r0, r1, r0, r2
 8001c8c:	1863      	adds	r3, r4, r1
 8001c8e:	4619      	mov	r1, r3
 8001c90:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	0b62      	lsrs	r2, r4, #13
 8001c9e:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001ca2:	136b      	asrs	r3, r5, #13
 8001ca4:	fb02 f501 	mul.w	r5, r2, r1
 8001ca8:	fb00 f403 	mul.w	r4, r0, r3
 8001cac:	442c      	add	r4, r5
 8001cae:	fba0 0102 	umull	r0, r1, r0, r2
 8001cb2:	1863      	adds	r3, r4, r1
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	0e42      	lsrs	r2, r0, #25
 8001cc0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001cc4:	164b      	asrs	r3, r1, #25
 8001cc6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	val2 = (((int64_t)_CalibrationData.dig_P8) * p) >> 19;
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <BMP280_ReadPressure+0x424>)
 8001ccc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001cd8:	fb03 f001 	mul.w	r0, r3, r1
 8001cdc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001cde:	fb02 f101 	mul.w	r1, r2, r1
 8001ce2:	1844      	adds	r4, r0, r1
 8001ce4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ce6:	fba1 0102 	umull	r0, r1, r1, r2
 8001cea:	1863      	adds	r3, r4, r1
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	0cc2      	lsrs	r2, r0, #19
 8001cf8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001cfc:	14cb      	asrs	r3, r1, #19
 8001cfe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	p = ((p + val1 + val2) >> 8) + ((int64_t)_CalibrationData.dig_P7 << 4);
 8001d02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001d06:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d0a:	1884      	adds	r4, r0, r2
 8001d0c:	633c      	str	r4, [r7, #48]	; 0x30
 8001d0e:	eb41 0303 	adc.w	r3, r1, r3
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
 8001d14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	1889      	adds	r1, r1, r2
 8001d20:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d22:	4629      	mov	r1, r5
 8001d24:	eb43 0101 	adc.w	r1, r3, r1
 8001d28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001d36:	4623      	mov	r3, r4
 8001d38:	0a18      	lsrs	r0, r3, #8
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d40:	462b      	mov	r3, r5
 8001d42:	1219      	asrs	r1, r3, #8
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <BMP280_ReadPressure+0x424>)
 8001d46:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d4a:	b21c      	sxth	r4, r3
 8001d4c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	012b      	lsls	r3, r5, #4
 8001d5a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d5e:	0122      	lsls	r2, r4, #4
 8001d60:	1884      	adds	r4, r0, r2
 8001d62:	603c      	str	r4, [r7, #0]
 8001d64:	eb41 0303 	adc.w	r3, r1, r3
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d6e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001d72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	0a02      	lsrs	r2, r0, #8
 8001d80:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001d84:	120b      	asrs	r3, r1, #8
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fb03 f402 	mul.w	r4, r3, r2
 8001d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d92:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	ea02 0500 	and.w	r5, r2, r0
 8001d9e:	623d      	str	r5, [r7, #32]
 8001da0:	400b      	ands	r3, r1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <BMP280_ReadPressure+0x428>)
 8001da6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001daa:	464a      	mov	r2, r9
 8001dac:	fb03 f202 	mul.w	r2, r3, r2
 8001db0:	2300      	movs	r3, #0
 8001db2:	4641      	mov	r1, r8
 8001db4:	fb03 f301 	mul.w	r3, r3, r1
 8001db8:	4413      	add	r3, r2
 8001dba:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <BMP280_ReadPressure+0x428>)
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	fba1 0102 	umull	r0, r1, r1, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <BMP280_ReadPressure+0x42c>)
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f7ff f92a 	bl	8001024 <__aeabi_ldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	4423      	add	r3, r4
 8001dd8:	657b      	str	r3, [r7, #84]	; 0x54
	press_float = pres_int / 1000.0f;
 8001dda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ddc:	f7fe ff7a 	bl	8000cd4 <__aeabi_ui2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4909      	ldr	r1, [pc, #36]	; (8001e08 <BMP280_ReadPressure+0x430>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f881 	bl	8000eec <__aeabi_fdiv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	677b      	str	r3, [r7, #116]	; 0x74
	return press_float;
 8001dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3778      	adds	r7, #120	; 0x78
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200002c4 	.word	0x200002c4
 8001e00:	0005f5e1 	.word	0x0005f5e1
 8001e04:	000186a0 	.word	0x000186a0
 8001e08:	447a0000 	.word	0x447a0000

08001e0c <BMP280_Init>:

//------------------------------------------------------------

void BMP280_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
	sprintf(Router.MainBuff, "BMP280 Initializing...\n");
 8001e12:	492c      	ldr	r1, [pc, #176]	; (8001ec4 <BMP280_Init+0xb8>)
 8001e14:	482c      	ldr	r0, [pc, #176]	; (8001ec8 <BMP280_Init+0xbc>)
 8001e16:	f007 fbbd 	bl	8009594 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Router.MainBuff, strlen(Router.MainBuff), 1000);
 8001e1a:	482b      	ldr	r0, [pc, #172]	; (8001ec8 <BMP280_Init+0xbc>)
 8001e1c:	f7fe f998 	bl	8000150 <strlen>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e28:	4927      	ldr	r1, [pc, #156]	; (8001ec8 <BMP280_Init+0xbc>)
 8001e2a:	4828      	ldr	r0, [pc, #160]	; (8001ecc <BMP280_Init+0xc0>)
 8001e2c:	f005 fc14 	bl	8007658 <HAL_UART_Transmit>

	uint8_t value = _BMP280_ReadReg(BMP280_REG_ID);
 8001e30:	20d0      	movs	r0, #208	; 0xd0
 8001e32:	f7ff fcb7 	bl	80017a4 <_BMP280_ReadReg>
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	sprintf(Router.MainBuff, "BMP280_CHIP_ID: 0x%02X\n", value);
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4924      	ldr	r1, [pc, #144]	; (8001ed0 <BMP280_Init+0xc4>)
 8001e40:	4821      	ldr	r0, [pc, #132]	; (8001ec8 <BMP280_Init+0xbc>)
 8001e42:	f007 fba7 	bl	8009594 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Router.MainBuff, strlen(Router.MainBuff), 1000);
 8001e46:	4820      	ldr	r0, [pc, #128]	; (8001ec8 <BMP280_Init+0xbc>)
 8001e48:	f7fe f982 	bl	8000150 <strlen>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e54:	491c      	ldr	r1, [pc, #112]	; (8001ec8 <BMP280_Init+0xbc>)
 8001e56:	481d      	ldr	r0, [pc, #116]	; (8001ecc <BMP280_Init+0xc0>)
 8001e58:	f005 fbfe 	bl	8007658 <HAL_UART_Transmit>

	if(value != BMP280_CHIP_ID)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b58      	cmp	r3, #88	; 0x58
 8001e60:	d002      	beq.n	8001e68 <BMP280_Init+0x5c>
	{
		_BMP280_Error();
 8001e62:	f7ff fbd7 	bl	8001614 <_BMP280_Error>
		return;
 8001e66:	e029      	b.n	8001ebc <BMP280_Init+0xb0>
	}

	_BMP280_WriteReg(BMP280_SOFTRESET_REG, BMP280_SOFTRESET_VALUE);
 8001e68:	21b6      	movs	r1, #182	; 0xb6
 8001e6a:	20e0      	movs	r0, #224	; 0xe0
 8001e6c:	f7ff fc88 	bl	8001780 <_BMP280_WriteReg>
	while(_BMP280_ReadStatus() & BMP280_STATUS_IM_UPTODATE);
 8001e70:	bf00      	nop
 8001e72:	f7ff fca8 	bl	80017c6 <_BMP280_ReadStatus>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f8      	bne.n	8001e72 <BMP280_Init+0x66>

	_BMP280_ReadCoefficients();
 8001e80:	f7ff fcf4 	bl	800186c <_BMP280_ReadCoefficients>

	_BMP280_SetStandby(BMP280_STBY_1000);
 8001e84:	20a0      	movs	r0, #160	; 0xa0
 8001e86:	f7ff fd2b 	bl	80018e0 <_BMP280_SetStandby>

	_BMP280_SetFilter(BMP280_FILTER_4);
 8001e8a:	2008      	movs	r0, #8
 8001e8c:	f7ff fd47 	bl	800191e <_BMP280_SetFilter>

	_BMP280_SetOversamplingPressure(BMP280_OSRS_P_x2);
 8001e90:	2008      	movs	r0, #8
 8001e92:	f7ff fd63 	bl	800195c <_BMP280_SetOversamplingPressure>

	_BMP280_SetMode(BMP280_MODE_NORMAL);
 8001e96:	2003      	movs	r0, #3
 8001e98:	f7ff fd7f 	bl	800199a <_BMP280_SetMode>

	sprintf(Router.MainBuff, "BMP280 Initialization completed\n");
 8001e9c:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <BMP280_Init+0xc8>)
 8001e9e:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <BMP280_Init+0xbc>)
 8001ea0:	f007 fb78 	bl	8009594 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Router.MainBuff, strlen(Router.MainBuff), 1000);
 8001ea4:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <BMP280_Init+0xbc>)
 8001ea6:	f7fe f953 	bl	8000150 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	4905      	ldr	r1, [pc, #20]	; (8001ec8 <BMP280_Init+0xbc>)
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <BMP280_Init+0xc0>)
 8001eb6:	f005 fbcf 	bl	8007658 <HAL_UART_Transmit>
	return;
 8001eba:	bf00      	nop
}
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	0800d104 	.word	0x0800d104
 8001ec8:	20000246 	.word	0x20000246
 8001ecc:	20000520 	.word	0x20000520
 8001ed0:	0800d11c 	.word	0x0800d11c
 8001ed4:	0800d134 	.word	0x0800d134

08001ed8 <FAN_AnswerRequest>:
#include "FAN.h"
#include "UART_Router.h"


void FAN_AnswerRequest()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(FAN_GPIO_Port, FAN_Pin) == GPIO_PIN_RESET)
 8001edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee0:	4809      	ldr	r0, [pc, #36]	; (8001f08 <FAN_AnswerRequest+0x30>)
 8001ee2:	f001 fd83 	bl	80039ec <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <FAN_AnswerRequest+0x20>
		sprintf(Router.MainBuff, "FAN:%s\n", ROUTER_MSG_FAN_ON);
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <FAN_AnswerRequest+0x34>)
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <FAN_AnswerRequest+0x38>)
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <FAN_AnswerRequest+0x3c>)
 8001ef2:	f007 fb4f 	bl	8009594 <siprintf>
	else
		sprintf(Router.MainBuff, "FAN:%s\n", ROUTER_MSG_FAN_OFF);
	return;
 8001ef6:	e005      	b.n	8001f04 <FAN_AnswerRequest+0x2c>
		sprintf(Router.MainBuff, "FAN:%s\n", ROUTER_MSG_FAN_OFF);
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <FAN_AnswerRequest+0x40>)
 8001efa:	4905      	ldr	r1, [pc, #20]	; (8001f10 <FAN_AnswerRequest+0x38>)
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <FAN_AnswerRequest+0x3c>)
 8001efe:	f007 fb49 	bl	8009594 <siprintf>
	return;
 8001f02:	bf00      	nop
}
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40010c00 	.word	0x40010c00
 8001f0c:	0800d158 	.word	0x0800d158
 8001f10:	0800d15c 	.word	0x0800d15c
 8001f14:	20000246 	.word	0x20000246
 8001f18:	0800d164 	.word	0x0800d164

08001f1c <IR_Lamp_AnswerRequest>:
#include "FAN.h"
#include "UART_Router.h"


void IR_Lamp_AnswerRequest()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IR_Lamp_GPIO_Port, IR_Lamp_Pin) == GPIO_PIN_RESET)
 8001f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f24:	4809      	ldr	r0, [pc, #36]	; (8001f4c <IR_Lamp_AnswerRequest+0x30>)
 8001f26:	f001 fd61 	bl	80039ec <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <IR_Lamp_AnswerRequest+0x20>
		sprintf(Router.MainBuff, "LAMP:%s\n", ROUTER_MSG_IR_LAMP_ON);
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <IR_Lamp_AnswerRequest+0x34>)
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <IR_Lamp_AnswerRequest+0x38>)
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <IR_Lamp_AnswerRequest+0x3c>)
 8001f36:	f007 fb2d 	bl	8009594 <siprintf>
	else
		sprintf(Router.MainBuff, "LAMP:%s\n", ROUTER_MSG_IR_LAMP_OFF);
	return;
 8001f3a:	e005      	b.n	8001f48 <IR_Lamp_AnswerRequest+0x2c>
		sprintf(Router.MainBuff, "LAMP:%s\n", ROUTER_MSG_IR_LAMP_OFF);
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <IR_Lamp_AnswerRequest+0x40>)
 8001f3e:	4905      	ldr	r1, [pc, #20]	; (8001f54 <IR_Lamp_AnswerRequest+0x38>)
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <IR_Lamp_AnswerRequest+0x3c>)
 8001f42:	f007 fb27 	bl	8009594 <siprintf>
	return;
 8001f46:	bf00      	nop
}
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	0800d168 	.word	0x0800d168
 8001f54:	0800d16c 	.word	0x0800d16c
 8001f58:	20000246 	.word	0x20000246
 8001f5c:	0800d178 	.word	0x0800d178

08001f60 <Router_UART_Transmit_DMA>:

extern UART_HandleTypeDef huart2;
extern DMA_HandleTypeDef hdma_usart2_tx;

void Router_UART_Transmit_DMA(const uint8_t *pData, uint16_t Size)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart2, pData, Size);
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4803      	ldr	r0, [pc, #12]	; (8001f80 <Router_UART_Transmit_DMA+0x20>)
 8001f74:	f005 fc28 	bl	80077c8 <HAL_UART_Transmit_DMA>
	return;
 8001f78:	bf00      	nop
}
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000520 	.word	0x20000520
 8001f84:	00000000 	.word	0x00000000

08001f88 <Router_CommandHandler>:

void Router_CommandHandler()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	switch((char)Router.RxBuff[0])
 8001f8c:	4b80      	ldr	r3, [pc, #512]	; (8002190 <Router_CommandHandler+0x208>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	3b30      	subs	r3, #48	; 0x30
 8001f92:	2b44      	cmp	r3, #68	; 0x44
 8001f94:	f200 80ec 	bhi.w	8002170 <Router_CommandHandler+0x1e8>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <Router_CommandHandler+0x18>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08002115 	.word	0x08002115
 8001fa4:	08002171 	.word	0x08002171
 8001fa8:	08002171 	.word	0x08002171
 8001fac:	08002171 	.word	0x08002171
 8001fb0:	08002171 	.word	0x08002171
 8001fb4:	08002171 	.word	0x08002171
 8001fb8:	08002171 	.word	0x08002171
 8001fbc:	08002171 	.word	0x08002171
 8001fc0:	08002171 	.word	0x08002171
 8001fc4:	08002171 	.word	0x08002171
 8001fc8:	08002171 	.word	0x08002171
 8001fcc:	08002171 	.word	0x08002171
 8001fd0:	08002171 	.word	0x08002171
 8001fd4:	08002171 	.word	0x08002171
 8001fd8:	08002171 	.word	0x08002171
 8001fdc:	08002171 	.word	0x08002171
 8001fe0:	08002171 	.word	0x08002171
 8001fe4:	08002171 	.word	0x08002171
 8001fe8:	08002171 	.word	0x08002171
 8001fec:	08002171 	.word	0x08002171
 8001ff0:	08002171 	.word	0x08002171
 8001ff4:	08002171 	.word	0x08002171
 8001ff8:	08002171 	.word	0x08002171
 8001ffc:	08002171 	.word	0x08002171
 8002000:	08002171 	.word	0x08002171
 8002004:	08002171 	.word	0x08002171
 8002008:	08002171 	.word	0x08002171
 800200c:	08002171 	.word	0x08002171
 8002010:	08002171 	.word	0x08002171
 8002014:	08002171 	.word	0x08002171
 8002018:	08002171 	.word	0x08002171
 800201c:	08002171 	.word	0x08002171
 8002020:	08002171 	.word	0x08002171
 8002024:	08002171 	.word	0x08002171
 8002028:	08002171 	.word	0x08002171
 800202c:	08002171 	.word	0x08002171
 8002030:	08002171 	.word	0x08002171
 8002034:	08002171 	.word	0x08002171
 8002038:	08002171 	.word	0x08002171
 800203c:	08002171 	.word	0x08002171
 8002040:	08002171 	.word	0x08002171
 8002044:	08002171 	.word	0x08002171
 8002048:	08002171 	.word	0x08002171
 800204c:	08002171 	.word	0x08002171
 8002050:	08002171 	.word	0x08002171
 8002054:	08002171 	.word	0x08002171
 8002058:	08002171 	.word	0x08002171
 800205c:	08002171 	.word	0x08002171
 8002060:	08002171 	.word	0x08002171
 8002064:	08002151 	.word	0x08002151
 8002068:	08002171 	.word	0x08002171
 800206c:	08002171 	.word	0x08002171
 8002070:	08002171 	.word	0x08002171
 8002074:	08002171 	.word	0x08002171
 8002078:	08002121 	.word	0x08002121
 800207c:	08002171 	.word	0x08002171
 8002080:	080020e5 	.word	0x080020e5
 8002084:	08002161 	.word	0x08002161
 8002088:	08002171 	.word	0x08002171
 800208c:	08002171 	.word	0x08002171
 8002090:	08002141 	.word	0x08002141
 8002094:	08002171 	.word	0x08002171
 8002098:	08002171 	.word	0x08002171
 800209c:	08002171 	.word	0x08002171
 80020a0:	080020b5 	.word	0x080020b5
 80020a4:	08002171 	.word	0x08002171
 80020a8:	08002171 	.word	0x08002171
 80020ac:	08002131 	.word	0x08002131
 80020b0:	080020fd 	.word	0x080020fd
	{
		case ROUTER_CMD_GET_PRESSURE:
			sprintf(Router.MainBuff, "PRESSURE:%d\n", (int)(BMP280_ReadPressure()*0.0075));
 80020b4:	f7ff fc90 	bl	80019d8 <BMP280_ReadPressure>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f9b4 	bl	8000428 <__aeabi_f2d>
 80020c0:	a331      	add	r3, pc, #196	; (adr r3, 8002188 <Router_CommandHandler+0x200>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe fa07 	bl	80004d8 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fcb1 	bl	8000a38 <__aeabi_d2iz>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	492e      	ldr	r1, [pc, #184]	; (8002194 <Router_CommandHandler+0x20c>)
 80020dc:	482e      	ldr	r0, [pc, #184]	; (8002198 <Router_CommandHandler+0x210>)
 80020de:	f007 fa59 	bl	8009594 <siprintf>
			break;
 80020e2:	e045      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_GET_HUMIDITY:
			sprintf(Router.MainBuff, "HUMIDITY:%0.1f\n", AHT10_DataStruct.Humidity);
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <Router_CommandHandler+0x214>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f99d 	bl	8000428 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	492b      	ldr	r1, [pc, #172]	; (80021a0 <Router_CommandHandler+0x218>)
 80020f4:	4828      	ldr	r0, [pc, #160]	; (8002198 <Router_CommandHandler+0x210>)
 80020f6:	f007 fa4d 	bl	8009594 <siprintf>
			break;
 80020fa:	e039      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_GET_TEMPERATURE:
			sprintf(Router.MainBuff, "TEMPERATURE:%0.1f\n", AHT10_DataStruct.Temperature);
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <Router_CommandHandler+0x214>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f991 	bl	8000428 <__aeabi_f2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4926      	ldr	r1, [pc, #152]	; (80021a4 <Router_CommandHandler+0x21c>)
 800210c:	4822      	ldr	r0, [pc, #136]	; (8002198 <Router_CommandHandler+0x210>)
 800210e:	f007 fa41 	bl	8009594 <siprintf>
			break;
 8002112:	e02d      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_GET_DEVICE_ID:
			sprintf(Router.MainBuff, "DEVICE_ID:%s\n", DEVICE_ID);
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <Router_CommandHandler+0x220>)
 8002116:	4925      	ldr	r1, [pc, #148]	; (80021ac <Router_CommandHandler+0x224>)
 8002118:	481f      	ldr	r0, [pc, #124]	; (8002198 <Router_CommandHandler+0x210>)
 800211a:	f007 fa3b 	bl	8009594 <siprintf>
			break;
 800211e:	e027      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_FAN_TOGGLE:
			FAN_TOGGLE;
 8002120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002124:	4822      	ldr	r0, [pc, #136]	; (80021b0 <Router_CommandHandler+0x228>)
 8002126:	f001 fc90 	bl	8003a4a <HAL_GPIO_TogglePin>
			FAN_AnswerRequest();
 800212a:	f7ff fed5 	bl	8001ed8 <FAN_AnswerRequest>
			break;
 800212e:	e01f      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_RKPSS_ADC_VAL:
			sprintf(Router.MainBuff, "RKPSS:%d\n", ADC1_Module.Data[0]);
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <Router_CommandHandler+0x22c>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4920      	ldr	r1, [pc, #128]	; (80021b8 <Router_CommandHandler+0x230>)
 8002138:	4817      	ldr	r0, [pc, #92]	; (8002198 <Router_CommandHandler+0x210>)
 800213a:	f007 fa2b 	bl	8009594 <siprintf>
			break;
 800213e:	e017      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_WaterLevelSensor_ADC_VAL:
			sprintf(Router.MainBuff, "WaterLevelSensor:%d\n", ADC1_Module.Data[1]);
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <Router_CommandHandler+0x22c>)
 8002142:	885b      	ldrh	r3, [r3, #2]
 8002144:	461a      	mov	r2, r3
 8002146:	491d      	ldr	r1, [pc, #116]	; (80021bc <Router_CommandHandler+0x234>)
 8002148:	4813      	ldr	r0, [pc, #76]	; (8002198 <Router_CommandHandler+0x210>)
 800214a:	f007 fa23 	bl	8009594 <siprintf>
			break;
 800214e:	e00f      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_AirPump_TOGGLE:
			AIR_PUMP_TOGGLE;
 8002150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002154:	4816      	ldr	r0, [pc, #88]	; (80021b0 <Router_CommandHandler+0x228>)
 8002156:	f001 fc78 	bl	8003a4a <HAL_GPIO_TogglePin>
			AirPump_AnswerRequest();
 800215a:	f7ff fa39 	bl	80015d0 <AirPump_AnswerRequest>
			break;
 800215e:	e007      	b.n	8002170 <Router_CommandHandler+0x1e8>
		case ROUTER_CMD_IR_LAMP_TOGGLE:
			IR_LAMP_TOGGLE;
 8002160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002164:	4812      	ldr	r0, [pc, #72]	; (80021b0 <Router_CommandHandler+0x228>)
 8002166:	f001 fc70 	bl	8003a4a <HAL_GPIO_TogglePin>
			IR_Lamp_AnswerRequest();
 800216a:	f7ff fed7 	bl	8001f1c <IR_Lamp_AnswerRequest>
			break;
 800216e:	bf00      	nop
	}

	Router_UART_Transmit_DMA((uint8_t*)Router.MainBuff, strlen(Router.MainBuff));
 8002170:	4809      	ldr	r0, [pc, #36]	; (8002198 <Router_CommandHandler+0x210>)
 8002172:	f7fd ffed 	bl	8000150 <strlen>
 8002176:	4603      	mov	r3, r0
 8002178:	b29b      	uxth	r3, r3
 800217a:	4619      	mov	r1, r3
 800217c:	4806      	ldr	r0, [pc, #24]	; (8002198 <Router_CommandHandler+0x210>)
 800217e:	f7ff feef 	bl	8001f60 <Router_UART_Transmit_DMA>
	return;
 8002182:	bf00      	nop
}
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	eb851eb8 	.word	0xeb851eb8
 800218c:	3f7eb851 	.word	0x3f7eb851
 8002190:	20000214 	.word	0x20000214
 8002194:	0800d17c 	.word	0x0800d17c
 8002198:	20000246 	.word	0x20000246
 800219c:	200002ac 	.word	0x200002ac
 80021a0:	0800d18c 	.word	0x0800d18c
 80021a4:	0800d19c 	.word	0x0800d19c
 80021a8:	0800d1b0 	.word	0x0800d1b0
 80021ac:	0800d1bc 	.word	0x0800d1bc
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	2000020c 	.word	0x2000020c
 80021b8:	0800d1cc 	.word	0x0800d1cc
 80021bc:	0800d1d8 	.word	0x0800d1d8

080021c0 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_UARTEx_RxEventCallback+0x40>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d110      	bne.n	80021f8 <HAL_UARTEx_RxEventCallback+0x38>
	{
		Router_CommandHandler();
 80021d6:	f7ff fed7 	bl	8001f88 <Router_CommandHandler>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Router.RxBuff, Size);
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	461a      	mov	r2, r3
 80021de:	4909      	ldr	r1, [pc, #36]	; (8002204 <HAL_UARTEx_RxEventCallback+0x44>)
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_UARTEx_RxEventCallback+0x48>)
 80021e2:	f005 fb61 	bl	80078a8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_UARTEx_RxEventCallback+0x4c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_UARTEx_RxEventCallback+0x4c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0204 	bic.w	r2, r2, #4
 80021f4:	601a      	str	r2, [r3, #0]
	}
	return;
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
}
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40004400 	.word	0x40004400
 8002204:	20000214 	.word	0x20000214
 8002208:	20000520 	.word	0x20000520
 800220c:	200002d8 	.word	0x200002d8

08002210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d124      	bne.n	800226c <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		LED_TOGGLE;
 8002222:	2120      	movs	r1, #32
 8002224:	4814      	ldr	r0, [pc, #80]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002226:	f001 fc10 	bl	8003a4a <HAL_GPIO_TogglePin>
		if(AHT10_DataStruct.TriggerTimeCounter == AHT10_TRIGGER_MEASUREMENTS_PERIOD)
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800222c:	7c9b      	ldrb	r3, [r3, #18]
 800222e:	2b0a      	cmp	r3, #10
 8002230:	d105      	bne.n	800223e <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			AHT10_TriggerMeasurements();
 8002232:	f7ff f921 	bl	8001478 <AHT10_TriggerMeasurements>
			AHT10_DataStruct.TriggerTimeCounter = 0;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002238:	2200      	movs	r2, #0
 800223a:	749a      	strb	r2, [r3, #18]
 800223c:	e005      	b.n	800224a <HAL_TIM_PeriodElapsedCallback+0x3a>
		}
		else
		{
			AHT10_DataStruct.TriggerTimeCounter++;
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002240:	7c9b      	ldrb	r3, [r3, #18]
 8002242:	3301      	adds	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002248:	749a      	strb	r2, [r3, #18]
		}

		if(AHT10_DataStruct.ReadDataTimerCounter == AHT10_READ_DATA_PERIOD)
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800224c:	7cdb      	ldrb	r3, [r3, #19]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	d105      	bne.n	800225e <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			AHT10_Measure();
 8002252:	f7ff f9ad 	bl	80015b0 <AHT10_Measure>
			AHT10_DataStruct.ReadDataTimerCounter = 0;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002258:	2200      	movs	r2, #0
 800225a:	74da      	strb	r2, [r3, #19]
		else
		{
			AHT10_DataStruct.ReadDataTimerCounter++;
		}
	}
	return;
 800225c:	e006      	b.n	800226c <HAL_TIM_PeriodElapsedCallback+0x5c>
			AHT10_DataStruct.ReadDataTimerCounter++;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002260:	7cdb      	ldrb	r3, [r3, #19]
 8002262:	3301      	adds	r3, #1
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002268:	74da      	strb	r2, [r3, #19]
	return;
 800226a:	bf00      	nop
 800226c:	bf00      	nop
}
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40010800 	.word	0x40010800
 800227c:	200002ac 	.word	0x200002ac

08002280 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_EXTI_Callback+0x16>
 8002290:	2b02      	cmp	r3, #2
 8002292:	d005      	beq.n	80022a0 <HAL_GPIO_EXTI_Callback+0x20>
		case YL63_L_Pin:
			Router_UART_Transmit_DMA((uint8_t*)ROUTER_MSG_MOTOR_LEFT_BORDER, strlen(ROUTER_MSG_MOTOR_LEFT_BORDER));
			break;
	}

	return;
 8002294:	e00a      	b.n	80022ac <HAL_GPIO_EXTI_Callback+0x2c>
			Router_UART_Transmit_DMA((uint8_t*)ROUTER_MSG_MOTOR_RIGHT_BORDER, strlen(ROUTER_MSG_MOTOR_RIGHT_BORDER));
 8002296:	210d      	movs	r1, #13
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x34>)
 800229a:	f7ff fe61 	bl	8001f60 <Router_UART_Transmit_DMA>
			break;
 800229e:	e004      	b.n	80022aa <HAL_GPIO_EXTI_Callback+0x2a>
			Router_UART_Transmit_DMA((uint8_t*)ROUTER_MSG_MOTOR_LEFT_BORDER, strlen(ROUTER_MSG_MOTOR_LEFT_BORDER));
 80022a0:	210c      	movs	r1, #12
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x38>)
 80022a4:	f7ff fe5c 	bl	8001f60 <Router_UART_Transmit_DMA>
			break;
 80022a8:	bf00      	nop
	return;
 80022aa:	bf00      	nop
}
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	0800d1f0 	.word	0x0800d1f0
 80022b8:	0800d200 	.word	0x0800d200

080022bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c0:	f000 fdf2 	bl	8002ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c4:	f000 f842 	bl	800234c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c8:	f000 f9ba 	bl	8002640 <MX_GPIO_Init>
  MX_DMA_Init();
 80022cc:	f000 f982 	bl	80025d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022d0:	f000 f956 	bl	8002580 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80022d4:	f000 f8aa 	bl	800242c <MX_I2C2_Init>
  MX_I2C1_Init();
 80022d8:	f000 f87a 	bl	80023d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80022dc:	f000 f8d4 	bl	8002488 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80022e0:	f000 f924 	bl	800252c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BMP280_Init();
 80022e4:	f7ff fd92 	bl	8001e0c <BMP280_Init>
  AHT10_Init();
 80022e8:	f7ff f894 	bl	8001414 <AHT10_Init>
  ADC1_Module_Init();
 80022ec:	f7ff f886 	bl	80013fc <ADC1_Module_Init>
  AIR_PUMP_OFF;
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f6:	4810      	ldr	r0, [pc, #64]	; (8002338 <main+0x7c>)
 80022f8:	f001 fb8f 	bl	8003a1a <HAL_GPIO_WritePin>
  FAN_OFF;
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <main+0x7c>)
 8002304:	f001 fb89 	bl	8003a1a <HAL_GPIO_WritePin>
  IR_LAMP_OFF;
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800230e:	480a      	ldr	r0, [pc, #40]	; (8002338 <main+0x7c>)
 8002310:	f001 fb83 	bl	8003a1a <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim1);
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <main+0x80>)
 8002316:	f004 fda1 	bl	8006e5c <HAL_TIM_Base_Start_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Router.RxBuff, ROUTER_RX_BUFF_SIZE);
 800231a:	2232      	movs	r2, #50	; 0x32
 800231c:	4908      	ldr	r1, [pc, #32]	; (8002340 <main+0x84>)
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <main+0x88>)
 8002320:	f005 fac2 	bl	80078a8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <main+0x8c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <main+0x8c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002334:	e7fe      	b.n	8002334 <main+0x78>
 8002336:	bf00      	nop
 8002338:	40010c00 	.word	0x40010c00
 800233c:	200004d8 	.word	0x200004d8
 8002340:	20000214 	.word	0x20000214
 8002344:	20000520 	.word	0x20000520
 8002348:	200002d8 	.word	0x200002d8

0800234c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b090      	sub	sp, #64	; 0x40
 8002350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0318 	add.w	r3, r7, #24
 8002356:	2228      	movs	r2, #40	; 0x28
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f006 fa9c 	bl	8008898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800236e:	2302      	movs	r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002372:	2301      	movs	r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002376:	2310      	movs	r3, #16
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800237a:	2302      	movs	r3, #2
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800237e:	2300      	movs	r3, #0
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002382:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002386:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	4618      	mov	r0, r3
 800238e:	f004 f907 	bl	80065a0 <HAL_RCC_OscConfig>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002398:	f000 f9f6 	bl	8002788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800239c:	230f      	movs	r3, #15
 800239e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a0:	2302      	movs	r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2102      	movs	r1, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 fb72 	bl	8006aa0 <HAL_RCC_ClockConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80023c2:	f000 f9e1 	bl	8002788 <Error_Handler>
  }
}
 80023c6:	bf00      	nop
 80023c8:	3740      	adds	r7, #64	; 0x40
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <MX_I2C1_Init+0x50>)
 80023d6:	4a13      	ldr	r2, [pc, #76]	; (8002424 <MX_I2C1_Init+0x54>)
 80023d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_I2C1_Init+0x50>)
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <MX_I2C1_Init+0x58>)
 80023de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_I2C1_Init+0x50>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_I2C1_Init+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_I2C1_Init+0x50>)
 80023ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MX_I2C1_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_I2C1_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <MX_I2C1_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_I2C1_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <MX_I2C1_Init+0x50>)
 800240e:	f001 fb4d 	bl	8003aac <HAL_I2C_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002418:	f000 f9b6 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2000031c 	.word	0x2000031c
 8002424:	40005400 	.word	0x40005400
 8002428:	00061a80 	.word	0x00061a80

0800242c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_I2C2_Init+0x50>)
 8002432:	4a13      	ldr	r2, [pc, #76]	; (8002480 <MX_I2C2_Init+0x54>)
 8002434:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_I2C2_Init+0x50>)
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_I2C2_Init+0x58>)
 800243a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_I2C2_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_I2C2_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_I2C2_Init+0x50>)
 800244a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800244e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <MX_I2C2_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_I2C2_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <MX_I2C2_Init+0x50>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_I2C2_Init+0x50>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_I2C2_Init+0x50>)
 800246a:	f001 fb1f 	bl	8003aac <HAL_I2C_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002474:	f000 f988 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000370 	.word	0x20000370
 8002480:	40005800 	.word	0x40005800
 8002484:	000186a0 	.word	0x000186a0

08002488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	463b      	mov	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024a6:	4a20      	ldr	r2, [pc, #128]	; (8002528 <MX_TIM1_Init+0xa0>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400-1;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024ac:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80024b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80024be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024d2:	4814      	ldr	r0, [pc, #80]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024d4:	f004 fc72 	bl	8006dbc <HAL_TIM_Base_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80024de:	f000 f953 	bl	8002788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024e8:	f107 0308 	add.w	r3, r7, #8
 80024ec:	4619      	mov	r1, r3
 80024ee:	480d      	ldr	r0, [pc, #52]	; (8002524 <MX_TIM1_Init+0x9c>)
 80024f0:	f004 fe0e 	bl	8007110 <HAL_TIM_ConfigClockSource>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80024fa:	f000 f945 	bl	8002788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002506:	463b      	mov	r3, r7
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <MX_TIM1_Init+0x9c>)
 800250c:	f004 ffe4 	bl	80074d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002516:	f000 f937 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200004d8 	.word	0x200004d8
 8002528:	40012c00 	.word	0x40012c00

0800252c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <MX_USART1_UART_Init+0x50>)
 8002534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 8002538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800253c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 8002552:	220c      	movs	r2, #12
 8002554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_USART1_UART_Init+0x4c>)
 8002564:	f005 f828 	bl	80075b8 <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800256e:	f000 f90b 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000490 	.word	0x20000490
 800257c:	40013800 	.word	0x40013800

08002580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <MX_USART2_UART_Init+0x50>)
 8002588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 800258c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_USART2_UART_Init+0x4c>)
 80025b8:	f004 fffe 	bl	80075b8 <HAL_UART_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025c2:	f000 f8e1 	bl	8002788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000520 	.word	0x20000520
 80025d0:	40004400 	.word	0x40004400

080025d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <MX_DMA_Init+0x68>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <MX_DMA_Init+0x68>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6153      	str	r3, [r2, #20]
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_DMA_Init+0x68>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	200e      	movs	r0, #14
 80025f8:	f000 fd8f 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025fc:	200e      	movs	r0, #14
 80025fe:	f000 fda8 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	200f      	movs	r0, #15
 8002608:	f000 fd87 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800260c:	200f      	movs	r0, #15
 800260e:	f000 fda0 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	2010      	movs	r0, #16
 8002618:	f000 fd7f 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800261c:	2010      	movs	r0, #16
 800261e:	f000 fd98 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2011      	movs	r0, #17
 8002628:	f000 fd77 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800262c:	2011      	movs	r0, #17
 800262e:	f000 fd90 	bl	8003152 <HAL_NVIC_EnableIRQ>

}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000

08002640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002654:	4b46      	ldr	r3, [pc, #280]	; (8002770 <MX_GPIO_Init+0x130>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a45      	ldr	r2, [pc, #276]	; (8002770 <MX_GPIO_Init+0x130>)
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	6193      	str	r3, [r2, #24]
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <MX_GPIO_Init+0x130>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <MX_GPIO_Init+0x130>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <MX_GPIO_Init+0x130>)
 8002672:	f043 0320 	orr.w	r3, r3, #32
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <MX_GPIO_Init+0x130>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <MX_GPIO_Init+0x130>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a39      	ldr	r2, [pc, #228]	; (8002770 <MX_GPIO_Init+0x130>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <MX_GPIO_Init+0x130>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <MX_GPIO_Init+0x130>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a33      	ldr	r2, [pc, #204]	; (8002770 <MX_GPIO_Init+0x130>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <MX_GPIO_Init+0x130>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2120      	movs	r1, #32
 80026b8:	482e      	ldr	r0, [pc, #184]	; (8002774 <MX_GPIO_Init+0x134>)
 80026ba:	f001 f9ae 	bl	8003a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AirPump_Pin|FAN_Pin|IR_Lamp_Pin, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 80026c4:	482c      	ldr	r0, [pc, #176]	; (8002778 <MX_GPIO_Init+0x138>)
 80026c6:	f001 f9a8 	bl	8003a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <MX_GPIO_Init+0x13c>)
 80026d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	4828      	ldr	r0, [pc, #160]	; (8002780 <MX_GPIO_Init+0x140>)
 80026e0:	f001 f800 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : YL63_R_Pin YL63_L_Pin */
  GPIO_InitStruct.Pin = YL63_R_Pin|YL63_L_Pin;
 80026e4:	2303      	movs	r3, #3
 80026e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026e8:	4b26      	ldr	r3, [pc, #152]	; (8002784 <MX_GPIO_Init+0x144>)
 80026ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4619      	mov	r1, r3
 80026f6:	4822      	ldr	r0, [pc, #136]	; (8002780 <MX_GPIO_Init+0x140>)
 80026f8:	f000 fff4 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026fc:	2320      	movs	r3, #32
 80026fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2302      	movs	r3, #2
 800270a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4619      	mov	r1, r3
 8002712:	4818      	ldr	r0, [pc, #96]	; (8002774 <MX_GPIO_Init+0x134>)
 8002714:	f000 ffe6 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AirPump_Pin FAN_Pin IR_Lamp_Pin */
  GPIO_InitStruct.Pin = AirPump_Pin|FAN_Pin|IR_Lamp_Pin;
 8002718:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800271c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271e:	2301      	movs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2302      	movs	r3, #2
 8002728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4619      	mov	r1, r3
 8002730:	4811      	ldr	r0, [pc, #68]	; (8002778 <MX_GPIO_Init+0x138>)
 8002732:	f000 ffd7 	bl	80036e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2006      	movs	r0, #6
 800273c:	f000 fced 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002740:	2006      	movs	r0, #6
 8002742:	f000 fd06 	bl	8003152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	2007      	movs	r0, #7
 800274c:	f000 fce5 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002750:	2007      	movs	r0, #7
 8002752:	f000 fcfe 	bl	8003152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	2028      	movs	r0, #40	; 0x28
 800275c:	f000 fcdd 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002760:	2028      	movs	r0, #40	; 0x28
 8002762:	f000 fcf6 	bl	8003152 <HAL_NVIC_EnableIRQ>

}
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	40010800 	.word	0x40010800
 8002778:	40010c00 	.word	0x40010c00
 800277c:	10110000 	.word	0x10110000
 8002780:	40011000 	.word	0x40011000
 8002784:	10210000 	.word	0x10210000

08002788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800278c:	b672      	cpsid	i
}
 800278e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002790:	e7fe      	b.n	8002790 <Error_Handler+0x8>
	...

08002794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_MspInit+0x5c>)
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_MspInit+0x5c>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6193      	str	r3, [r2, #24]
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_MspInit+0x5c>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_MspInit+0x5c>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_MspInit+0x5c>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	61d3      	str	r3, [r2, #28]
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_MspInit+0x5c>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_MspInit+0x60>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_MspInit+0x60>)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000

080027f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_I2C_MspInit+0xe8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d12c      	bne.n	8002872 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002830:	23c0      	movs	r3, #192	; 0xc0
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002834:	2312      	movs	r3, #18
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	4619      	mov	r1, r3
 8002842:	4829      	ldr	r0, [pc, #164]	; (80028e8 <HAL_I2C_MspInit+0xf0>)
 8002844:	f000 ff4e 	bl	80036e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 800284e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	201f      	movs	r0, #31
 8002866:	f000 fc58 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800286a:	201f      	movs	r0, #31
 800286c:	f000 fc71 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002870:	e031      	b.n	80028d6 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <HAL_I2C_MspInit+0xf4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d12c      	bne.n	80028d6 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 8002882:	f043 0308 	orr.w	r3, r3, #8
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002894:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289a:	2312      	movs	r3, #18
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 0318 	add.w	r3, r7, #24
 80028a6:	4619      	mov	r1, r3
 80028a8:	480f      	ldr	r0, [pc, #60]	; (80028e8 <HAL_I2C_MspInit+0xf0>)
 80028aa:	f000 ff1b 	bl	80036e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 80028b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_I2C_MspInit+0xec>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2021      	movs	r0, #33	; 0x21
 80028cc:	f000 fc25 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80028d0:	2021      	movs	r0, #33	; 0x21
 80028d2:	f000 fc3e 	bl	8003152 <HAL_NVIC_EnableIRQ>
}
 80028d6:	bf00      	nop
 80028d8:	3728      	adds	r7, #40	; 0x28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40010c00 	.word	0x40010c00
 80028ec:	40005800 	.word	0x40005800

080028f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_TIM_Base_MspInit+0x44>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_TIM_Base_MspInit+0x48>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_TIM_Base_MspInit+0x48>)
 8002908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800290c:	6193      	str	r3, [r2, #24]
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_TIM_Base_MspInit+0x48>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	2019      	movs	r0, #25
 8002920:	f000 fbfb 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002924:	2019      	movs	r0, #25
 8002926:	f000 fc14 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0318 	add.w	r3, r7, #24
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a86      	ldr	r2, [pc, #536]	; (8002b70 <HAL_UART_MspInit+0x234>)
 8002958:	4293      	cmp	r3, r2
 800295a:	f040 8087 	bne.w	8002a6c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	4a84      	ldr	r2, [pc, #528]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6193      	str	r3, [r2, #24]
 800296a:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_UART_MspInit+0x238>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	4a7e      	ldr	r2, [pc, #504]	; (8002b74 <HAL_UART_MspInit+0x238>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6193      	str	r3, [r2, #24]
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800298e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 0318 	add.w	r3, r7, #24
 80029a0:	4619      	mov	r1, r3
 80029a2:	4875      	ldr	r0, [pc, #468]	; (8002b78 <HAL_UART_MspInit+0x23c>)
 80029a4:	f000 fe9e 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4619      	mov	r1, r3
 80029bc:	486e      	ldr	r0, [pc, #440]	; (8002b78 <HAL_UART_MspInit+0x23c>)
 80029be:	f000 fe91 	bl	80036e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80029c2:	4b6e      	ldr	r3, [pc, #440]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029c4:	4a6e      	ldr	r2, [pc, #440]	; (8002b80 <HAL_UART_MspInit+0x244>)
 80029c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c8:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ce:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d4:	4b69      	ldr	r3, [pc, #420]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029da:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e0:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ec:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029f2:	4862      	ldr	r0, [pc, #392]	; (8002b7c <HAL_UART_MspInit+0x240>)
 80029f4:	f000 fbc8 	bl	8003188 <HAL_DMA_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80029fe:	f7ff fec3 	bl	8002788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <HAL_UART_MspInit+0x240>)
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a08:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_UART_MspInit+0x240>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a10:	4a5d      	ldr	r2, [pc, #372]	; (8002b88 <HAL_UART_MspInit+0x24c>)
 8002a12:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a14:	4b5b      	ldr	r3, [pc, #364]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a16:	2210      	movs	r2, #16
 8002a18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a20:	4b58      	ldr	r3, [pc, #352]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a26:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a2c:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a38:	4b52      	ldr	r3, [pc, #328]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a3e:	4851      	ldr	r0, [pc, #324]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a40:	f000 fba2 	bl	8003188 <HAL_DMA_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002a4a:	f7ff fe9d 	bl	8002788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_UART_MspInit+0x248>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2025      	movs	r0, #37	; 0x25
 8002a60:	f000 fb5b 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a64:	2025      	movs	r0, #37	; 0x25
 8002a66:	f000 fb74 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a6a:	e07c      	b.n	8002b66 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a46      	ldr	r2, [pc, #280]	; (8002b8c <HAL_UART_MspInit+0x250>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d177      	bne.n	8002b66 <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a76:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a3e      	ldr	r2, [pc, #248]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6193      	str	r3, [r2, #24]
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_UART_MspInit+0x238>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab2:	f107 0318 	add.w	r3, r7, #24
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482f      	ldr	r0, [pc, #188]	; (8002b78 <HAL_UART_MspInit+0x23c>)
 8002aba:	f000 fe13 	bl	80036e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002abe:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002ac0:	4a34      	ldr	r2, [pc, #208]	; (8002b94 <HAL_UART_MspInit+0x258>)
 8002ac2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac4:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aca:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002adc:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002aee:	4828      	ldr	r0, [pc, #160]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002af0:	f000 fb4a 	bl	8003188 <HAL_DMA_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8002afa:	f7ff fe45 	bl	8002788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b04:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <HAL_UART_MspInit+0x254>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b0c:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <HAL_UART_MspInit+0x260>)
 8002b0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b12:	2210      	movs	r2, #16
 8002b14:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b3a:	4817      	ldr	r0, [pc, #92]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b3c:	f000 fb24 	bl	8003188 <HAL_DMA_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_UART_MspInit+0x20e>
      Error_Handler();
 8002b46:	f7ff fe1f 	bl	8002788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b50:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <HAL_UART_MspInit+0x25c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2026      	movs	r0, #38	; 0x26
 8002b5c:	f000 fadd 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b60:	2026      	movs	r0, #38	; 0x26
 8002b62:	f000 faf6 	bl	8003152 <HAL_NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010800 	.word	0x40010800
 8002b7c:	20000408 	.word	0x20000408
 8002b80:	40020058 	.word	0x40020058
 8002b84:	200003c4 	.word	0x200003c4
 8002b88:	40020044 	.word	0x40020044
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	200002d8 	.word	0x200002d8
 8002b94:	4002006c 	.word	0x4002006c
 8002b98:	2000044c 	.word	0x2000044c
 8002b9c:	40020080 	.word	0x40020080

08002ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <NMI_Handler+0x4>

08002ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002baa:	e7fe      	b.n	8002baa <HardFault_Handler+0x4>

08002bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <MemManage_Handler+0x4>

08002bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <BusFault_Handler+0x4>

08002bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <UsageFault_Handler+0x4>

08002bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be6:	f000 f9a5 	bl	8002f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}

08002bee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 ff42 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c00:	2002      	movs	r0, #2
 8002c02:	f000 ff3b 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <DMA1_Channel4_IRQHandler+0x10>)
 8002c12:	f000 fc27 	bl	8003464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200003c4 	.word	0x200003c4

08002c20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <DMA1_Channel5_IRQHandler+0x10>)
 8002c26:	f000 fc1d 	bl	8003464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000408 	.word	0x20000408

08002c34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <DMA1_Channel6_IRQHandler+0x10>)
 8002c3a:	f000 fc13 	bl	8003464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200002d8 	.word	0x200002d8

08002c48 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <DMA1_Channel7_IRQHandler+0x10>)
 8002c4e:	f000 fc09 	bl	8003464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000044c 	.word	0x2000044c

08002c5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <TIM1_UP_IRQHandler+0x10>)
 8002c62:	f004 f94d 	bl	8006f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200004d8 	.word	0x200004d8

08002c70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <I2C1_EV_IRQHandler+0x10>)
 8002c76:	f001 fd1b 	bl	80046b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000031c 	.word	0x2000031c

08002c84 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <I2C2_EV_IRQHandler+0x10>)
 8002c8a:	f001 fd11 	bl	80046b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000370 	.word	0x20000370

08002c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <USART1_IRQHandler+0x10>)
 8002c9e:	f004 fe61 	bl	8007964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000490 	.word	0x20000490

08002cac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <USART2_IRQHandler+0x10>)
 8002cb2:	f004 fe57 	bl	8007964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000520 	.word	0x20000520

08002cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cc8:	f000 fed8 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
	return 1;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <_kill>:

int _kill(int pid, int sig)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ce8:	f005 fdac 	bl	8008844 <__errno>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2216      	movs	r2, #22
 8002cf0:	601a      	str	r2, [r3, #0]
	return -1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_exit>:

void _exit (int status)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d06:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffe7 	bl	8002cde <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d10:	e7fe      	b.n	8002d10 <_exit+0x12>

08002d12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e00a      	b.n	8002d3a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d24:	f3af 8000 	nop.w
 8002d28:	4601      	mov	r1, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	60ba      	str	r2, [r7, #8]
 8002d30:	b2ca      	uxtb	r2, r1
 8002d32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3301      	adds	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	dbf0      	blt.n	8002d24 <_read+0x12>
	}

return len;
 8002d42:	687b      	ldr	r3, [r7, #4]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e009      	b.n	8002d72 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	60ba      	str	r2, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbf1      	blt.n	8002d5e <_write+0x12>
	}
	return len;
 8002d7a:	687b      	ldr	r3, [r7, #4]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_close>:

int _close(int file)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002daa:	605a      	str	r2, [r3, #4]
	return 0;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <_isatty>:

int _isatty(int file)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	return 1;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
	return 0;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <_sbrk+0x5c>)
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <_sbrk+0x60>)
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <_sbrk+0x64>)
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <_sbrk+0x68>)
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <_sbrk+0x64>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d207      	bcs.n	8002e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e14:	f005 fd16 	bl	8008844 <__errno>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	e009      	b.n	8002e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <_sbrk+0x64>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <_sbrk+0x64>)
 8002e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20005000 	.word	0x20005000
 8002e44:	00000400 	.word	0x00000400
 8002e48:	20000200 	.word	0x20000200
 8002e4c:	20000580 	.word	0x20000580

08002e50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e5c:	f7ff fff8 	bl	8002e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e60:	480b      	ldr	r0, [pc, #44]	; (8002e90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e62:	490c      	ldr	r1, [pc, #48]	; (8002e94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e64:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e68:	e002      	b.n	8002e70 <LoopCopyDataInit>

08002e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6e:	3304      	adds	r3, #4

08002e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e74:	d3f9      	bcc.n	8002e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e76:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e78:	4c09      	ldr	r4, [pc, #36]	; (8002ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e7c:	e001      	b.n	8002e82 <LoopFillZerobss>

08002e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e80:	3204      	adds	r2, #4

08002e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e84:	d3fb      	bcc.n	8002e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e86:	f005 fce3 	bl	8008850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e8a:	f7ff fa17 	bl	80022bc <main>
  bx lr
 8002e8e:	4770      	bx	lr
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e98:	0800d704 	.word	0x0800d704
  ldr r2, =_sbss
 8002e9c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002ea0:	2000057c 	.word	0x2000057c

08002ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC1_2_IRQHandler>
	...

08002ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_Init+0x28>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_Init+0x28>)
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb8:	2003      	movs	r0, #3
 8002eba:	f000 f923 	bl	8003104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f000 f808 	bl	8002ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec4:	f7ff fc66 	bl	8002794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40022000 	.word	0x40022000

08002ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_InitTick+0x54>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_InitTick+0x58>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f93b 	bl	800316e <HAL_SYSTICK_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00e      	b.n	8002f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	d80a      	bhi.n	8002f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f000 f903 	bl	800311a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f14:	4a06      	ldr	r2, [pc, #24]	; (8002f30 <HAL_InitTick+0x5c>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	2000000c 	.word	0x2000000c
 8002f30:	20000008 	.word	0x20000008

08002f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_IncTick+0x1c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_IncTick+0x20>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <HAL_IncTick+0x20>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	2000000c 	.word	0x2000000c
 8002f54:	20000568 	.word	0x20000568

08002f58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f5c:	4b02      	ldr	r3, [pc, #8]	; (8002f68 <HAL_GetTick+0x10>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000568 	.word	0x20000568

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4906      	ldr	r1, [pc, #24]	; (8003004 <__NVIC_EnableIRQ+0x34>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100

08003008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0a      	blt.n	8003032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	490c      	ldr	r1, [pc, #48]	; (8003054 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003030:	e00a      	b.n	8003048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4908      	ldr	r1, [pc, #32]	; (8003058 <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	440b      	add	r3, r1
 8003046:	761a      	strb	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f1c3 0307 	rsb	r3, r3, #7
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf28      	it	cs
 800307a:	2304      	movcs	r3, #4
 800307c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3304      	adds	r3, #4
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <NVIC_EncodePriority+0x30>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b03      	subs	r3, #3
 800308a:	e000      	b.n	800308e <NVIC_EncodePriority+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43d9      	mvns	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d0:	d301      	bcc.n	80030d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00f      	b.n	80030f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <SysTick_Config+0x40>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030de:	210f      	movs	r1, #15
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f7ff ff90 	bl	8003008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <SysTick_Config+0x40>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <SysTick_Config+0x40>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010

08003104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff2d 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312c:	f7ff ff42 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 8003130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff ff90 	bl	800305c <NVIC_EncodePriority>
 800313c:	4602      	mov	r2, r0
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff5f 	bl	8003008 <__NVIC_SetPriority>
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff35 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ffa2 	bl	80030c0 <SysTick_Config>
 800317c:	4603      	mov	r3, r0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e043      	b.n	8003226 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_DMA_Init+0xa8>)
 80031a6:	4413      	add	r3, r2
 80031a8:	4a22      	ldr	r2, [pc, #136]	; (8003234 <HAL_DMA_Init+0xac>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	009a      	lsls	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <HAL_DMA_Init+0xb0>)
 80031ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80031d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	bffdfff8 	.word	0xbffdfff8
 8003234:	cccccccd 	.word	0xcccccccd
 8003238:	40020000 	.word	0x40020000

0800323c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_DMA_Start_IT+0x20>
 8003258:	2302      	movs	r3, #2
 800325a:	e04b      	b.n	80032f4 <HAL_DMA_Start_IT+0xb8>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13a      	bne.n	80032e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f9f8 	bl	800368a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 020e 	orr.w	r2, r2, #14
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e00f      	b.n	80032d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 020a 	orr.w	r2, r2, #10
 80032d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e005      	b.n	80032f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d008      	beq.n	8003326 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2204      	movs	r2, #4
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e020      	b.n	8003368 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 020e 	bic.w	r2, r2, #14
 8003334:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	2101      	movs	r1, #1
 8003350:	fa01 f202 	lsl.w	r2, r1, r2
 8003354:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
	...

08003374 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d005      	beq.n	8003398 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	e051      	b.n	800343c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020e 	bic.w	r2, r2, #14
 80033a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_DMA_Abort_IT+0xd4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d029      	beq.n	8003416 <HAL_DMA_Abort_IT+0xa2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <HAL_DMA_Abort_IT+0xd8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_Abort_IT+0x9e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_DMA_Abort_IT+0xdc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01a      	beq.n	800340c <HAL_DMA_Abort_IT+0x98>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <HAL_DMA_Abort_IT+0xe0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d012      	beq.n	8003406 <HAL_DMA_Abort_IT+0x92>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_DMA_Abort_IT+0xe4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00a      	beq.n	8003400 <HAL_DMA_Abort_IT+0x8c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1b      	ldr	r2, [pc, #108]	; (800345c <HAL_DMA_Abort_IT+0xe8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d102      	bne.n	80033fa <HAL_DMA_Abort_IT+0x86>
 80033f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033f8:	e00e      	b.n	8003418 <HAL_DMA_Abort_IT+0xa4>
 80033fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033fe:	e00b      	b.n	8003418 <HAL_DMA_Abort_IT+0xa4>
 8003400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003404:	e008      	b.n	8003418 <HAL_DMA_Abort_IT+0xa4>
 8003406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800340a:	e005      	b.n	8003418 <HAL_DMA_Abort_IT+0xa4>
 800340c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003410:	e002      	b.n	8003418 <HAL_DMA_Abort_IT+0xa4>
 8003412:	2310      	movs	r3, #16
 8003414:	e000      	b.n	8003418 <HAL_DMA_Abort_IT+0xa4>
 8003416:	2301      	movs	r3, #1
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_DMA_Abort_IT+0xec>)
 800341a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
    } 
  }
  return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40020008 	.word	0x40020008
 800344c:	4002001c 	.word	0x4002001c
 8003450:	40020030 	.word	0x40020030
 8003454:	40020044 	.word	0x40020044
 8003458:	40020058 	.word	0x40020058
 800345c:	4002006c 	.word	0x4002006c
 8003460:	40020000 	.word	0x40020000

08003464 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2204      	movs	r2, #4
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d04f      	beq.n	800352c <HAL_DMA_IRQHandler+0xc8>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d04a      	beq.n	800352c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0204 	bic.w	r2, r2, #4
 80034b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a66      	ldr	r2, [pc, #408]	; (8003654 <HAL_DMA_IRQHandler+0x1f0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d029      	beq.n	8003512 <HAL_DMA_IRQHandler+0xae>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a65      	ldr	r2, [pc, #404]	; (8003658 <HAL_DMA_IRQHandler+0x1f4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d022      	beq.n	800350e <HAL_DMA_IRQHandler+0xaa>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a63      	ldr	r2, [pc, #396]	; (800365c <HAL_DMA_IRQHandler+0x1f8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01a      	beq.n	8003508 <HAL_DMA_IRQHandler+0xa4>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a62      	ldr	r2, [pc, #392]	; (8003660 <HAL_DMA_IRQHandler+0x1fc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d012      	beq.n	8003502 <HAL_DMA_IRQHandler+0x9e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a60      	ldr	r2, [pc, #384]	; (8003664 <HAL_DMA_IRQHandler+0x200>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00a      	beq.n	80034fc <HAL_DMA_IRQHandler+0x98>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5f      	ldr	r2, [pc, #380]	; (8003668 <HAL_DMA_IRQHandler+0x204>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d102      	bne.n	80034f6 <HAL_DMA_IRQHandler+0x92>
 80034f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034f4:	e00e      	b.n	8003514 <HAL_DMA_IRQHandler+0xb0>
 80034f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034fa:	e00b      	b.n	8003514 <HAL_DMA_IRQHandler+0xb0>
 80034fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003500:	e008      	b.n	8003514 <HAL_DMA_IRQHandler+0xb0>
 8003502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003506:	e005      	b.n	8003514 <HAL_DMA_IRQHandler+0xb0>
 8003508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350c:	e002      	b.n	8003514 <HAL_DMA_IRQHandler+0xb0>
 800350e:	2340      	movs	r3, #64	; 0x40
 8003510:	e000      	b.n	8003514 <HAL_DMA_IRQHandler+0xb0>
 8003512:	2304      	movs	r3, #4
 8003514:	4a55      	ldr	r2, [pc, #340]	; (800366c <HAL_DMA_IRQHandler+0x208>)
 8003516:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8094 	beq.w	800364a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800352a:	e08e      	b.n	800364a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	2202      	movs	r2, #2
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d056      	beq.n	80035ea <HAL_DMA_IRQHandler+0x186>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d051      	beq.n	80035ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020a 	bic.w	r2, r2, #10
 8003562:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a38      	ldr	r2, [pc, #224]	; (8003654 <HAL_DMA_IRQHandler+0x1f0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d029      	beq.n	80035ca <HAL_DMA_IRQHandler+0x166>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a37      	ldr	r2, [pc, #220]	; (8003658 <HAL_DMA_IRQHandler+0x1f4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x162>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a35      	ldr	r2, [pc, #212]	; (800365c <HAL_DMA_IRQHandler+0x1f8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x15c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a34      	ldr	r2, [pc, #208]	; (8003660 <HAL_DMA_IRQHandler+0x1fc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d012      	beq.n	80035ba <HAL_DMA_IRQHandler+0x156>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a32      	ldr	r2, [pc, #200]	; (8003664 <HAL_DMA_IRQHandler+0x200>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00a      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x150>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a31      	ldr	r2, [pc, #196]	; (8003668 <HAL_DMA_IRQHandler+0x204>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d102      	bne.n	80035ae <HAL_DMA_IRQHandler+0x14a>
 80035a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035ac:	e00e      	b.n	80035cc <HAL_DMA_IRQHandler+0x168>
 80035ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b2:	e00b      	b.n	80035cc <HAL_DMA_IRQHandler+0x168>
 80035b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b8:	e008      	b.n	80035cc <HAL_DMA_IRQHandler+0x168>
 80035ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035be:	e005      	b.n	80035cc <HAL_DMA_IRQHandler+0x168>
 80035c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035c4:	e002      	b.n	80035cc <HAL_DMA_IRQHandler+0x168>
 80035c6:	2320      	movs	r3, #32
 80035c8:	e000      	b.n	80035cc <HAL_DMA_IRQHandler+0x168>
 80035ca:	2302      	movs	r3, #2
 80035cc:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_DMA_IRQHandler+0x208>)
 80035ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d034      	beq.n	800364a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035e8:	e02f      	b.n	800364a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2208      	movs	r2, #8
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d028      	beq.n	800364c <HAL_DMA_IRQHandler+0x1e8>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d023      	beq.n	800364c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 020e 	bic.w	r2, r2, #14
 8003612:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
    }
  }
  return;
 800364a:	bf00      	nop
 800364c:	bf00      	nop
}
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40020008 	.word	0x40020008
 8003658:	4002001c 	.word	0x4002001c
 800365c:	40020030 	.word	0x40020030
 8003660:	40020044 	.word	0x40020044
 8003664:	40020058 	.word	0x40020058
 8003668:	4002006c 	.word	0x4002006c
 800366c:	40020000 	.word	0x40020000

08003670 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800367e:	b2db      	uxtb	r3, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d108      	bne.n	80036ca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036c8:	e007      	b.n	80036da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b08b      	sub	sp, #44	; 0x2c
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e169      	b.n	80039cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036f8:	2201      	movs	r2, #1
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8158 	bne.w	80039c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4a9a      	ldr	r2, [pc, #616]	; (8003984 <HAL_GPIO_Init+0x2a0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d05e      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003720:	4a98      	ldr	r2, [pc, #608]	; (8003984 <HAL_GPIO_Init+0x2a0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d875      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003726:	4a98      	ldr	r2, [pc, #608]	; (8003988 <HAL_GPIO_Init+0x2a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d058      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 800372c:	4a96      	ldr	r2, [pc, #600]	; (8003988 <HAL_GPIO_Init+0x2a4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d86f      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003732:	4a96      	ldr	r2, [pc, #600]	; (800398c <HAL_GPIO_Init+0x2a8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d052      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003738:	4a94      	ldr	r2, [pc, #592]	; (800398c <HAL_GPIO_Init+0x2a8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d869      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800373e:	4a94      	ldr	r2, [pc, #592]	; (8003990 <HAL_GPIO_Init+0x2ac>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04c      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003744:	4a92      	ldr	r2, [pc, #584]	; (8003990 <HAL_GPIO_Init+0x2ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d863      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800374a:	4a92      	ldr	r2, [pc, #584]	; (8003994 <HAL_GPIO_Init+0x2b0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d046      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003750:	4a90      	ldr	r2, [pc, #576]	; (8003994 <HAL_GPIO_Init+0x2b0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d85d      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003756:	2b12      	cmp	r3, #18
 8003758:	d82a      	bhi.n	80037b0 <HAL_GPIO_Init+0xcc>
 800375a:	2b12      	cmp	r3, #18
 800375c:	d859      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_GPIO_Init+0x80>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	080037df 	.word	0x080037df
 8003768:	080037b9 	.word	0x080037b9
 800376c:	080037cb 	.word	0x080037cb
 8003770:	0800380d 	.word	0x0800380d
 8003774:	08003813 	.word	0x08003813
 8003778:	08003813 	.word	0x08003813
 800377c:	08003813 	.word	0x08003813
 8003780:	08003813 	.word	0x08003813
 8003784:	08003813 	.word	0x08003813
 8003788:	08003813 	.word	0x08003813
 800378c:	08003813 	.word	0x08003813
 8003790:	08003813 	.word	0x08003813
 8003794:	08003813 	.word	0x08003813
 8003798:	08003813 	.word	0x08003813
 800379c:	08003813 	.word	0x08003813
 80037a0:	08003813 	.word	0x08003813
 80037a4:	08003813 	.word	0x08003813
 80037a8:	080037c1 	.word	0x080037c1
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	4a79      	ldr	r2, [pc, #484]	; (8003998 <HAL_GPIO_Init+0x2b4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037b6:	e02c      	b.n	8003812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	623b      	str	r3, [r7, #32]
          break;
 80037be:	e029      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	623b      	str	r3, [r7, #32]
          break;
 80037c8:	e024      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	3308      	adds	r3, #8
 80037d0:	623b      	str	r3, [r7, #32]
          break;
 80037d2:	e01f      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	330c      	adds	r3, #12
 80037da:	623b      	str	r3, [r7, #32]
          break;
 80037dc:	e01a      	b.n	8003814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037e6:	2304      	movs	r3, #4
 80037e8:	623b      	str	r3, [r7, #32]
          break;
 80037ea:	e013      	b.n	8003814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037f4:	2308      	movs	r3, #8
 80037f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	611a      	str	r2, [r3, #16]
          break;
 80037fe:	e009      	b.n	8003814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003800:	2308      	movs	r3, #8
 8003802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	615a      	str	r2, [r3, #20]
          break;
 800380a:	e003      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
          break;
 8003810:	e000      	b.n	8003814 <HAL_GPIO_Init+0x130>
          break;
 8003812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2bff      	cmp	r3, #255	; 0xff
 8003818:	d801      	bhi.n	800381e <HAL_GPIO_Init+0x13a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_Init+0x13e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2bff      	cmp	r3, #255	; 0xff
 8003828:	d802      	bhi.n	8003830 <HAL_GPIO_Init+0x14c>
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x152>
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	3b08      	subs	r3, #8
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	210f      	movs	r1, #15
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80b1 	beq.w	80039c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_GPIO_Init+0x2b8>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	4a4c      	ldr	r2, [pc, #304]	; (800399c <HAL_GPIO_Init+0x2b8>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6193      	str	r3, [r2, #24]
 8003870:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_GPIO_Init+0x2b8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800387c:	4a48      	ldr	r2, [pc, #288]	; (80039a0 <HAL_GPIO_Init+0x2bc>)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <HAL_GPIO_Init+0x2c0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_GPIO_Init+0x1ec>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_GPIO_Init+0x2c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00d      	beq.n	80038cc <HAL_GPIO_Init+0x1e8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <HAL_GPIO_Init+0x2c8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x1e4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_GPIO_Init+0x2cc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_GPIO_Init+0x1e0>
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e004      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e002      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038d0:	2300      	movs	r3, #0
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	f002 0203 	and.w	r2, r2, #3
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	4093      	lsls	r3, r2
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038e2:	492f      	ldr	r1, [pc, #188]	; (80039a0 <HAL_GPIO_Init+0x2bc>)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	492c      	ldr	r1, [pc, #176]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	43db      	mvns	r3, r3
 8003912:	4928      	ldr	r1, [pc, #160]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003914:	4013      	ands	r3, r2
 8003916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	4922      	ldr	r1, [pc, #136]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	60cb      	str	r3, [r1, #12]
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	43db      	mvns	r3, r3
 800393a:	491e      	ldr	r1, [pc, #120]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800393c:	4013      	ands	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	4918      	ldr	r1, [pc, #96]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	43db      	mvns	r3, r3
 8003962:	4914      	ldr	r1, [pc, #80]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003964:	4013      	ands	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d021      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
 8003980:	e021      	b.n	80039c6 <HAL_GPIO_Init+0x2e2>
 8003982:	bf00      	nop
 8003984:	10320000 	.word	0x10320000
 8003988:	10310000 	.word	0x10310000
 800398c:	10220000 	.word	0x10220000
 8003990:	10210000 	.word	0x10210000
 8003994:	10120000 	.word	0x10120000
 8003998:	10110000 	.word	0x10110000
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40010800 	.word	0x40010800
 80039a8:	40010c00 	.word	0x40010c00
 80039ac:	40011000 	.word	0x40011000
 80039b0:	40011400 	.word	0x40011400
 80039b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	43db      	mvns	r3, r3
 80039c0:	4909      	ldr	r1, [pc, #36]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	3301      	adds	r3, #1
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f47f ae8e 	bne.w	80036f8 <HAL_GPIO_Init+0x14>
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	372c      	adds	r7, #44	; 0x2c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	887b      	ldrh	r3, [r7, #2]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e001      	b.n	8003a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	807b      	strh	r3, [r7, #2]
 8003a26:	4613      	mov	r3, r2
 8003a28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a2a:	787b      	ldrb	r3, [r7, #1]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a36:	e003      	b.n	8003a40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	041a      	lsls	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	611a      	str	r2, [r3, #16]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a5c:	887a      	ldrh	r2, [r7, #2]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4013      	ands	r3, r2
 8003a62:	041a      	lsls	r2, r3, #16
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43d9      	mvns	r1, r3
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fbf0 	bl	8002280 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40010400 	.word	0x40010400

08003aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e12b      	b.n	8003d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe fe90 	bl	80027f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b10:	f003 f90e 	bl	8006d30 <HAL_RCC_GetPCLK1Freq>
 8003b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a81      	ldr	r2, [pc, #516]	; (8003d20 <HAL_I2C_Init+0x274>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d807      	bhi.n	8003b30 <HAL_I2C_Init+0x84>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a80      	ldr	r2, [pc, #512]	; (8003d24 <HAL_I2C_Init+0x278>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	bf94      	ite	ls
 8003b28:	2301      	movls	r3, #1
 8003b2a:	2300      	movhi	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e006      	b.n	8003b3e <HAL_I2C_Init+0x92>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a7d      	ldr	r2, [pc, #500]	; (8003d28 <HAL_I2C_Init+0x27c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e0e7      	b.n	8003d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a78      	ldr	r2, [pc, #480]	; (8003d2c <HAL_I2C_Init+0x280>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0c9b      	lsrs	r3, r3, #18
 8003b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a6a      	ldr	r2, [pc, #424]	; (8003d20 <HAL_I2C_Init+0x274>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d802      	bhi.n	8003b80 <HAL_I2C_Init+0xd4>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	e009      	b.n	8003b94 <HAL_I2C_Init+0xe8>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	4a69      	ldr	r2, [pc, #420]	; (8003d30 <HAL_I2C_Init+0x284>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	3301      	adds	r3, #1
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	495c      	ldr	r1, [pc, #368]	; (8003d20 <HAL_I2C_Init+0x274>)
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d819      	bhi.n	8003be8 <HAL_I2C_Init+0x13c>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e59      	subs	r1, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc2:	1c59      	adds	r1, r3, #1
 8003bc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bc8:	400b      	ands	r3, r1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_I2C_Init+0x138>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e59      	subs	r1, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be2:	e051      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003be4:	2304      	movs	r3, #4
 8003be6:	e04f      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d111      	bne.n	8003c14 <HAL_I2C_Init+0x168>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1e58      	subs	r0, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e012      	b.n	8003c3a <HAL_I2C_Init+0x18e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1e58      	subs	r0, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	0099      	lsls	r1, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Init+0x196>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e022      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <HAL_I2C_Init+0x1bc>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1e58      	subs	r0, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	440b      	add	r3, r1
 8003c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	e00f      	b.n	8003c88 <HAL_I2C_Init+0x1dc>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	0099      	lsls	r1, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	6809      	ldr	r1, [r1, #0]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6911      	ldr	r1, [r2, #16]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68d2      	ldr	r2, [r2, #12]
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	000186a0 	.word	0x000186a0
 8003d24:	001e847f 	.word	0x001e847f
 8003d28:	003d08ff 	.word	0x003d08ff
 8003d2c:	431bde83 	.word	0x431bde83
 8003d30:	10624dd3 	.word	0x10624dd3

08003d34 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d103      	bne.n	8003d52 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
  }
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	f040 8081 	bne.w	8003e84 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d82:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_I2C_Master_Transmit_IT+0x134>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	08db      	lsrs	r3, r3, #3
 8003d88:	4a42      	ldr	r2, [pc, #264]	; (8003e94 <HAL_I2C_Master_Transmit_IT+0x138>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	0a1a      	lsrs	r2, r3, #8
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009a      	lsls	r2, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d112      	bne.n	8003dce <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f043 0220 	orr.w	r2, r3, #32
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e05b      	b.n	8003e86 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d0df      	beq.n	8003d9c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Master_Transmit_IT+0x8e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e04d      	b.n	8003e86 <HAL_I2C_Master_Transmit_IT+0x12a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d007      	beq.n	8003e10 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2221      	movs	r2, #33	; 0x21
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	893a      	ldrh	r2, [r7, #8]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e52:	897a      	ldrh	r2, [r7, #10]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e6e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	20000004 	.word	0x20000004
 8003e94:	14f8b589 	.word	0x14f8b589
 8003e98:	ffff0000 	.word	0xffff0000

08003e9c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	817b      	strh	r3, [r7, #10]
 8003eac:	4613      	mov	r3, r2
 8003eae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	f040 8089 	bne.w	8003fd4 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ec2:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <HAL_I2C_Master_Receive_IT+0x144>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	4a46      	ldr	r2, [pc, #280]	; (8003fe4 <HAL_I2C_Master_Receive_IT+0x148>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0a1a      	lsrs	r2, r3, #8
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009a      	lsls	r2, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d112      	bne.n	8003f0e <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e063      	b.n	8003fd6 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d0df      	beq.n	8003edc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2C_Master_Receive_IT+0x8e>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e055      	b.n	8003fd6 <HAL_I2C_Master_Receive_IT+0x13a>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d007      	beq.n	8003f50 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2222      	movs	r2, #34	; 0x22
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	893a      	ldrh	r2, [r7, #8]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <HAL_I2C_Master_Receive_IT+0x14c>)
 8003f90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f92:	897a      	ldrh	r2, [r7, #10]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003fae:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	20000004 	.word	0x20000004
 8003fe4:	14f8b589 	.word	0x14f8b589
 8003fe8:	ffff0000 	.word	0xffff0000

08003fec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	817b      	strh	r3, [r7, #10]
 8003ffe:	460b      	mov	r3, r1
 8004000:	813b      	strh	r3, [r7, #8]
 8004002:	4613      	mov	r3, r2
 8004004:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004006:	f7fe ffa7 	bl	8002f58 <HAL_GetTick>
 800400a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b20      	cmp	r3, #32
 8004016:	f040 80d9 	bne.w	80041cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2319      	movs	r3, #25
 8004020:	2201      	movs	r2, #1
 8004022:	496d      	ldr	r1, [pc, #436]	; (80041d8 <HAL_I2C_Mem_Write+0x1ec>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f002 f839 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
 8004032:	e0cc      	b.n	80041ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_I2C_Mem_Write+0x56>
 800403e:	2302      	movs	r3, #2
 8004040:	e0c5      	b.n	80041ce <HAL_I2C_Mem_Write+0x1e2>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d007      	beq.n	8004068 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2221      	movs	r2, #33	; 0x21
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a4d      	ldr	r2, [pc, #308]	; (80041dc <HAL_I2C_Mem_Write+0x1f0>)
 80040a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040aa:	88f8      	ldrh	r0, [r7, #6]
 80040ac:	893a      	ldrh	r2, [r7, #8]
 80040ae:	8979      	ldrh	r1, [r7, #10]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4603      	mov	r3, r0
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f001 fdc8 	bl	8005c50 <I2C_RequestMemoryWrite>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d052      	beq.n	800416c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e081      	b.n	80041ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f002 f8fe 	bl	80062d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d107      	bne.n	80040f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e06b      	b.n	80041ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d11b      	bne.n	800416c <HAL_I2C_Mem_Write+0x180>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d017      	beq.n	800416c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1aa      	bne.n	80040ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f002 f8f1 	bl	8006360 <I2C_WaitOnBTFFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	2b04      	cmp	r3, #4
 800418a:	d107      	bne.n	800419c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e016      	b.n	80041ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	00100002 	.word	0x00100002
 80041dc:	ffff0000 	.word	0xffff0000

080041e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	817b      	strh	r3, [r7, #10]
 80041f2:	460b      	mov	r3, r1
 80041f4:	813b      	strh	r3, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041fe:	f7fe feab 	bl	8002f58 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b20      	cmp	r3, #32
 800420e:	f040 8244 	bne.w	800469a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2319      	movs	r3, #25
 8004218:	2201      	movs	r2, #1
 800421a:	4982      	ldr	r1, [pc, #520]	; (8004424 <HAL_I2C_Mem_Read+0x244>)
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f001 ff3d 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
 800422a:	e237      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_I2C_Mem_Read+0x5a>
 8004236:	2302      	movs	r3, #2
 8004238:	e230      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d007      	beq.n	8004260 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2222      	movs	r2, #34	; 0x22
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2240      	movs	r2, #64	; 0x40
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a62      	ldr	r2, [pc, #392]	; (8004428 <HAL_I2C_Mem_Read+0x248>)
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042a2:	88f8      	ldrh	r0, [r7, #6]
 80042a4:	893a      	ldrh	r2, [r7, #8]
 80042a6:	8979      	ldrh	r1, [r7, #10]
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	4603      	mov	r3, r0
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f001 fd62 	bl	8005d7c <I2C_RequestMemoryRead>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e1ec      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d113      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e1c0      	b.n	8004674 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d11e      	bne.n	8004338 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004308:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800430a:	b672      	cpsid	i
}
 800430c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004334:	b662      	cpsie	i
}
 8004336:	e035      	b.n	80043a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	2b02      	cmp	r3, #2
 800433e:	d11e      	bne.n	800437e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004350:	b672      	cpsid	i
}
 8004352:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800437a:	b662      	cpsie	i
}
 800437c:	e012      	b.n	80043a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80043a4:	e166      	b.n	8004674 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	f200 811f 	bhi.w	80045ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d123      	bne.n	8004400 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f002 f849 	bl	8006454 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e167      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043fe:	e139      	b.n	8004674 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	2b02      	cmp	r3, #2
 8004406:	d152      	bne.n	80044ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	2200      	movs	r2, #0
 8004410:	4906      	ldr	r1, [pc, #24]	; (800442c <HAL_I2C_Mem_Read+0x24c>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f001 fe42 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e13c      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
 8004422:	bf00      	nop
 8004424:	00100002 	.word	0x00100002
 8004428:	ffff0000 	.word	0xffff0000
 800442c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004430:	b672      	cpsid	i
}
 8004432:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004476:	b662      	cpsie	i
}
 8004478:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ac:	e0e2      	b.n	8004674 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2200      	movs	r2, #0
 80044b6:	497b      	ldr	r1, [pc, #492]	; (80046a4 <HAL_I2C_Mem_Read+0x4c4>)
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f001 fdef 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0e9      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044d8:	b672      	cpsid	i
}
 80044da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800450e:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <HAL_I2C_Mem_Read+0x4c8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	4a65      	ldr	r2, [pc, #404]	; (80046ac <HAL_I2C_Mem_Read+0x4cc>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	0a1a      	lsrs	r2, r3, #8
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00da      	lsls	r2, r3, #3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	3b01      	subs	r3, #1
 800452c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d118      	bne.n	8004566 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004556:	b662      	cpsie	i
}
 8004558:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e09a      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d1d9      	bne.n	8004528 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045b6:	b662      	cpsie	i
}
 80045b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045ec:	e042      	b.n	8004674 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f001 ff2e 	bl	8006454 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e04c      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d118      	bne.n	8004674 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	f47f ae94 	bne.w	80043a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3728      	adds	r7, #40	; 0x28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	00010004 	.word	0x00010004
 80046a8:	20000004 	.word	0x20000004
 80046ac:	14f8b589 	.word	0x14f8b589

080046b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d003      	beq.n	80046e8 <HAL_I2C_EV_IRQHandler+0x38>
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	f040 80c1 	bne.w	800486a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <HAL_I2C_EV_IRQHandler+0x6e>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004708:	d003      	beq.n	8004712 <HAL_I2C_EV_IRQHandler+0x62>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004710:	d101      	bne.n	8004716 <HAL_I2C_EV_IRQHandler+0x66>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x68>
 8004716:	2300      	movs	r3, #0
 8004718:	2b01      	cmp	r3, #1
 800471a:	f000 8132 	beq.w	8004982 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00c      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x92>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	0a5b      	lsrs	r3, r3, #9
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d006      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 ff18 	bl	800656a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fcd6 	bl	80050ec <I2C_Master_SB>
 8004740:	e092      	b.n	8004868 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	08db      	lsrs	r3, r3, #3
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0xb2>
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd4b 	bl	80051f6 <I2C_Master_ADD10>
 8004760:	e082      	b.n	8004868 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0xd2>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	0a5b      	lsrs	r3, r3, #9
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fd64 	bl	8005248 <I2C_Master_ADDR>
 8004780:	e072      	b.n	8004868 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d03b      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479c:	f000 80f3 	beq.w	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	09db      	lsrs	r3, r3, #7
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00f      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0x11c>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	0a9b      	lsrs	r3, r3, #10
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0x11c>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f942 	bl	8004a4e <I2C_MasterTransmit_TXE>
 80047ca:	e04d      	b.n	8004868 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80d6 	beq.w	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	0a5b      	lsrs	r3, r3, #9
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80cf 	beq.w	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047e8:	7bbb      	ldrb	r3, [r7, #14]
 80047ea:	2b21      	cmp	r3, #33	; 0x21
 80047ec:	d103      	bne.n	80047f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f9c9 	bl	8004b86 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f4:	e0c7      	b.n	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	f040 80c4 	bne.w	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa37 	bl	8004c72 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004804:	e0bf      	b.n	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004814:	f000 80b7 	beq.w	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00f      	beq.n	8004844 <HAL_I2C_EV_IRQHandler+0x194>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_I2C_EV_IRQHandler+0x194>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fab0 	bl	8004da2 <I2C_MasterReceive_RXNE>
 8004842:	e011      	b.n	8004868 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 809a 	beq.w	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	0a5b      	lsrs	r3, r3, #9
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 8093 	beq.w	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fb59 	bl	8004f18 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004866:	e08e      	b.n	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004868:	e08d      	b.n	8004986 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e007      	b.n	800488c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x20e>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	0a5b      	lsrs	r3, r3, #9
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 ff1d 	bl	80056f6 <I2C_Slave_ADDR>
 80048bc:	e066      	b.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x22e>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	0a5b      	lsrs	r3, r3, #9
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 ff58 	bl	800578c <I2C_Slave_STOPF>
 80048dc:	e056      	b.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048de:	7bbb      	ldrb	r3, [r7, #14]
 80048e0:	2b21      	cmp	r3, #33	; 0x21
 80048e2:	d002      	beq.n	80048ea <HAL_I2C_EV_IRQHandler+0x23a>
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	2b29      	cmp	r3, #41	; 0x29
 80048e8:	d125      	bne.n	8004936 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	09db      	lsrs	r3, r3, #7
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00f      	beq.n	8004916 <HAL_I2C_EV_IRQHandler+0x266>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	0a9b      	lsrs	r3, r3, #10
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_I2C_EV_IRQHandler+0x266>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	089b      	lsrs	r3, r3, #2
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fe35 	bl	800557e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004914:	e039      	b.n	800498a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d033      	beq.n	800498a <HAL_I2C_EV_IRQHandler+0x2da>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	0a5b      	lsrs	r3, r3, #9
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02d      	beq.n	800498a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fe62 	bl	80055f8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004934:	e029      	b.n	800498a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	099b      	lsrs	r3, r3, #6
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00f      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	0a9b      	lsrs	r3, r3, #10
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x2b2>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fe6c 	bl	8005638 <I2C_SlaveReceive_RXNE>
 8004960:	e014      	b.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fe9a 	bl	80056b4 <I2C_SlaveReceive_BTF>
 8004980:	e004      	b.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004982:	bf00      	nop
 8004984:	e002      	b.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800498a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	70fb      	strb	r3, [r7, #3]
 80049e6:	4613      	mov	r3, r2
 80049e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr

08004a4e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a64:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d150      	bne.n	8004b16 <I2C_MasterTransmit_TXE+0xc8>
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b21      	cmp	r3, #33	; 0x21
 8004a78:	d14d      	bne.n	8004b16 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d01d      	beq.n	8004abc <I2C_MasterTransmit_TXE+0x6e>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d01a      	beq.n	8004abc <I2C_MasterTransmit_TXE+0x6e>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a8c:	d016      	beq.n	8004abc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a9c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2211      	movs	r2, #17
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ff6c 	bl	8004992 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aba:	e060      	b.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ada:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d107      	bne.n	8004b06 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ff81 	bl	8004a06 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b04:	e03b      	b.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ff3f 	bl	8004992 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b14:	e033      	b.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b21      	cmp	r3, #33	; 0x21
 8004b1a:	d005      	beq.n	8004b28 <I2C_MasterTransmit_TXE+0xda>
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d12d      	bne.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b22      	cmp	r3, #34	; 0x22
 8004b26:	d12a      	bne.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b42:	e01c      	b.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d103      	bne.n	8004b58 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f88e 	bl	8004c72 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b56:	e012      	b.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b7c:	e7ff      	b.n	8004b7e <I2C_MasterTransmit_TXE+0x130>
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b21      	cmp	r3, #33	; 0x21
 8004b9e:	d164      	bne.n	8004c6a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d012      	beq.n	8004bd0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bce:	e04c      	b.n	8004c6a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d01d      	beq.n	8004c12 <I2C_MasterTransmit_BTF+0x8c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d01a      	beq.n	8004c12 <I2C_MasterTransmit_BTF+0x8c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004be2:	d016      	beq.n	8004c12 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bf2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2211      	movs	r2, #17
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fec1 	bl	8004992 <HAL_I2C_MasterTxCpltCallback>
}
 8004c10:	e02b      	b.n	8004c6a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c20:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c30:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d107      	bne.n	8004c5c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fed6 	bl	8004a06 <HAL_I2C_MemTxCpltCallback>
}
 8004c5a:	e006      	b.n	8004c6a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fe94 	bl	8004992 <HAL_I2C_MasterTxCpltCallback>
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11d      	bne.n	8004cc6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10b      	bne.n	8004caa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004ca8:	e077      	b.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	121b      	asrs	r3, r3, #8
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cc4:	e069      	b.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10b      	bne.n	8004ce6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ce4:	e059      	b.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d152      	bne.n	8004d94 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b22      	cmp	r3, #34	; 0x22
 8004cf2:	d10d      	bne.n	8004d10 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d02:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d0e:	e044      	b.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d015      	beq.n	8004d46 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b21      	cmp	r3, #33	; 0x21
 8004d1e:	d112      	bne.n	8004d46 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d44:	e029      	b.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d124      	bne.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b21      	cmp	r3, #33	; 0x21
 8004d54:	d121      	bne.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d64:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d74:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fe3a 	bl	8004a06 <HAL_I2C_MemTxCpltCallback>
}
 8004d92:	e002      	b.n	8004d9a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fe ffcd 	bl	8003d34 <I2C_Flush_DR>
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b22      	cmp	r3, #34	; 0x22
 8004db4:	f040 80ac 	bne.w	8004f10 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d921      	bls.n	8004e0a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	f040 808c 	bne.w	8004f10 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e06:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e08:	e082      	b.n	8004f10 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d075      	beq.n	8004efe <I2C_MasterReceive_RXNE+0x15c>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d002      	beq.n	8004e1e <I2C_MasterReceive_RXNE+0x7c>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d16f      	bne.n	8004efe <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 fae6 	bl	80063f0 <I2C_WaitOnSTOPRequestThroughIT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d142      	bne.n	8004eb0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d10a      	bne.n	8004e9a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fdc0 	bl	8004a18 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e98:	e03a      	b.n	8004f10 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2212      	movs	r2, #18
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fd7b 	bl	80049a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eae:	e02f      	b.n	8004f10 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ebe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fd97 	bl	8004a2a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004efc:	e008      	b.n	8004f10 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	605a      	str	r2, [r3, #4]
}
 8004f0e:	e7ff      	b.n	8004f10 <I2C_MasterReceive_RXNE+0x16e>
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d11b      	bne.n	8004f68 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f66:	e0bd      	b.n	80050e4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d129      	bne.n	8004fc6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f80:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d00a      	beq.n	8004f9e <I2C_MasterReceive_BTF+0x86>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d007      	beq.n	8004f9e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fc4:	e08e      	b.n	80050e4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d176      	bne.n	80050be <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d002      	beq.n	8004fdc <I2C_MasterReceive_BTF+0xc4>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d108      	bne.n	8004fee <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e019      	b.n	8005022 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d002      	beq.n	8004ffa <I2C_MasterReceive_BTF+0xe2>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d108      	bne.n	800500c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e00a      	b.n	8005022 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b10      	cmp	r3, #16
 8005010:	d007      	beq.n	8005022 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005020:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800507c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d10a      	bne.n	80050a8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff fcb9 	bl	8004a18 <HAL_I2C_MemRxCpltCallback>
}
 80050a6:	e01d      	b.n	80050e4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2212      	movs	r2, #18
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fc74 	bl	80049a4 <HAL_I2C_MasterRxCpltCallback>
}
 80050bc:	e012      	b.n	80050e4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d117      	bne.n	8005130 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005118:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800511a:	e067      	b.n	80051ec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	611a      	str	r2, [r3, #16]
}
 800512e:	e05d      	b.n	80051ec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005138:	d133      	bne.n	80051a2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b21      	cmp	r3, #33	; 0x21
 8005144:	d109      	bne.n	800515a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005156:	611a      	str	r2, [r3, #16]
 8005158:	e008      	b.n	800516c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <I2C_Master_SB+0x92>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d108      	bne.n	8005190 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	2b00      	cmp	r3, #0
 8005184:	d032      	beq.n	80051ec <I2C_Master_SB+0x100>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	2b00      	cmp	r3, #0
 800518e:	d02d      	beq.n	80051ec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519e:	605a      	str	r2, [r3, #4]
}
 80051a0:	e024      	b.n	80051ec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10e      	bne.n	80051c8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	11db      	asrs	r3, r3, #7
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0306 	and.w	r3, r3, #6
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f063 030f 	orn	r3, r3, #15
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	611a      	str	r2, [r3, #16]
}
 80051c6:	e011      	b.n	80051ec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10d      	bne.n	80051ec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	11db      	asrs	r3, r3, #7
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f003 0306 	and.w	r3, r3, #6
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f063 030e 	orn	r3, r3, #14
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	611a      	str	r2, [r3, #16]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	b2da      	uxtb	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <I2C_Master_ADD10+0x26>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d108      	bne.n	800522e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <I2C_Master_ADD10+0x48>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523c:	605a      	str	r2, [r3, #4]
  }
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005248:	b480      	push	{r7}
 800524a:	b091      	sub	sp, #68	; 0x44
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005256:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b22      	cmp	r3, #34	; 0x22
 8005270:	f040 8174 	bne.w	800555c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10f      	bne.n	800529c <I2C_Master_ADDR+0x54>
 800527c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d10b      	bne.n	800529c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005284:	2300      	movs	r3, #0
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	e16b      	b.n	8005574 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11d      	bne.n	80052e0 <I2C_Master_ADDR+0x98>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052ac:	d118      	bne.n	80052e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ae:	2300      	movs	r3, #0
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
 80052de:	e149      	b.n	8005574 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d113      	bne.n	8005312 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ea:	2300      	movs	r3, #0
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e120      	b.n	8005554 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	f040 808a 	bne.w	8005432 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005324:	d137      	bne.n	8005396 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005334:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005344:	d113      	bne.n	800536e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	e0f2      	b.n	8005554 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e0de      	b.n	8005554 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b08      	cmp	r3, #8
 800539a:	d02e      	beq.n	80053fa <I2C_Master_ADDR+0x1b2>
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d02b      	beq.n	80053fa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	2b12      	cmp	r3, #18
 80053a6:	d102      	bne.n	80053ae <I2C_Master_ADDR+0x166>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d125      	bne.n	80053fa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d00e      	beq.n	80053d2 <I2C_Master_ADDR+0x18a>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d00b      	beq.n	80053d2 <I2C_Master_ADDR+0x18a>
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d008      	beq.n	80053d2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	e007      	b.n	80053e2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	e0ac      	b.n	8005554 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005408:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540a:	2300      	movs	r3, #0
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e090      	b.n	8005554 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d158      	bne.n	80054ee <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	2b04      	cmp	r3, #4
 8005440:	d021      	beq.n	8005486 <I2C_Master_ADDR+0x23e>
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b02      	cmp	r3, #2
 8005446:	d01e      	beq.n	8005486 <I2C_Master_ADDR+0x23e>
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	2b10      	cmp	r3, #16
 800544c:	d01b      	beq.n	8005486 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	e012      	b.n	80054ac <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005494:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ba:	d14b      	bne.n	8005554 <I2C_Master_ADDR+0x30c>
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054c2:	d00b      	beq.n	80054dc <I2C_Master_ADDR+0x294>
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d008      	beq.n	80054dc <I2C_Master_ADDR+0x294>
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d005      	beq.n	80054dc <I2C_Master_ADDR+0x294>
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d002      	beq.n	80054dc <I2C_Master_ADDR+0x294>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d13b      	bne.n	8005554 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	e032      	b.n	8005554 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550c:	d117      	bne.n	800553e <I2C_Master_ADDR+0x2f6>
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005514:	d00b      	beq.n	800552e <I2C_Master_ADDR+0x2e6>
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	2b01      	cmp	r3, #1
 800551a:	d008      	beq.n	800552e <I2C_Master_ADDR+0x2e6>
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	2b08      	cmp	r3, #8
 8005520:	d005      	beq.n	800552e <I2C_Master_ADDR+0x2e6>
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b10      	cmp	r3, #16
 8005526:	d002      	beq.n	800552e <I2C_Master_ADDR+0x2e6>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b20      	cmp	r3, #32
 800552c:	d107      	bne.n	800553e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800553c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800555a:	e00b      	b.n	8005574 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555c:	2300      	movs	r3, #0
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
}
 8005572:	e7ff      	b.n	8005574 <I2C_Master_ADDR+0x32c>
 8005574:	bf00      	nop
 8005576:	3744      	adds	r7, #68	; 0x44
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d02b      	beq.n	80055f0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d114      	bne.n	80055f0 <I2C_SlaveTransmit_TXE+0x72>
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b29      	cmp	r3, #41	; 0x29
 80055ca:	d111      	bne.n	80055f0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2221      	movs	r2, #33	; 0x21
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2228      	movs	r2, #40	; 0x28
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff f9e3 	bl	80049b6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d011      	beq.n	800562e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005646:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d02c      	beq.n	80056ac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d114      	bne.n	80056ac <I2C_SlaveReceive_RXNE+0x74>
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b2a      	cmp	r3, #42	; 0x2a
 8005686:	d111      	bne.n	80056ac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005696:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2222      	movs	r2, #34	; 0x22
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2228      	movs	r2, #40	; 0x28
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff f98e 	bl	80049c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d012      	beq.n	80056ec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005710:	2b28      	cmp	r3, #40	; 0x28
 8005712:	d127      	bne.n	8005764 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005722:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d103      	bne.n	8005748 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	81bb      	strh	r3, [r7, #12]
 8005746:	e002      	b.n	800574e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005756:	89ba      	ldrh	r2, [r7, #12]
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff f93c 	bl	80049da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005762:	e00e      	b.n	8005782 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005764:	2300      	movs	r3, #0
 8005766:	60bb      	str	r3, [r7, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e8:	d172      	bne.n	80058d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b22      	cmp	r3, #34	; 0x22
 80057ee:	d002      	beq.n	80057f6 <I2C_Slave_STOPF+0x6a>
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b2a      	cmp	r3, #42	; 0x2a
 80057f4:	d135      	bne.n	8005862 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f043 0204 	orr.w	r2, r3, #4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005828:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	4618      	mov	r0, r3
 8005830:	f7fd ff1e 	bl	8003670 <HAL_DMA_GetState>
 8005834:	4603      	mov	r3, r0
 8005836:	2b01      	cmp	r3, #1
 8005838:	d049      	beq.n	80058ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	4a69      	ldr	r2, [pc, #420]	; (80059e4 <I2C_Slave_STOPF+0x258>)
 8005840:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	4618      	mov	r0, r3
 8005848:	f7fd fd94 	bl	8003374 <HAL_DMA_Abort_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d03d      	beq.n	80058ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005860:	e035      	b.n	80058ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005894:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd fee8 	bl	8003670 <HAL_DMA_GetState>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d014      	beq.n	80058d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	4a4e      	ldr	r2, [pc, #312]	; (80059e4 <I2C_Slave_STOPF+0x258>)
 80058ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fd fd5e 	bl	8003374 <HAL_DMA_Abort_IT>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058c8:	4610      	mov	r0, r2
 80058ca:	4798      	blx	r3
 80058cc:	e000      	b.n	80058d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03e      	beq.n	8005958 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d112      	bne.n	800590e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d112      	bne.n	8005942 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f043 0204 	orr.w	r2, r3, #4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f843 	bl	80059ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005966:	e039      	b.n	80059dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b2a      	cmp	r3, #42	; 0x2a
 800596c:	d109      	bne.n	8005982 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2228      	movs	r2, #40	; 0x28
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff f823 	bl	80049c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b28      	cmp	r3, #40	; 0x28
 800598c:	d111      	bne.n	80059b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <I2C_Slave_STOPF+0x25c>)
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff f822 	bl	80049f4 <HAL_I2C_ListenCpltCallback>
}
 80059b0:	e014      	b.n	80059dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	2b22      	cmp	r3, #34	; 0x22
 80059b8:	d002      	beq.n	80059c0 <I2C_Slave_STOPF+0x234>
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b22      	cmp	r3, #34	; 0x22
 80059be:	d10d      	bne.n	80059dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fe fff6 	bl	80049c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	08005f4d 	.word	0x08005f4d
 80059e8:	ffff0000 	.word	0xffff0000

080059ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d002      	beq.n	8005a10 <I2C_ITError+0x24>
 8005a0a:	7bbb      	ldrb	r3, [r7, #14]
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d10a      	bne.n	8005a26 <I2C_ITError+0x3a>
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b22      	cmp	r3, #34	; 0x22
 8005a14:	d107      	bne.n	8005a26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a2c:	2b28      	cmp	r3, #40	; 0x28
 8005a2e:	d107      	bne.n	8005a40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2228      	movs	r2, #40	; 0x28
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a3e:	e015      	b.n	8005a6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4e:	d00a      	beq.n	8005a66 <I2C_ITError+0x7a>
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b60      	cmp	r3, #96	; 0x60
 8005a54:	d007      	beq.n	8005a66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7a:	d162      	bne.n	8005b42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d020      	beq.n	8005adc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	4a6a      	ldr	r2, [pc, #424]	; (8005c48 <I2C_ITError+0x25c>)
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fc64 	bl	8003374 <HAL_DMA_Abort_IT>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8089 	beq.w	8005bc6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4798      	blx	r3
 8005ada:	e074      	b.n	8005bc6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	4a59      	ldr	r2, [pc, #356]	; (8005c48 <I2C_ITError+0x25c>)
 8005ae2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fd fc43 	bl	8003374 <HAL_DMA_Abort_IT>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d068      	beq.n	8005bc6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d10b      	bne.n	8005b1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
 8005b40:	e041      	b.n	8005bc6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b60      	cmp	r3, #96	; 0x60
 8005b4c:	d125      	bne.n	8005b9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d10b      	bne.n	8005b82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fe ff52 	bl	8004a3c <HAL_I2C_AbortCpltCallback>
 8005b98:	e015      	b.n	8005bc6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d10b      	bne.n	8005bc0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fe ff32 	bl	8004a2a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10e      	bne.n	8005bf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d113      	bne.n	8005c40 <I2C_ITError+0x254>
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	2b28      	cmp	r3, #40	; 0x28
 8005c1c:	d110      	bne.n	8005c40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <I2C_ITError+0x260>)
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fe feda 	bl	80049f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08005f4d 	.word	0x08005f4d
 8005c4c:	ffff0000 	.word	0xffff0000

08005c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa08 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca0:	d103      	bne.n	8005caa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e05f      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	492d      	ldr	r1, [pc, #180]	; (8005d78 <I2C_RequestMemoryWrite+0x128>)
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fa63 	bl	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e04c      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	6a39      	ldr	r1, [r7, #32]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 faee 	bl	80062d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d107      	bne.n	8005d12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e02b      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	e021      	b.n	8005d6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fac8 	bl	80062d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d107      	bne.n	8005d5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e005      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d62:	893b      	ldrh	r3, [r7, #8]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	00010002 	.word	0x00010002

08005d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	813b      	strh	r3, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f96a 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ddc:	d103      	bne.n	8005de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0aa      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	4952      	ldr	r1, [pc, #328]	; (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f9c5 	bl	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e097      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	6a39      	ldr	r1, [r7, #32]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fa50 	bl	80062d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d107      	bne.n	8005e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e076      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d105      	bne.n	8005e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e58:	893b      	ldrh	r3, [r7, #8]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]
 8005e62:	e021      	b.n	8005ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e64:	893b      	ldrh	r3, [r7, #8]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e74:	6a39      	ldr	r1, [r7, #32]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fa2a 	bl	80062d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d107      	bne.n	8005e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e050      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	6a39      	ldr	r1, [r7, #32]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fa0f 	bl	80062d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d107      	bne.n	8005ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e035      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f8d3 	bl	800609c <I2C_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00d      	beq.n	8005f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0a:	d103      	bne.n	8005f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e013      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f18:	897b      	ldrh	r3, [r7, #10]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f92e 	bl	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	00010002 	.word	0x00010002

08005f4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f66:	4b4b      	ldr	r3, [pc, #300]	; (8006094 <I2C_DMAAbort+0x148>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	08db      	lsrs	r3, r3, #3
 8005f6c:	4a4a      	ldr	r2, [pc, #296]	; (8006098 <I2C_DMAAbort+0x14c>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	0a1a      	lsrs	r2, r3, #8
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	00da      	lsls	r2, r3, #3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f92:	e00a      	b.n	8005faa <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	d0ea      	beq.n	8005f80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	2200      	movs	r2, #0
 8005fee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b60      	cmp	r3, #96	; 0x60
 800601a:	d10e      	bne.n	800603a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f7fe fd02 	bl	8004a3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006038:	e027      	b.n	800608a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800603a:	7cfb      	ldrb	r3, [r7, #19]
 800603c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006040:	2b28      	cmp	r3, #40	; 0x28
 8006042:	d117      	bne.n	8006074 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2228      	movs	r2, #40	; 0x28
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006072:	e007      	b.n	8006084 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006084:	6978      	ldr	r0, [r7, #20]
 8006086:	f7fe fcd0 	bl	8004a2a <HAL_I2C_ErrorCallback>
}
 800608a:	bf00      	nop
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000004 	.word	0x20000004
 8006098:	14f8b589 	.word	0x14f8b589

0800609c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060ac:	e048      	b.n	8006140 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d044      	beq.n	8006140 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fc ff4f 	bl	8002f58 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d139      	bne.n	8006140 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10d      	bne.n	80060f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	43da      	mvns	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4013      	ands	r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bf0c      	ite	eq
 80060e8:	2301      	moveq	r3, #1
 80060ea:	2300      	movne	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	e00c      	b.n	800610c <I2C_WaitOnFlagUntilTimeout+0x70>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	43da      	mvns	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4013      	ands	r3, r2
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	bf0c      	ite	eq
 8006104:	2301      	moveq	r3, #1
 8006106:	2300      	movne	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	429a      	cmp	r2, r3
 8006110:	d116      	bne.n	8006140 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e023      	b.n	8006188 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	0c1b      	lsrs	r3, r3, #16
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10d      	bne.n	8006166 <I2C_WaitOnFlagUntilTimeout+0xca>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	43da      	mvns	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	e00c      	b.n	8006180 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	43da      	mvns	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4013      	ands	r3, r2
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	bf0c      	ite	eq
 8006178:	2301      	moveq	r3, #1
 800617a:	2300      	movne	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	429a      	cmp	r2, r3
 8006184:	d093      	beq.n	80060ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800619e:	e071      	b.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ae:	d123      	bne.n	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	f043 0204 	orr.w	r2, r3, #4
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e067      	b.n	80062c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d041      	beq.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006200:	f7fc feaa 	bl	8002f58 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d302      	bcc.n	8006216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d136      	bne.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10c      	bne.n	800623a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	43da      	mvns	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4013      	ands	r3, r2
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	bf14      	ite	ne
 8006232:	2301      	movne	r3, #1
 8006234:	2300      	moveq	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	e00b      	b.n	8006252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	43da      	mvns	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4013      	ands	r3, r2
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf14      	ite	ne
 800624c:	2301      	movne	r3, #1
 800624e:	2300      	moveq	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	f043 0220 	orr.w	r2, r3, #32
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e021      	b.n	80062c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	0c1b      	lsrs	r3, r3, #16
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d10c      	bne.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	43da      	mvns	r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4013      	ands	r3, r2
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e00b      	b.n	80062c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	43da      	mvns	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4013      	ands	r3, r2
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f47f af6d 	bne.w	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062dc:	e034      	b.n	8006348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f915 	bl	800650e <I2C_IsAcknowledgeFailed>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e034      	b.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d028      	beq.n	8006348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f6:	f7fc fe2f 	bl	8002f58 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11d      	bne.n	8006348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006316:	2b80      	cmp	r3, #128	; 0x80
 8006318:	d016      	beq.n	8006348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e007      	b.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d1c3      	bne.n	80062de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800636c:	e034      	b.n	80063d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 f8cd 	bl	800650e <I2C_IsAcknowledgeFailed>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e034      	b.n	80063e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d028      	beq.n	80063d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006386:	f7fc fde7 	bl	8002f58 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	d302      	bcc.n	800639c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d11d      	bne.n	80063d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d016      	beq.n	80063d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e007      	b.n	80063e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d1c3      	bne.n	800636e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80063fc:	4b13      	ldr	r3, [pc, #76]	; (800644c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	08db      	lsrs	r3, r3, #3
 8006402:	4a13      	ldr	r2, [pc, #76]	; (8006450 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006404:	fba2 2303 	umull	r2, r3, r2, r3
 8006408:	0a1a      	lsrs	r2, r3, #8
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b01      	subs	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d107      	bne.n	800642e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e008      	b.n	8006440 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643c:	d0e9      	beq.n	8006412 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000004 	.word	0x20000004
 8006450:	14f8b589 	.word	0x14f8b589

08006454 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006460:	e049      	b.n	80064f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b10      	cmp	r3, #16
 800646e:	d119      	bne.n	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0210 	mvn.w	r2, #16
 8006478:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e030      	b.n	8006506 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a4:	f7fc fd58 	bl	8002f58 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11d      	bne.n	80064f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	d016      	beq.n	80064f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e007      	b.n	8006506 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d1ae      	bne.n	8006462 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006524:	d11b      	bne.n	800655e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800652e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800657a:	d103      	bne.n	8006584 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006582:	e007      	b.n	8006594 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800658c:	d102      	bne.n	8006594 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2208      	movs	r2, #8
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr
	...

080065a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e26c      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8087 	beq.w	80066ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065c0:	4b92      	ldr	r3, [pc, #584]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f003 030c 	and.w	r3, r3, #12
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d00c      	beq.n	80065e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065cc:	4b8f      	ldr	r3, [pc, #572]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f003 030c 	and.w	r3, r3, #12
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d112      	bne.n	80065fe <HAL_RCC_OscConfig+0x5e>
 80065d8:	4b8c      	ldr	r3, [pc, #560]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e4:	d10b      	bne.n	80065fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e6:	4b89      	ldr	r3, [pc, #548]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d06c      	beq.n	80066cc <HAL_RCC_OscConfig+0x12c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d168      	bne.n	80066cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e246      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006606:	d106      	bne.n	8006616 <HAL_RCC_OscConfig+0x76>
 8006608:	4b80      	ldr	r3, [pc, #512]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a7f      	ldr	r2, [pc, #508]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 800660e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	e02e      	b.n	8006674 <HAL_RCC_OscConfig+0xd4>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0x98>
 800661e:	4b7b      	ldr	r3, [pc, #492]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a7a      	ldr	r2, [pc, #488]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b78      	ldr	r3, [pc, #480]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a77      	ldr	r2, [pc, #476]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e01d      	b.n	8006674 <HAL_RCC_OscConfig+0xd4>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006640:	d10c      	bne.n	800665c <HAL_RCC_OscConfig+0xbc>
 8006642:	4b72      	ldr	r3, [pc, #456]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a71      	ldr	r2, [pc, #452]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	4b6f      	ldr	r3, [pc, #444]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6e      	ldr	r2, [pc, #440]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	e00b      	b.n	8006674 <HAL_RCC_OscConfig+0xd4>
 800665c:	4b6b      	ldr	r3, [pc, #428]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a6a      	ldr	r2, [pc, #424]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	4b68      	ldr	r3, [pc, #416]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a67      	ldr	r2, [pc, #412]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 800666e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006672:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d013      	beq.n	80066a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667c:	f7fc fc6c 	bl	8002f58 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006684:	f7fc fc68 	bl	8002f58 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b64      	cmp	r3, #100	; 0x64
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e1fa      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006696:	4b5d      	ldr	r3, [pc, #372]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f0      	beq.n	8006684 <HAL_RCC_OscConfig+0xe4>
 80066a2:	e014      	b.n	80066ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a4:	f7fc fc58 	bl	8002f58 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fc fc54 	bl	8002f58 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	; 0x64
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e1e6      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066be:	4b53      	ldr	r3, [pc, #332]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x10c>
 80066ca:	e000      	b.n	80066ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d063      	beq.n	80067a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066da:	4b4c      	ldr	r3, [pc, #304]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f003 030c 	and.w	r3, r3, #12
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066e6:	4b49      	ldr	r3, [pc, #292]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f003 030c 	and.w	r3, r3, #12
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d11c      	bne.n	800672c <HAL_RCC_OscConfig+0x18c>
 80066f2:	4b46      	ldr	r3, [pc, #280]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d116      	bne.n	800672c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fe:	4b43      	ldr	r3, [pc, #268]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <HAL_RCC_OscConfig+0x176>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d001      	beq.n	8006716 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e1ba      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006716:	4b3d      	ldr	r3, [pc, #244]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4939      	ldr	r1, [pc, #228]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006726:	4313      	orrs	r3, r2
 8006728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800672a:	e03a      	b.n	80067a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d020      	beq.n	8006776 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006734:	4b36      	ldr	r3, [pc, #216]	; (8006810 <HAL_RCC_OscConfig+0x270>)
 8006736:	2201      	movs	r2, #1
 8006738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673a:	f7fc fc0d 	bl	8002f58 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006742:	f7fc fc09 	bl	8002f58 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e19b      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006754:	4b2d      	ldr	r3, [pc, #180]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0f0      	beq.n	8006742 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006760:	4b2a      	ldr	r3, [pc, #168]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	4927      	ldr	r1, [pc, #156]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]
 8006774:	e015      	b.n	80067a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006776:	4b26      	ldr	r3, [pc, #152]	; (8006810 <HAL_RCC_OscConfig+0x270>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677c:	f7fc fbec 	bl	8002f58 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006784:	f7fc fbe8 	bl	8002f58 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e17a      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f0      	bne.n	8006784 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d03a      	beq.n	8006824 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d019      	beq.n	80067ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067b6:	4b17      	ldr	r3, [pc, #92]	; (8006814 <HAL_RCC_OscConfig+0x274>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067bc:	f7fc fbcc 	bl	8002f58 <HAL_GetTick>
 80067c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c4:	f7fc fbc8 	bl	8002f58 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e15a      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d6:	4b0d      	ldr	r3, [pc, #52]	; (800680c <HAL_RCC_OscConfig+0x26c>)
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f0      	beq.n	80067c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80067e2:	2001      	movs	r0, #1
 80067e4:	f000 facc 	bl	8006d80 <RCC_Delay>
 80067e8:	e01c      	b.n	8006824 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067ea:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <HAL_RCC_OscConfig+0x274>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f0:	f7fc fbb2 	bl	8002f58 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f6:	e00f      	b.n	8006818 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f8:	f7fc fbae 	bl	8002f58 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d908      	bls.n	8006818 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e140      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	42420000 	.word	0x42420000
 8006814:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006818:	4b9e      	ldr	r3, [pc, #632]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e9      	bne.n	80067f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80a6 	beq.w	800697e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006836:	4b97      	ldr	r3, [pc, #604]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10d      	bne.n	800685e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006842:	4b94      	ldr	r3, [pc, #592]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	4a93      	ldr	r2, [pc, #588]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684c:	61d3      	str	r3, [r2, #28]
 800684e:	4b91      	ldr	r3, [pc, #580]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006856:	60bb      	str	r3, [r7, #8]
 8006858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800685a:	2301      	movs	r3, #1
 800685c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800685e:	4b8e      	ldr	r3, [pc, #568]	; (8006a98 <HAL_RCC_OscConfig+0x4f8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d118      	bne.n	800689c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800686a:	4b8b      	ldr	r3, [pc, #556]	; (8006a98 <HAL_RCC_OscConfig+0x4f8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a8a      	ldr	r2, [pc, #552]	; (8006a98 <HAL_RCC_OscConfig+0x4f8>)
 8006870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006876:	f7fc fb6f 	bl	8002f58 <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800687e:	f7fc fb6b 	bl	8002f58 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b64      	cmp	r3, #100	; 0x64
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e0fd      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006890:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <HAL_RCC_OscConfig+0x4f8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0f0      	beq.n	800687e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d106      	bne.n	80068b2 <HAL_RCC_OscConfig+0x312>
 80068a4:	4b7b      	ldr	r3, [pc, #492]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	4a7a      	ldr	r2, [pc, #488]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	6213      	str	r3, [r2, #32]
 80068b0:	e02d      	b.n	800690e <HAL_RCC_OscConfig+0x36e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10c      	bne.n	80068d4 <HAL_RCC_OscConfig+0x334>
 80068ba:	4b76      	ldr	r3, [pc, #472]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	4a75      	ldr	r2, [pc, #468]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068c0:	f023 0301 	bic.w	r3, r3, #1
 80068c4:	6213      	str	r3, [r2, #32]
 80068c6:	4b73      	ldr	r3, [pc, #460]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	4a72      	ldr	r2, [pc, #456]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068cc:	f023 0304 	bic.w	r3, r3, #4
 80068d0:	6213      	str	r3, [r2, #32]
 80068d2:	e01c      	b.n	800690e <HAL_RCC_OscConfig+0x36e>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b05      	cmp	r3, #5
 80068da:	d10c      	bne.n	80068f6 <HAL_RCC_OscConfig+0x356>
 80068dc:	4b6d      	ldr	r3, [pc, #436]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	4a6c      	ldr	r2, [pc, #432]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068e2:	f043 0304 	orr.w	r3, r3, #4
 80068e6:	6213      	str	r3, [r2, #32]
 80068e8:	4b6a      	ldr	r3, [pc, #424]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	4a69      	ldr	r2, [pc, #420]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	6213      	str	r3, [r2, #32]
 80068f4:	e00b      	b.n	800690e <HAL_RCC_OscConfig+0x36e>
 80068f6:	4b67      	ldr	r3, [pc, #412]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	4a66      	ldr	r2, [pc, #408]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	6213      	str	r3, [r2, #32]
 8006902:	4b64      	ldr	r3, [pc, #400]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	4a63      	ldr	r2, [pc, #396]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006908:	f023 0304 	bic.w	r3, r3, #4
 800690c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d015      	beq.n	8006942 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006916:	f7fc fb1f 	bl	8002f58 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800691c:	e00a      	b.n	8006934 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691e:	f7fc fb1b 	bl	8002f58 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	; 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e0ab      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006934:	4b57      	ldr	r3, [pc, #348]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0ee      	beq.n	800691e <HAL_RCC_OscConfig+0x37e>
 8006940:	e014      	b.n	800696c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006942:	f7fc fb09 	bl	8002f58 <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006948:	e00a      	b.n	8006960 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694a:	f7fc fb05 	bl	8002f58 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	f241 3288 	movw	r2, #5000	; 0x1388
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e095      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006960:	4b4c      	ldr	r3, [pc, #304]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1ee      	bne.n	800694a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d105      	bne.n	800697e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006972:	4b48      	ldr	r3, [pc, #288]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	4a47      	ldr	r2, [pc, #284]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8081 	beq.w	8006a8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006988:	4b42      	ldr	r3, [pc, #264]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b08      	cmp	r3, #8
 8006992:	d061      	beq.n	8006a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d146      	bne.n	8006a2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699c:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <HAL_RCC_OscConfig+0x4fc>)
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a2:	f7fc fad9 	bl	8002f58 <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069aa:	f7fc fad5 	bl	8002f58 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e067      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069bc:	4b35      	ldr	r3, [pc, #212]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f0      	bne.n	80069aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d108      	bne.n	80069e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069d2:	4b30      	ldr	r3, [pc, #192]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	492d      	ldr	r1, [pc, #180]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e4:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a19      	ldr	r1, [r3, #32]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	430b      	orrs	r3, r1
 80069f6:	4927      	ldr	r1, [pc, #156]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fc:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <HAL_RCC_OscConfig+0x4fc>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a02:	f7fc faa9 	bl	8002f58 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a0a:	f7fc faa5 	bl	8002f58 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e037      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a1c:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f0      	beq.n	8006a0a <HAL_RCC_OscConfig+0x46a>
 8006a28:	e02f      	b.n	8006a8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2a:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <HAL_RCC_OscConfig+0x4fc>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a30:	f7fc fa92 	bl	8002f58 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a38:	f7fc fa8e 	bl	8002f58 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e020      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x498>
 8006a56:	e018      	b.n	8006a8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e013      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a64:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <HAL_RCC_OscConfig+0x4f4>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d106      	bne.n	8006a86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d001      	beq.n	8006a8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40021000 	.word	0x40021000
 8006a98:	40007000 	.word	0x40007000
 8006a9c:	42420060 	.word	0x42420060

08006aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e0d0      	b.n	8006c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab4:	4b6a      	ldr	r3, [pc, #424]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d910      	bls.n	8006ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac2:	4b67      	ldr	r3, [pc, #412]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f023 0207 	bic.w	r2, r3, #7
 8006aca:	4965      	ldr	r1, [pc, #404]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad2:	4b63      	ldr	r3, [pc, #396]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d001      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0b8      	b.n	8006c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d020      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006afc:	4b59      	ldr	r3, [pc, #356]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a58      	ldr	r2, [pc, #352]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b14:	4b53      	ldr	r3, [pc, #332]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a52      	ldr	r2, [pc, #328]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b20:	4b50      	ldr	r3, [pc, #320]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	494d      	ldr	r1, [pc, #308]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d040      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d107      	bne.n	8006b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b46:	4b47      	ldr	r3, [pc, #284]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d115      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e07f      	b.n	8006c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5e:	4b41      	ldr	r3, [pc, #260]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e073      	b.n	8006c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6e:	4b3d      	ldr	r3, [pc, #244]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e06b      	b.n	8006c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7e:	4b39      	ldr	r3, [pc, #228]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f023 0203 	bic.w	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4936      	ldr	r1, [pc, #216]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b90:	f7fc f9e2 	bl	8002f58 <HAL_GetTick>
 8006b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	e00a      	b.n	8006bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b98:	f7fc f9de 	bl	8002f58 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e053      	b.n	8006c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 020c 	and.w	r2, r3, #12
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d1eb      	bne.n	8006b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b27      	ldr	r3, [pc, #156]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d210      	bcs.n	8006bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 0207 	bic.w	r2, r3, #7
 8006bd6:	4922      	ldr	r1, [pc, #136]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bde:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d001      	beq.n	8006bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e032      	b.n	8006c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bfc:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4916      	ldr	r1, [pc, #88]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	490e      	ldr	r1, [pc, #56]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c2e:	f000 f821 	bl	8006c74 <HAL_RCC_GetSysClockFreq>
 8006c32:	4602      	mov	r2, r0
 8006c34:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	490a      	ldr	r1, [pc, #40]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c40:	5ccb      	ldrb	r3, [r1, r3]
 8006c42:	fa22 f303 	lsr.w	r3, r2, r3
 8006c46:	4a09      	ldr	r2, [pc, #36]	; (8006c6c <HAL_RCC_ClockConfig+0x1cc>)
 8006c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c4a:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <HAL_RCC_ClockConfig+0x1d0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fc f940 	bl	8002ed4 <HAL_InitTick>

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	40022000 	.word	0x40022000
 8006c64:	40021000 	.word	0x40021000
 8006c68:	0800d210 	.word	0x0800d210
 8006c6c:	20000004 	.word	0x20000004
 8006c70:	20000008 	.word	0x20000008

08006c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	2300      	movs	r3, #0
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d002      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x30>
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d003      	beq.n	8006caa <HAL_RCC_GetSysClockFreq+0x36>
 8006ca2:	e027      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ca4:	4b19      	ldr	r3, [pc, #100]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006ca6:	613b      	str	r3, [r7, #16]
      break;
 8006ca8:	e027      	b.n	8006cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	0c9b      	lsrs	r3, r3, #18
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cb4:	5cd3      	ldrb	r3, [r2, r3]
 8006cb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	0c5b      	lsrs	r3, r3, #17
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	4a11      	ldr	r2, [pc, #68]	; (8006d14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a0d      	ldr	r2, [pc, #52]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006cd6:	fb02 f203 	mul.w	r2, r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	e004      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a0c      	ldr	r2, [pc, #48]	; (8006d18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ce8:	fb02 f303 	mul.w	r3, r2, r3
 8006cec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	613b      	str	r3, [r7, #16]
      break;
 8006cf2:	e002      	b.n	8006cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006cf6:	613b      	str	r3, [r7, #16]
      break;
 8006cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cfa:	693b      	ldr	r3, [r7, #16]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	007a1200 	.word	0x007a1200
 8006d10:	0800d228 	.word	0x0800d228
 8006d14:	0800d238 	.word	0x0800d238
 8006d18:	003d0900 	.word	0x003d0900

08006d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d20:	4b02      	ldr	r3, [pc, #8]	; (8006d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr
 8006d2c:	20000004 	.word	0x20000004

08006d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d34:	f7ff fff2 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	4903      	ldr	r1, [pc, #12]	; (8006d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d46:	5ccb      	ldrb	r3, [r1, r3]
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40021000 	.word	0x40021000
 8006d54:	0800d220 	.word	0x0800d220

08006d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d5c:	f7ff ffde 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d60:	4602      	mov	r2, r0
 8006d62:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	0adb      	lsrs	r3, r3, #11
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	4903      	ldr	r1, [pc, #12]	; (8006d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d6e:	5ccb      	ldrb	r3, [r1, r3]
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	0800d220 	.word	0x0800d220

08006d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <RCC_Delay+0x34>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <RCC_Delay+0x38>)
 8006d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d92:	0a5b      	lsrs	r3, r3, #9
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d9c:	bf00      	nop
  }
  while (Delay --);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1e5a      	subs	r2, r3, #1
 8006da2:	60fa      	str	r2, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f9      	bne.n	8006d9c <RCC_Delay+0x1c>
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr
 8006db4:	20000004 	.word	0x20000004
 8006db8:	10624dd3 	.word	0x10624dd3

08006dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e041      	b.n	8006e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fb fd84 	bl	80028f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f000 fa74 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d001      	beq.n	8006e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e03a      	b.n	8006eea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <HAL_TIM_Base_Start_IT+0x98>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00e      	beq.n	8006eb4 <HAL_TIM_Base_Start_IT+0x58>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d009      	beq.n	8006eb4 <HAL_TIM_Base_Start_IT+0x58>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a14      	ldr	r2, [pc, #80]	; (8006ef8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d004      	beq.n	8006eb4 <HAL_TIM_Base_Start_IT+0x58>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a13      	ldr	r2, [pc, #76]	; (8006efc <HAL_TIM_Base_Start_IT+0xa0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d111      	bne.n	8006ed8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b06      	cmp	r3, #6
 8006ec4:	d010      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0201 	orr.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed6:	e007      	b.n	8006ee8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800

08006f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0202 	mvn.w	r2, #2
 8006f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9b4 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f9a7 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f9b6 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0204 	mvn.w	r2, #4
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f98a 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f97d 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f98c 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0208 	mvn.w	r2, #8
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f960 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f953 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f962 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b10      	cmp	r3, #16
 8007010:	d122      	bne.n	8007058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b10      	cmp	r3, #16
 800701e:	d11b      	bne.n	8007058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0210 	mvn.w	r2, #16
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2208      	movs	r2, #8
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f936 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f929 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f938 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10e      	bne.n	8007084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b01      	cmp	r3, #1
 8007072:	d107      	bne.n	8007084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0201 	mvn.w	r2, #1
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fb f8c6 	bl	8002210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	d10e      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	2b80      	cmp	r3, #128	; 0x80
 800709e:	d107      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa7b 	bl	80075a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ba:	2b40      	cmp	r3, #64	; 0x40
 80070bc:	d10e      	bne.n	80070dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	d107      	bne.n	80070dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8fc 	bl	80072d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d10e      	bne.n	8007108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d107      	bne.n	8007108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0220 	mvn.w	r2, #32
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa46 	bl	8007594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_TIM_ConfigClockSource+0x1c>
 8007128:	2302      	movs	r3, #2
 800712a:	e0b4      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x186>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800714a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007164:	d03e      	beq.n	80071e4 <HAL_TIM_ConfigClockSource+0xd4>
 8007166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716a:	f200 8087 	bhi.w	800727c <HAL_TIM_ConfigClockSource+0x16c>
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	f000 8086 	beq.w	8007282 <HAL_TIM_ConfigClockSource+0x172>
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	d87f      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
 800717c:	2b70      	cmp	r3, #112	; 0x70
 800717e:	d01a      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0xa6>
 8007180:	2b70      	cmp	r3, #112	; 0x70
 8007182:	d87b      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
 8007184:	2b60      	cmp	r3, #96	; 0x60
 8007186:	d050      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x11a>
 8007188:	2b60      	cmp	r3, #96	; 0x60
 800718a:	d877      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
 800718c:	2b50      	cmp	r3, #80	; 0x50
 800718e:	d03c      	beq.n	800720a <HAL_TIM_ConfigClockSource+0xfa>
 8007190:	2b50      	cmp	r3, #80	; 0x50
 8007192:	d873      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d058      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x13a>
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	d86f      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	d064      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15a>
 80071a0:	2b30      	cmp	r3, #48	; 0x30
 80071a2:	d86b      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d060      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15a>
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d867      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d05c      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15a>
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d05a      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15a>
 80071b4:	e062      	b.n	800727c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6899      	ldr	r1, [r3, #8]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f000 f968 	bl	800749a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	609a      	str	r2, [r3, #8]
      break;
 80071e2:	e04f      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	6899      	ldr	r1, [r3, #8]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f000 f951 	bl	800749a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007206:	609a      	str	r2, [r3, #8]
      break;
 8007208:	e03c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6859      	ldr	r1, [r3, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	461a      	mov	r2, r3
 8007218:	f000 f8c8 	bl	80073ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2150      	movs	r1, #80	; 0x50
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f91f 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 8007228:	e02c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6859      	ldr	r1, [r3, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	461a      	mov	r2, r3
 8007238:	f000 f8e6 	bl	8007408 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2160      	movs	r1, #96	; 0x60
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f90f 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 8007248:	e01c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6859      	ldr	r1, [r3, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	461a      	mov	r2, r3
 8007258:	f000 f8a8 	bl	80073ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2140      	movs	r1, #64	; 0x40
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f8ff 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 8007268:	e00c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f000 f8f6 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 800727a:	e003      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	e000      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr
	...

080072e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a29      	ldr	r2, [pc, #164]	; (80073a0 <TIM_Base_SetConfig+0xb8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00b      	beq.n	8007318 <TIM_Base_SetConfig+0x30>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007306:	d007      	beq.n	8007318 <TIM_Base_SetConfig+0x30>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a26      	ldr	r2, [pc, #152]	; (80073a4 <TIM_Base_SetConfig+0xbc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_Base_SetConfig+0x30>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a25      	ldr	r2, [pc, #148]	; (80073a8 <TIM_Base_SetConfig+0xc0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d108      	bne.n	800732a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <TIM_Base_SetConfig+0xb8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_Base_SetConfig+0x62>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007338:	d007      	beq.n	800734a <TIM_Base_SetConfig+0x62>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <TIM_Base_SetConfig+0xbc>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_Base_SetConfig+0x62>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <TIM_Base_SetConfig+0xc0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a07      	ldr	r2, [pc, #28]	; (80073a0 <TIM_Base_SetConfig+0xb8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d103      	bne.n	8007390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	615a      	str	r2, [r3, #20]
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800

080073ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	f023 0201 	bic.w	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f023 030a 	bic.w	r3, r3, #10
 80073e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	bc80      	pop	{r7}
 8007406:	4770      	bx	lr

08007408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0210 	bic.w	r2, r3, #16
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	031b      	lsls	r3, r3, #12
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007444:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	621a      	str	r2, [r3, #32]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr

08007466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	f043 0307 	orr.w	r3, r3, #7
 8007488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	609a      	str	r2, [r3, #8]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	bc80      	pop	{r7}
 8007498:	4770      	bx	lr

0800749a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800749a:	b480      	push	{r7}
 800749c:	b087      	sub	sp, #28
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	021a      	lsls	r2, r3, #8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	431a      	orrs	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	609a      	str	r2, [r3, #8]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e046      	b.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a16      	ldr	r2, [pc, #88]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00e      	beq.n	8007552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753c:	d009      	beq.n	8007552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a12      	ldr	r2, [pc, #72]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a10      	ldr	r2, [pc, #64]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d10c      	bne.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4313      	orrs	r3, r2
 8007562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr
 8007588:	40012c00 	.word	0x40012c00
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800

08007594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e042      	b.n	8007650 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fb f9ac 	bl	800293c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2224      	movs	r2, #36	; 0x24
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f893 	bl	8008728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695a      	ldr	r2, [r3, #20]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b20      	cmp	r3, #32
 8007676:	d16d      	bne.n	8007754 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_UART_Transmit+0x2c>
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e066      	b.n	8007756 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2221      	movs	r2, #33	; 0x21
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007696:	f7fb fc5f 	bl	8002f58 <HAL_GetTick>
 800769a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b0:	d108      	bne.n	80076c4 <HAL_UART_Transmit+0x6c>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	e003      	b.n	80076cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076cc:	e02a      	b.n	8007724 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2180      	movs	r1, #128	; 0x80
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fd5b 	bl	8008194 <UART_WaitOnFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e036      	b.n	8007756 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	3302      	adds	r3, #2
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e007      	b.n	8007716 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	781a      	ldrb	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	3301      	adds	r3, #1
 8007714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1cf      	bne.n	80076ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2200      	movs	r2, #0
 8007736:	2140      	movs	r1, #64	; 0x40
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fd2b 	bl	8008194 <UART_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e006      	b.n	8007756 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	e000      	b.n	8007756 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007754:	2302      	movs	r3, #2
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	4613      	mov	r3, r2
 800776a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b20      	cmp	r3, #32
 8007776:	d121      	bne.n	80077bc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_UART_Transmit_IT+0x26>
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e01a      	b.n	80077be <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	88fa      	ldrh	r2, [r7, #6]
 8007792:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2221      	movs	r2, #33	; 0x21
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077b6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr

080077c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08c      	sub	sp, #48	; 0x30
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d156      	bne.n	8007890 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_UART_Transmit_DMA+0x26>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e04f      	b.n	8007892 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	88fa      	ldrh	r2, [r7, #6]
 8007802:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2221      	movs	r2, #33	; 0x21
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	4a21      	ldr	r2, [pc, #132]	; (800789c <HAL_UART_Transmit_DMA+0xd4>)
 8007818:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	4a20      	ldr	r2, [pc, #128]	; (80078a0 <HAL_UART_Transmit_DMA+0xd8>)
 8007820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <HAL_UART_Transmit_DMA+0xdc>)
 8007828:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	2200      	movs	r2, #0
 8007830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3304      	adds	r3, #4
 8007846:	461a      	mov	r2, r3
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	f7fb fcf7 	bl	800323c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007856:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	617b      	str	r3, [r7, #20]
   return(result);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3314      	adds	r3, #20
 8007876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007878:	627a      	str	r2, [r7, #36]	; 0x24
 800787a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6a39      	ldr	r1, [r7, #32]
 800787e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	61fb      	str	r3, [r7, #28]
   return(result);
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	e000      	b.n	8007892 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007890:	2302      	movs	r3, #2
  }
}
 8007892:	4618      	mov	r0, r3
 8007894:	3730      	adds	r7, #48	; 0x30
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	08007ee3 	.word	0x08007ee3
 80078a0:	08007f7d 	.word	0x08007f7d
 80078a4:	08008101 	.word	0x08008101

080078a8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08c      	sub	sp, #48	; 0x30
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d14a      	bne.n	8007958 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e043      	b.n	800795a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	461a      	mov	r2, r3
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 fcc3 	bl	8008270 <UART_Start_Receive_DMA>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80078f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d12c      	bne.n	8007952 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d125      	bne.n	800794c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007900:	2300      	movs	r3, #0
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	617b      	str	r3, [r7, #20]
   return(result);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f043 0310 	orr.w	r3, r3, #16
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	330c      	adds	r3, #12
 8007934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007936:	627a      	str	r2, [r7, #36]	; 0x24
 8007938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6a39      	ldr	r1, [r7, #32]
 800793c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	61fb      	str	r3, [r7, #28]
   return(result);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e5      	bne.n	8007916 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800794a:	e002      	b.n	8007952 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007956:	e000      	b.n	800795a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007958:	2302      	movs	r3, #2
  }
}
 800795a:	4618      	mov	r0, r3
 800795c:	3730      	adds	r7, #48	; 0x30
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b0ba      	sub	sp, #232	; 0xe8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800798a:	2300      	movs	r3, #0
 800798c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007990:	2300      	movs	r3, #0
 8007992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10f      	bne.n	80079ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ae:	f003 0320 	and.w	r3, r3, #32
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_UART_IRQHandler+0x66>
 80079b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fdf2 	bl	80085ac <UART_Receive_IT>
      return;
 80079c8:	e25b      	b.n	8007e82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80de 	beq.w	8007b90 <HAL_UART_IRQHandler+0x22c>
 80079d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d106      	bne.n	80079ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80d1 	beq.w	8007b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <HAL_UART_IRQHandler+0xae>
 80079fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0a:	f043 0201 	orr.w	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <HAL_UART_IRQHandler+0xd2>
 8007a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	f043 0202 	orr.w	r2, r3, #2
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <HAL_UART_IRQHandler+0xf6>
 8007a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	f043 0204 	orr.w	r2, r3, #4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d011      	beq.n	8007a8a <HAL_UART_IRQHandler+0x126>
 8007a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	f043 0208 	orr.w	r2, r3, #8
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 81f2 	beq.w	8007e78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a98:	f003 0320 	and.w	r3, r3, #32
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d008      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x14e>
 8007aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fd7d 	bl	80085ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <HAL_UART_IRQHandler+0x17a>
 8007ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d04f      	beq.n	8007b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fc87 	bl	80083f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d041      	beq.n	8007b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3314      	adds	r3, #20
 8007af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3314      	adds	r3, #20
 8007b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1d9      	bne.n	8007af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d013      	beq.n	8007b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4a:	4a7e      	ldr	r2, [pc, #504]	; (8007d44 <HAL_UART_IRQHandler+0x3e0>)
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fb fc0e 	bl	8003374 <HAL_DMA_Abort_IT>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d016      	beq.n	8007b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6c:	e00e      	b.n	8007b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9ae 	bl	8007ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b74:	e00a      	b.n	8007b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f9aa 	bl	8007ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	e006      	b.n	8007b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f9a6 	bl	8007ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007b8a:	e175      	b.n	8007e78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8c:	bf00      	nop
    return;
 8007b8e:	e173      	b.n	8007e78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	f040 814f 	bne.w	8007e38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 8148 	beq.w	8007e38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8141 	beq.w	8007e38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60bb      	str	r3, [r7, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60bb      	str	r3, [r7, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 80b6 	beq.w	8007d48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8145 	beq.w	8007e7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	f080 813e 	bcs.w	8007e7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	f000 8088 	beq.w	8007d24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	330c      	adds	r3, #12
 8007c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1d9      	bne.n	8007c14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e1      	bne.n	8007c60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3314      	adds	r3, #20
 8007cbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e3      	bne.n	8007c9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf4:	f023 0310 	bic.w	r3, r3, #16
 8007cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	330c      	adds	r3, #12
 8007d02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d06:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e3      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fb faec 	bl	80032fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fa fa40 	bl	80021c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d40:	e09c      	b.n	8007e7c <HAL_UART_IRQHandler+0x518>
 8007d42:	bf00      	nop
 8007d44:	080084b7 	.word	0x080084b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 808e 	beq.w	8007e80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8089 	beq.w	8007e80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	330c      	adds	r3, #12
 8007d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d92:	647a      	str	r2, [r7, #68]	; 0x44
 8007d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e3      	bne.n	8007d6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3314      	adds	r3, #20
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	623b      	str	r3, [r7, #32]
   return(result);
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3314      	adds	r3, #20
 8007dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dca:	633a      	str	r2, [r7, #48]	; 0x30
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e3      	bne.n	8007da6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	330c      	adds	r3, #12
 8007df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0310 	bic.w	r3, r3, #16
 8007e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e10:	61fa      	str	r2, [r7, #28]
 8007e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	69b9      	ldr	r1, [r7, #24]
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e3      	bne.n	8007dec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fa f9c5 	bl	80021c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e36:	e023      	b.n	8007e80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d009      	beq.n	8007e58 <HAL_UART_IRQHandler+0x4f4>
 8007e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb44 	bl	80084de <UART_Transmit_IT>
    return;
 8007e56:	e014      	b.n	8007e82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00e      	beq.n	8007e82 <HAL_UART_IRQHandler+0x51e>
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d008      	beq.n	8007e82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fb83 	bl	800857c <UART_EndTransmit_IT>
    return;
 8007e76:	e004      	b.n	8007e82 <HAL_UART_IRQHandler+0x51e>
    return;
 8007e78:	bf00      	nop
 8007e7a:	e002      	b.n	8007e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e7c:	bf00      	nop
 8007e7e:	e000      	b.n	8007e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e80:	bf00      	nop
  }
}
 8007e82:	37e8      	adds	r7, #232	; 0xe8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bc80      	pop	{r7}
 8007e98:	4770      	bx	lr

08007e9a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr

08007eac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bc80      	pop	{r7}
 8007ebc:	4770      	bx	lr

08007ebe <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b090      	sub	sp, #64	; 0x40
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d137      	bne.n	8007f6e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f00:	2200      	movs	r2, #0
 8007f02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3314      	adds	r3, #20
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	623b      	str	r3, [r7, #32]
   return(result);
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3314      	adds	r3, #20
 8007f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f24:	633a      	str	r2, [r7, #48]	; 0x30
 8007f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e5      	bne.n	8007f04 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	330c      	adds	r3, #12
 8007f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	330c      	adds	r3, #12
 8007f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f58:	61fa      	str	r2, [r7, #28]
 8007f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	69b9      	ldr	r1, [r7, #24]
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	617b      	str	r3, [r7, #20]
   return(result);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e5      	bne.n	8007f38 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f6c:	e002      	b.n	8007f74 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007f6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f70:	f7ff ff8a 	bl	8007e88 <HAL_UART_TxCpltCallback>
}
 8007f74:	bf00      	nop
 8007f76:	3740      	adds	r7, #64	; 0x40
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff ff85 	bl	8007e9a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b09c      	sub	sp, #112	; 0x70
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d172      	bne.n	800809a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	330c      	adds	r3, #12
 8007fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fda:	65ba      	str	r2, [r7, #88]	; 0x58
 8007fdc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e5      	bne.n	8007fba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	667b      	str	r3, [r7, #100]	; 0x64
 8008006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3314      	adds	r3, #20
 800800c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800800e:	647a      	str	r2, [r7, #68]	; 0x44
 8008010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800801c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e5      	bne.n	8007fee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3314      	adds	r3, #20
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	623b      	str	r3, [r7, #32]
   return(result);
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	663b      	str	r3, [r7, #96]	; 0x60
 800803a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3314      	adds	r3, #20
 8008040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008042:	633a      	str	r2, [r7, #48]	; 0x30
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e5      	bne.n	8008022 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008058:	2220      	movs	r2, #32
 800805a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	2b01      	cmp	r3, #1
 8008064:	d119      	bne.n	800809a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	330c      	adds	r3, #12
 800806c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	60fb      	str	r3, [r7, #12]
   return(result);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f023 0310 	bic.w	r3, r3, #16
 800807c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800807e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	330c      	adds	r3, #12
 8008084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008086:	61fa      	str	r2, [r7, #28]
 8008088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	69b9      	ldr	r1, [r7, #24]
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	617b      	str	r3, [r7, #20]
   return(result);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800809a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809c:	2200      	movs	r2, #0
 800809e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d106      	bne.n	80080b6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ac:	4619      	mov	r1, r3
 80080ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080b0:	f7fa f886 	bl	80021c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080b4:	e002      	b.n	80080bc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80080b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080b8:	f7ff fef8 	bl	8007eac <HAL_UART_RxCpltCallback>
}
 80080bc:	bf00      	nop
 80080be:	3770      	adds	r7, #112	; 0x70
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d108      	bne.n	80080f2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080e4:	085b      	lsrs	r3, r3, #1
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4619      	mov	r1, r3
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7fa f868 	bl	80021c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080f0:	e002      	b.n	80080f8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff fee3 	bl	8007ebe <HAL_UART_RxHalfCpltCallback>
}
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811c:	2b00      	cmp	r3, #0
 800811e:	bf14      	ite	ne
 8008120:	2301      	movne	r3, #1
 8008122:	2300      	moveq	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b21      	cmp	r3, #33	; 0x21
 8008132:	d108      	bne.n	8008146 <UART_DMAError+0x46>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2200      	movs	r2, #0
 800813e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008140:	68b8      	ldr	r0, [r7, #8]
 8008142:	f000 f92f 	bl	80083a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	bf14      	ite	ne
 8008154:	2301      	movne	r3, #1
 8008156:	2300      	moveq	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b22      	cmp	r3, #34	; 0x22
 8008166:	d108      	bne.n	800817a <UART_DMAError+0x7a>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2200      	movs	r2, #0
 8008172:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008174:	68b8      	ldr	r0, [r7, #8]
 8008176:	f000 f93c 	bl	80083f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	f043 0210 	orr.w	r2, r3, #16
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008186:	68b8      	ldr	r0, [r7, #8]
 8008188:	f7ff fea2 	bl	8007ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b090      	sub	sp, #64	; 0x40
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	4613      	mov	r3, r2
 80081a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a4:	e050      	b.n	8008248 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d04c      	beq.n	8008248 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80081b4:	f7fa fed0 	bl	8002f58 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d241      	bcs.n	8008248 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	330c      	adds	r3, #12
 80081ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	330c      	adds	r3, #12
 80081e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081e4:	637a      	str	r2, [r7, #52]	; 0x34
 80081e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e5      	bne.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3314      	adds	r3, #20
 80081fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	613b      	str	r3, [r7, #16]
   return(result);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3314      	adds	r3, #20
 8008216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008218:	623a      	str	r2, [r7, #32]
 800821a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	69f9      	ldr	r1, [r7, #28]
 800821e:	6a3a      	ldr	r2, [r7, #32]
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	61bb      	str	r3, [r7, #24]
   return(result);
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e5      	bne.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2220      	movs	r2, #32
 8008238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e00f      	b.n	8008268 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4013      	ands	r3, r2
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	429a      	cmp	r2, r3
 8008256:	bf0c      	ite	eq
 8008258:	2301      	moveq	r3, #1
 800825a:	2300      	movne	r3, #0
 800825c:	b2db      	uxtb	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	429a      	cmp	r2, r3
 8008264:	d09f      	beq.n	80081a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3740      	adds	r7, #64	; 0x40
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b098      	sub	sp, #96	; 0x60
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	88fa      	ldrh	r2, [r7, #6]
 8008288:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2222      	movs	r2, #34	; 0x22
 8008294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829c:	4a3e      	ldr	r2, [pc, #248]	; (8008398 <UART_Start_Receive_DMA+0x128>)
 800829e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a4:	4a3d      	ldr	r2, [pc, #244]	; (800839c <UART_Start_Receive_DMA+0x12c>)
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ac:	4a3c      	ldr	r2, [pc, #240]	; (80083a0 <UART_Start_Receive_DMA+0x130>)
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b4:	2200      	movs	r2, #0
 80082b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80082b8:	f107 0308 	add.w	r3, r7, #8
 80082bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	f7fa ffb4 	bl	800323c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	613b      	str	r3, [r7, #16]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d019      	beq.n	8008326 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	330c      	adds	r3, #12
 80082f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008308:	65bb      	str	r3, [r7, #88]	; 0x58
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	330c      	adds	r3, #12
 8008310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008312:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008314:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e5      	bne.n	80082f2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3314      	adds	r3, #20
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	f043 0301 	orr.w	r3, r3, #1
 800833c:	657b      	str	r3, [r7, #84]	; 0x54
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3314      	adds	r3, #20
 8008344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008346:	63ba      	str	r2, [r7, #56]	; 0x38
 8008348:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800834c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e5      	bne.n	8008326 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	617b      	str	r3, [r7, #20]
   return(result);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008370:	653b      	str	r3, [r7, #80]	; 0x50
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3314      	adds	r3, #20
 8008378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800837a:	627a      	str	r2, [r7, #36]	; 0x24
 800837c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6a39      	ldr	r1, [r7, #32]
 8008380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	61fb      	str	r3, [r7, #28]
   return(result);
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e5      	bne.n	800835a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3760      	adds	r7, #96	; 0x60
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	08007f99 	.word	0x08007f99
 800839c:	080080c5 	.word	0x080080c5
 80083a0:	08008101 	.word	0x08008101

080083a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b089      	sub	sp, #36	; 0x24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330c      	adds	r3, #12
 80083b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	61ba      	str	r2, [r7, #24]
 80083ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	613b      	str	r3, [r7, #16]
   return(result);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e5      	bne.n	80083ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80083e8:	bf00      	nop
 80083ea:	3724      	adds	r7, #36	; 0x24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr

080083f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b095      	sub	sp, #84	; 0x54
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330c      	adds	r3, #12
 8008418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800841a:	643a      	str	r2, [r7, #64]	; 0x40
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3314      	adds	r3, #20
 8008434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	61fb      	str	r3, [r7, #28]
   return(result);
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	f023 0301 	bic.w	r3, r3, #1
 8008444:	64bb      	str	r3, [r7, #72]	; 0x48
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3314      	adds	r3, #20
 800844c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e5      	bne.n	800842e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	2b01      	cmp	r3, #1
 8008468:	d119      	bne.n	800849e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	330c      	adds	r3, #12
 8008470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	60bb      	str	r3, [r7, #8]
   return(result);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f023 0310 	bic.w	r3, r3, #16
 8008480:	647b      	str	r3, [r7, #68]	; 0x44
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	330c      	adds	r3, #12
 8008488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800848a:	61ba      	str	r2, [r7, #24]
 800848c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6979      	ldr	r1, [r7, #20]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	613b      	str	r3, [r7, #16]
   return(result);
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e5      	bne.n	800846a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084ac:	bf00      	nop
 80084ae:	3754      	adds	r7, #84	; 0x54
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fcfd 	bl	8007ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084de:	b480      	push	{r7}
 80084e0:	b085      	sub	sp, #20
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b21      	cmp	r3, #33	; 0x21
 80084f0:	d13e      	bne.n	8008570 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fa:	d114      	bne.n	8008526 <UART_Transmit_IT+0x48>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d110      	bne.n	8008526 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008518:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	1c9a      	adds	r2, r3, #2
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	621a      	str	r2, [r3, #32]
 8008524:	e008      	b.n	8008538 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	1c59      	adds	r1, r3, #1
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6211      	str	r1, [r2, #32]
 8008530:	781a      	ldrb	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29b      	uxth	r3, r3
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	4619      	mov	r1, r3
 8008546:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10f      	bne.n	800856c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800855a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	e000      	b.n	8008572 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008570:	2302      	movs	r3, #2
  }
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr

0800857c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008592:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fc73 	bl	8007e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08c      	sub	sp, #48	; 0x30
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b22      	cmp	r3, #34	; 0x22
 80085be:	f040 80ae 	bne.w	800871e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ca:	d117      	bne.n	80085fc <UART_Receive_IT+0x50>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d113      	bne.n	80085fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	629a      	str	r2, [r3, #40]	; 0x28
 80085fa:	e026      	b.n	800864a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008602:	2300      	movs	r3, #0
 8008604:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860e:	d007      	beq.n	8008620 <UART_Receive_IT+0x74>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <UART_Receive_IT+0x82>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	701a      	strb	r2, [r3, #0]
 800862c:	e008      	b.n	8008640 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863a:	b2da      	uxtb	r2, r3
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29b      	uxth	r3, r3
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4619      	mov	r1, r3
 8008658:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800865a:	2b00      	cmp	r3, #0
 800865c:	d15d      	bne.n	800871a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0220 	bic.w	r2, r2, #32
 800866c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800867c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695a      	ldr	r2, [r3, #20]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 0201 	bic.w	r2, r2, #1
 800868c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2220      	movs	r2, #32
 8008692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d135      	bne.n	8008710 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	330c      	adds	r3, #12
 80086b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	613b      	str	r3, [r7, #16]
   return(result);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f023 0310 	bic.w	r3, r3, #16
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	330c      	adds	r3, #12
 80086c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ca:	623a      	str	r2, [r7, #32]
 80086cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	69f9      	ldr	r1, [r7, #28]
 80086d0:	6a3a      	ldr	r2, [r7, #32]
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e5      	bne.n	80086aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b10      	cmp	r3, #16
 80086ea:	d10a      	bne.n	8008702 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7f9 fd59 	bl	80021c0 <HAL_UARTEx_RxEventCallback>
 800870e:	e002      	b.n	8008716 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff fbcb 	bl	8007eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	e002      	b.n	8008720 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	e000      	b.n	8008720 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800871e:	2302      	movs	r3, #2
  }
}
 8008720:	4618      	mov	r0, r3
 8008722:	3730      	adds	r7, #48	; 0x30
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	4313      	orrs	r3, r2
 8008756:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008762:	f023 030c 	bic.w	r3, r3, #12
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	430b      	orrs	r3, r1
 800876e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a2c      	ldr	r2, [pc, #176]	; (800883c <UART_SetConfig+0x114>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d103      	bne.n	8008798 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008790:	f7fe fae2 	bl	8006d58 <HAL_RCC_GetPCLK2Freq>
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	e002      	b.n	800879e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008798:	f7fe faca 	bl	8006d30 <HAL_RCC_GetPCLK1Freq>
 800879c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009a      	lsls	r2, r3, #2
 80087a8:	441a      	add	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	4a22      	ldr	r2, [pc, #136]	; (8008840 <UART_SetConfig+0x118>)
 80087b6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	0119      	lsls	r1, r3, #4
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009a      	lsls	r2, r3, #2
 80087c8:	441a      	add	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80087d4:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <UART_SetConfig+0x118>)
 80087d6:	fba3 0302 	umull	r0, r3, r3, r2
 80087da:	095b      	lsrs	r3, r3, #5
 80087dc:	2064      	movs	r0, #100	; 0x64
 80087de:	fb00 f303 	mul.w	r3, r0, r3
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	011b      	lsls	r3, r3, #4
 80087e6:	3332      	adds	r3, #50	; 0x32
 80087e8:	4a15      	ldr	r2, [pc, #84]	; (8008840 <UART_SetConfig+0x118>)
 80087ea:	fba2 2303 	umull	r2, r3, r2, r3
 80087ee:	095b      	lsrs	r3, r3, #5
 80087f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087f4:	4419      	add	r1, r3
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009a      	lsls	r2, r3, #2
 8008800:	441a      	add	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	fbb2 f2f3 	udiv	r2, r2, r3
 800880c:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <UART_SetConfig+0x118>)
 800880e:	fba3 0302 	umull	r0, r3, r3, r2
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	2064      	movs	r0, #100	; 0x64
 8008816:	fb00 f303 	mul.w	r3, r0, r3
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	3332      	adds	r3, #50	; 0x32
 8008820:	4a07      	ldr	r2, [pc, #28]	; (8008840 <UART_SetConfig+0x118>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	095b      	lsrs	r3, r3, #5
 8008828:	f003 020f 	and.w	r2, r3, #15
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	440a      	add	r2, r1
 8008832:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	40013800 	.word	0x40013800
 8008840:	51eb851f 	.word	0x51eb851f

08008844 <__errno>:
 8008844:	4b01      	ldr	r3, [pc, #4]	; (800884c <__errno+0x8>)
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	20000010 	.word	0x20000010

08008850 <__libc_init_array>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	2600      	movs	r6, #0
 8008854:	4d0c      	ldr	r5, [pc, #48]	; (8008888 <__libc_init_array+0x38>)
 8008856:	4c0d      	ldr	r4, [pc, #52]	; (800888c <__libc_init_array+0x3c>)
 8008858:	1b64      	subs	r4, r4, r5
 800885a:	10a4      	asrs	r4, r4, #2
 800885c:	42a6      	cmp	r6, r4
 800885e:	d109      	bne.n	8008874 <__libc_init_array+0x24>
 8008860:	f004 fc28 	bl	800d0b4 <_init>
 8008864:	2600      	movs	r6, #0
 8008866:	4d0a      	ldr	r5, [pc, #40]	; (8008890 <__libc_init_array+0x40>)
 8008868:	4c0a      	ldr	r4, [pc, #40]	; (8008894 <__libc_init_array+0x44>)
 800886a:	1b64      	subs	r4, r4, r5
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	42a6      	cmp	r6, r4
 8008870:	d105      	bne.n	800887e <__libc_init_array+0x2e>
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	f855 3b04 	ldr.w	r3, [r5], #4
 8008878:	4798      	blx	r3
 800887a:	3601      	adds	r6, #1
 800887c:	e7ee      	b.n	800885c <__libc_init_array+0xc>
 800887e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008882:	4798      	blx	r3
 8008884:	3601      	adds	r6, #1
 8008886:	e7f2      	b.n	800886e <__libc_init_array+0x1e>
 8008888:	0800d6fc 	.word	0x0800d6fc
 800888c:	0800d6fc 	.word	0x0800d6fc
 8008890:	0800d6fc 	.word	0x0800d6fc
 8008894:	0800d700 	.word	0x0800d700

08008898 <memset>:
 8008898:	4603      	mov	r3, r0
 800889a:	4402      	add	r2, r0
 800889c:	4293      	cmp	r3, r2
 800889e:	d100      	bne.n	80088a2 <memset+0xa>
 80088a0:	4770      	bx	lr
 80088a2:	f803 1b01 	strb.w	r1, [r3], #1
 80088a6:	e7f9      	b.n	800889c <memset+0x4>

080088a8 <__cvt>:
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ae:	461f      	mov	r7, r3
 80088b0:	bfbb      	ittet	lt
 80088b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80088b6:	461f      	movlt	r7, r3
 80088b8:	2300      	movge	r3, #0
 80088ba:	232d      	movlt	r3, #45	; 0x2d
 80088bc:	b088      	sub	sp, #32
 80088be:	4614      	mov	r4, r2
 80088c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80088c4:	7013      	strb	r3, [r2, #0]
 80088c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80088cc:	f023 0820 	bic.w	r8, r3, #32
 80088d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088d4:	d005      	beq.n	80088e2 <__cvt+0x3a>
 80088d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088da:	d100      	bne.n	80088de <__cvt+0x36>
 80088dc:	3501      	adds	r5, #1
 80088de:	2302      	movs	r3, #2
 80088e0:	e000      	b.n	80088e4 <__cvt+0x3c>
 80088e2:	2303      	movs	r3, #3
 80088e4:	aa07      	add	r2, sp, #28
 80088e6:	9204      	str	r2, [sp, #16]
 80088e8:	aa06      	add	r2, sp, #24
 80088ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80088ee:	e9cd 3500 	strd	r3, r5, [sp]
 80088f2:	4622      	mov	r2, r4
 80088f4:	463b      	mov	r3, r7
 80088f6:	f001 fd9f 	bl	800a438 <_dtoa_r>
 80088fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088fe:	4606      	mov	r6, r0
 8008900:	d102      	bne.n	8008908 <__cvt+0x60>
 8008902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008904:	07db      	lsls	r3, r3, #31
 8008906:	d522      	bpl.n	800894e <__cvt+0xa6>
 8008908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800890c:	eb06 0905 	add.w	r9, r6, r5
 8008910:	d110      	bne.n	8008934 <__cvt+0x8c>
 8008912:	7833      	ldrb	r3, [r6, #0]
 8008914:	2b30      	cmp	r3, #48	; 0x30
 8008916:	d10a      	bne.n	800892e <__cvt+0x86>
 8008918:	2200      	movs	r2, #0
 800891a:	2300      	movs	r3, #0
 800891c:	4620      	mov	r0, r4
 800891e:	4639      	mov	r1, r7
 8008920:	f7f8 f842 	bl	80009a8 <__aeabi_dcmpeq>
 8008924:	b918      	cbnz	r0, 800892e <__cvt+0x86>
 8008926:	f1c5 0501 	rsb	r5, r5, #1
 800892a:	f8ca 5000 	str.w	r5, [sl]
 800892e:	f8da 3000 	ldr.w	r3, [sl]
 8008932:	4499      	add	r9, r3
 8008934:	2200      	movs	r2, #0
 8008936:	2300      	movs	r3, #0
 8008938:	4620      	mov	r0, r4
 800893a:	4639      	mov	r1, r7
 800893c:	f7f8 f834 	bl	80009a8 <__aeabi_dcmpeq>
 8008940:	b108      	cbz	r0, 8008946 <__cvt+0x9e>
 8008942:	f8cd 901c 	str.w	r9, [sp, #28]
 8008946:	2230      	movs	r2, #48	; 0x30
 8008948:	9b07      	ldr	r3, [sp, #28]
 800894a:	454b      	cmp	r3, r9
 800894c:	d307      	bcc.n	800895e <__cvt+0xb6>
 800894e:	4630      	mov	r0, r6
 8008950:	9b07      	ldr	r3, [sp, #28]
 8008952:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008954:	1b9b      	subs	r3, r3, r6
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	b008      	add	sp, #32
 800895a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895e:	1c59      	adds	r1, r3, #1
 8008960:	9107      	str	r1, [sp, #28]
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	e7f0      	b.n	8008948 <__cvt+0xa0>

08008966 <__exponent>:
 8008966:	4603      	mov	r3, r0
 8008968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800896a:	2900      	cmp	r1, #0
 800896c:	f803 2b02 	strb.w	r2, [r3], #2
 8008970:	bfb6      	itet	lt
 8008972:	222d      	movlt	r2, #45	; 0x2d
 8008974:	222b      	movge	r2, #43	; 0x2b
 8008976:	4249      	neglt	r1, r1
 8008978:	2909      	cmp	r1, #9
 800897a:	7042      	strb	r2, [r0, #1]
 800897c:	dd2b      	ble.n	80089d6 <__exponent+0x70>
 800897e:	f10d 0407 	add.w	r4, sp, #7
 8008982:	46a4      	mov	ip, r4
 8008984:	270a      	movs	r7, #10
 8008986:	fb91 f6f7 	sdiv	r6, r1, r7
 800898a:	460a      	mov	r2, r1
 800898c:	46a6      	mov	lr, r4
 800898e:	fb07 1516 	mls	r5, r7, r6, r1
 8008992:	2a63      	cmp	r2, #99	; 0x63
 8008994:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008998:	4631      	mov	r1, r6
 800899a:	f104 34ff 	add.w	r4, r4, #4294967295
 800899e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089a2:	dcf0      	bgt.n	8008986 <__exponent+0x20>
 80089a4:	3130      	adds	r1, #48	; 0x30
 80089a6:	f1ae 0502 	sub.w	r5, lr, #2
 80089aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089ae:	4629      	mov	r1, r5
 80089b0:	1c44      	adds	r4, r0, #1
 80089b2:	4561      	cmp	r1, ip
 80089b4:	d30a      	bcc.n	80089cc <__exponent+0x66>
 80089b6:	f10d 0209 	add.w	r2, sp, #9
 80089ba:	eba2 020e 	sub.w	r2, r2, lr
 80089be:	4565      	cmp	r5, ip
 80089c0:	bf88      	it	hi
 80089c2:	2200      	movhi	r2, #0
 80089c4:	4413      	add	r3, r2
 80089c6:	1a18      	subs	r0, r3, r0
 80089c8:	b003      	add	sp, #12
 80089ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089d4:	e7ed      	b.n	80089b2 <__exponent+0x4c>
 80089d6:	2330      	movs	r3, #48	; 0x30
 80089d8:	3130      	adds	r1, #48	; 0x30
 80089da:	7083      	strb	r3, [r0, #2]
 80089dc:	70c1      	strb	r1, [r0, #3]
 80089de:	1d03      	adds	r3, r0, #4
 80089e0:	e7f1      	b.n	80089c6 <__exponent+0x60>
	...

080089e4 <_printf_float>:
 80089e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	b091      	sub	sp, #68	; 0x44
 80089ea:	460c      	mov	r4, r1
 80089ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80089f0:	4616      	mov	r6, r2
 80089f2:	461f      	mov	r7, r3
 80089f4:	4605      	mov	r5, r0
 80089f6:	f002 fe73 	bl	800b6e0 <_localeconv_r>
 80089fa:	6803      	ldr	r3, [r0, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008a00:	f7f7 fba6 	bl	8000150 <strlen>
 8008a04:	2300      	movs	r3, #0
 8008a06:	930e      	str	r3, [sp, #56]	; 0x38
 8008a08:	f8d8 3000 	ldr.w	r3, [r8]
 8008a0c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a0e:	3307      	adds	r3, #7
 8008a10:	f023 0307 	bic.w	r3, r3, #7
 8008a14:	f103 0208 	add.w	r2, r3, #8
 8008a18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a1c:	f8d4 b000 	ldr.w	fp, [r4]
 8008a20:	f8c8 2000 	str.w	r2, [r8]
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a2c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008a30:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a36:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	4b9c      	ldr	r3, [pc, #624]	; (8008cb0 <_printf_float+0x2cc>)
 8008a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a40:	f7f7 ffe4 	bl	8000a0c <__aeabi_dcmpun>
 8008a44:	bb70      	cbnz	r0, 8008aa4 <_printf_float+0xc0>
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4b98      	ldr	r3, [pc, #608]	; (8008cb0 <_printf_float+0x2cc>)
 8008a4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a50:	f7f7 ffbe 	bl	80009d0 <__aeabi_dcmple>
 8008a54:	bb30      	cbnz	r0, 8008aa4 <_printf_float+0xc0>
 8008a56:	2200      	movs	r2, #0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4651      	mov	r1, sl
 8008a5e:	f7f7 ffad 	bl	80009bc <__aeabi_dcmplt>
 8008a62:	b110      	cbz	r0, 8008a6a <_printf_float+0x86>
 8008a64:	232d      	movs	r3, #45	; 0x2d
 8008a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a6a:	4b92      	ldr	r3, [pc, #584]	; (8008cb4 <_printf_float+0x2d0>)
 8008a6c:	4892      	ldr	r0, [pc, #584]	; (8008cb8 <_printf_float+0x2d4>)
 8008a6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a72:	bf94      	ite	ls
 8008a74:	4698      	movls	r8, r3
 8008a76:	4680      	movhi	r8, r0
 8008a78:	2303      	movs	r3, #3
 8008a7a:	f04f 0a00 	mov.w	sl, #0
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	f02b 0304 	bic.w	r3, fp, #4
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	4633      	mov	r3, r6
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	9700      	str	r7, [sp, #0]
 8008a8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008a90:	f000 f9d4 	bl	8008e3c <_printf_common>
 8008a94:	3001      	adds	r0, #1
 8008a96:	f040 8090 	bne.w	8008bba <_printf_float+0x1d6>
 8008a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9e:	b011      	add	sp, #68	; 0x44
 8008aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa4:	4642      	mov	r2, r8
 8008aa6:	4653      	mov	r3, sl
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	4651      	mov	r1, sl
 8008aac:	f7f7 ffae 	bl	8000a0c <__aeabi_dcmpun>
 8008ab0:	b148      	cbz	r0, 8008ac6 <_printf_float+0xe2>
 8008ab2:	f1ba 0f00 	cmp.w	sl, #0
 8008ab6:	bfb8      	it	lt
 8008ab8:	232d      	movlt	r3, #45	; 0x2d
 8008aba:	4880      	ldr	r0, [pc, #512]	; (8008cbc <_printf_float+0x2d8>)
 8008abc:	bfb8      	it	lt
 8008abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ac2:	4b7f      	ldr	r3, [pc, #508]	; (8008cc0 <_printf_float+0x2dc>)
 8008ac4:	e7d3      	b.n	8008a6e <_printf_float+0x8a>
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	d142      	bne.n	8008b56 <_printf_float+0x172>
 8008ad0:	2306      	movs	r3, #6
 8008ad2:	6063      	str	r3, [r4, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	9206      	str	r2, [sp, #24]
 8008ad8:	aa0e      	add	r2, sp, #56	; 0x38
 8008ada:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008ade:	aa0d      	add	r2, sp, #52	; 0x34
 8008ae0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008ae4:	9203      	str	r2, [sp, #12]
 8008ae6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008aea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	4642      	mov	r2, r8
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4628      	mov	r0, r5
 8008af8:	4653      	mov	r3, sl
 8008afa:	910b      	str	r1, [sp, #44]	; 0x2c
 8008afc:	f7ff fed4 	bl	80088a8 <__cvt>
 8008b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b02:	4680      	mov	r8, r0
 8008b04:	2947      	cmp	r1, #71	; 0x47
 8008b06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b08:	d108      	bne.n	8008b1c <_printf_float+0x138>
 8008b0a:	1cc8      	adds	r0, r1, #3
 8008b0c:	db02      	blt.n	8008b14 <_printf_float+0x130>
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	4299      	cmp	r1, r3
 8008b12:	dd40      	ble.n	8008b96 <_printf_float+0x1b2>
 8008b14:	f1a9 0902 	sub.w	r9, r9, #2
 8008b18:	fa5f f989 	uxtb.w	r9, r9
 8008b1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b20:	d81f      	bhi.n	8008b62 <_printf_float+0x17e>
 8008b22:	464a      	mov	r2, r9
 8008b24:	3901      	subs	r1, #1
 8008b26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b2a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b2c:	f7ff ff1b 	bl	8008966 <__exponent>
 8008b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b32:	4682      	mov	sl, r0
 8008b34:	1813      	adds	r3, r2, r0
 8008b36:	2a01      	cmp	r2, #1
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	dc02      	bgt.n	8008b42 <_printf_float+0x15e>
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	07d2      	lsls	r2, r2, #31
 8008b40:	d501      	bpl.n	8008b46 <_printf_float+0x162>
 8008b42:	3301      	adds	r3, #1
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d09b      	beq.n	8008a86 <_printf_float+0xa2>
 8008b4e:	232d      	movs	r3, #45	; 0x2d
 8008b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b54:	e797      	b.n	8008a86 <_printf_float+0xa2>
 8008b56:	2947      	cmp	r1, #71	; 0x47
 8008b58:	d1bc      	bne.n	8008ad4 <_printf_float+0xf0>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1ba      	bne.n	8008ad4 <_printf_float+0xf0>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e7b7      	b.n	8008ad2 <_printf_float+0xee>
 8008b62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b66:	d118      	bne.n	8008b9a <_printf_float+0x1b6>
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	6863      	ldr	r3, [r4, #4]
 8008b6c:	dd0b      	ble.n	8008b86 <_printf_float+0x1a2>
 8008b6e:	6121      	str	r1, [r4, #16]
 8008b70:	b913      	cbnz	r3, 8008b78 <_printf_float+0x194>
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	07d0      	lsls	r0, r2, #31
 8008b76:	d502      	bpl.n	8008b7e <_printf_float+0x19a>
 8008b78:	3301      	adds	r3, #1
 8008b7a:	440b      	add	r3, r1
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	f04f 0a00 	mov.w	sl, #0
 8008b82:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b84:	e7df      	b.n	8008b46 <_printf_float+0x162>
 8008b86:	b913      	cbnz	r3, 8008b8e <_printf_float+0x1aa>
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	07d2      	lsls	r2, r2, #31
 8008b8c:	d501      	bpl.n	8008b92 <_printf_float+0x1ae>
 8008b8e:	3302      	adds	r3, #2
 8008b90:	e7f4      	b.n	8008b7c <_printf_float+0x198>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e7f2      	b.n	8008b7c <_printf_float+0x198>
 8008b96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b9c:	4299      	cmp	r1, r3
 8008b9e:	db05      	blt.n	8008bac <_printf_float+0x1c8>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	6121      	str	r1, [r4, #16]
 8008ba4:	07d8      	lsls	r0, r3, #31
 8008ba6:	d5ea      	bpl.n	8008b7e <_printf_float+0x19a>
 8008ba8:	1c4b      	adds	r3, r1, #1
 8008baa:	e7e7      	b.n	8008b7c <_printf_float+0x198>
 8008bac:	2900      	cmp	r1, #0
 8008bae:	bfcc      	ite	gt
 8008bb0:	2201      	movgt	r2, #1
 8008bb2:	f1c1 0202 	rsble	r2, r1, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	e7e0      	b.n	8008b7c <_printf_float+0x198>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	055a      	lsls	r2, r3, #21
 8008bbe:	d407      	bmi.n	8008bd0 <_printf_float+0x1ec>
 8008bc0:	6923      	ldr	r3, [r4, #16]
 8008bc2:	4642      	mov	r2, r8
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b8      	blx	r7
 8008bca:	3001      	adds	r0, #1
 8008bcc:	d12b      	bne.n	8008c26 <_printf_float+0x242>
 8008bce:	e764      	b.n	8008a9a <_printf_float+0xb6>
 8008bd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008bd4:	f240 80dd 	bls.w	8008d92 <_printf_float+0x3ae>
 8008bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2300      	movs	r3, #0
 8008be0:	f7f7 fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d033      	beq.n	8008c50 <_printf_float+0x26c>
 8008be8:	2301      	movs	r3, #1
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	4a35      	ldr	r2, [pc, #212]	; (8008cc4 <_printf_float+0x2e0>)
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f af51 	beq.w	8008a9a <_printf_float+0xb6>
 8008bf8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	db02      	blt.n	8008c06 <_printf_float+0x222>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	07d8      	lsls	r0, r3, #31
 8008c04:	d50f      	bpl.n	8008c26 <_printf_float+0x242>
 8008c06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b8      	blx	r7
 8008c10:	3001      	adds	r0, #1
 8008c12:	f43f af42 	beq.w	8008a9a <_printf_float+0xb6>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	f104 091a 	add.w	r9, r4, #26
 8008c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c20:	3b01      	subs	r3, #1
 8008c22:	4543      	cmp	r3, r8
 8008c24:	dc09      	bgt.n	8008c3a <_printf_float+0x256>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	079b      	lsls	r3, r3, #30
 8008c2a:	f100 8102 	bmi.w	8008e32 <_printf_float+0x44e>
 8008c2e:	68e0      	ldr	r0, [r4, #12]
 8008c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c32:	4298      	cmp	r0, r3
 8008c34:	bfb8      	it	lt
 8008c36:	4618      	movlt	r0, r3
 8008c38:	e731      	b.n	8008a9e <_printf_float+0xba>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	464a      	mov	r2, r9
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b8      	blx	r7
 8008c44:	3001      	adds	r0, #1
 8008c46:	f43f af28 	beq.w	8008a9a <_printf_float+0xb6>
 8008c4a:	f108 0801 	add.w	r8, r8, #1
 8008c4e:	e7e6      	b.n	8008c1e <_printf_float+0x23a>
 8008c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dc38      	bgt.n	8008cc8 <_printf_float+0x2e4>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	4a19      	ldr	r2, [pc, #100]	; (8008cc4 <_printf_float+0x2e0>)
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f af1a 	beq.w	8008a9a <_printf_float+0xb6>
 8008c66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	d102      	bne.n	8008c74 <_printf_float+0x290>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	07d9      	lsls	r1, r3, #31
 8008c72:	d5d8      	bpl.n	8008c26 <_printf_float+0x242>
 8008c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c78:	4631      	mov	r1, r6
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	47b8      	blx	r7
 8008c7e:	3001      	adds	r0, #1
 8008c80:	f43f af0b 	beq.w	8008a9a <_printf_float+0xb6>
 8008c84:	f04f 0900 	mov.w	r9, #0
 8008c88:	f104 0a1a 	add.w	sl, r4, #26
 8008c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c8e:	425b      	negs	r3, r3
 8008c90:	454b      	cmp	r3, r9
 8008c92:	dc01      	bgt.n	8008c98 <_printf_float+0x2b4>
 8008c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c96:	e794      	b.n	8008bc2 <_printf_float+0x1de>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b8      	blx	r7
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	f43f aef9 	beq.w	8008a9a <_printf_float+0xb6>
 8008ca8:	f109 0901 	add.w	r9, r9, #1
 8008cac:	e7ee      	b.n	8008c8c <_printf_float+0x2a8>
 8008cae:	bf00      	nop
 8008cb0:	7fefffff 	.word	0x7fefffff
 8008cb4:	0800d240 	.word	0x0800d240
 8008cb8:	0800d244 	.word	0x0800d244
 8008cbc:	0800d24c 	.word	0x0800d24c
 8008cc0:	0800d248 	.word	0x0800d248
 8008cc4:	0800d250 	.word	0x0800d250
 8008cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	bfa8      	it	ge
 8008cd0:	461a      	movge	r2, r3
 8008cd2:	2a00      	cmp	r2, #0
 8008cd4:	4691      	mov	r9, r2
 8008cd6:	dc37      	bgt.n	8008d48 <_printf_float+0x364>
 8008cd8:	f04f 0b00 	mov.w	fp, #0
 8008cdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ce0:	f104 021a 	add.w	r2, r4, #26
 8008ce4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ce8:	ebaa 0309 	sub.w	r3, sl, r9
 8008cec:	455b      	cmp	r3, fp
 8008cee:	dc33      	bgt.n	8008d58 <_printf_float+0x374>
 8008cf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	db3b      	blt.n	8008d70 <_printf_float+0x38c>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	07da      	lsls	r2, r3, #31
 8008cfc:	d438      	bmi.n	8008d70 <_printf_float+0x38c>
 8008cfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d02:	eba2 030a 	sub.w	r3, r2, sl
 8008d06:	eba2 0901 	sub.w	r9, r2, r1
 8008d0a:	4599      	cmp	r9, r3
 8008d0c:	bfa8      	it	ge
 8008d0e:	4699      	movge	r9, r3
 8008d10:	f1b9 0f00 	cmp.w	r9, #0
 8008d14:	dc34      	bgt.n	8008d80 <_printf_float+0x39c>
 8008d16:	f04f 0800 	mov.w	r8, #0
 8008d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d1e:	f104 0a1a 	add.w	sl, r4, #26
 8008d22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d26:	1a9b      	subs	r3, r3, r2
 8008d28:	eba3 0309 	sub.w	r3, r3, r9
 8008d2c:	4543      	cmp	r3, r8
 8008d2e:	f77f af7a 	ble.w	8008c26 <_printf_float+0x242>
 8008d32:	2301      	movs	r3, #1
 8008d34:	4652      	mov	r2, sl
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f43f aeac 	beq.w	8008a9a <_printf_float+0xb6>
 8008d42:	f108 0801 	add.w	r8, r8, #1
 8008d46:	e7ec      	b.n	8008d22 <_printf_float+0x33e>
 8008d48:	4613      	mov	r3, r2
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	4628      	mov	r0, r5
 8008d50:	47b8      	blx	r7
 8008d52:	3001      	adds	r0, #1
 8008d54:	d1c0      	bne.n	8008cd8 <_printf_float+0x2f4>
 8008d56:	e6a0      	b.n	8008a9a <_printf_float+0xb6>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	f43f ae99 	beq.w	8008a9a <_printf_float+0xb6>
 8008d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d6a:	f10b 0b01 	add.w	fp, fp, #1
 8008d6e:	e7b9      	b.n	8008ce4 <_printf_float+0x300>
 8008d70:	4631      	mov	r1, r6
 8008d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d1bf      	bne.n	8008cfe <_printf_float+0x31a>
 8008d7e:	e68c      	b.n	8008a9a <_printf_float+0xb6>
 8008d80:	464b      	mov	r3, r9
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	eb08 020a 	add.w	r2, r8, sl
 8008d8a:	47b8      	blx	r7
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d1c2      	bne.n	8008d16 <_printf_float+0x332>
 8008d90:	e683      	b.n	8008a9a <_printf_float+0xb6>
 8008d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d94:	2a01      	cmp	r2, #1
 8008d96:	dc01      	bgt.n	8008d9c <_printf_float+0x3b8>
 8008d98:	07db      	lsls	r3, r3, #31
 8008d9a:	d537      	bpl.n	8008e0c <_printf_float+0x428>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4642      	mov	r2, r8
 8008da0:	4631      	mov	r1, r6
 8008da2:	4628      	mov	r0, r5
 8008da4:	47b8      	blx	r7
 8008da6:	3001      	adds	r0, #1
 8008da8:	f43f ae77 	beq.w	8008a9a <_printf_float+0xb6>
 8008dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008db0:	4631      	mov	r1, r6
 8008db2:	4628      	mov	r0, r5
 8008db4:	47b8      	blx	r7
 8008db6:	3001      	adds	r0, #1
 8008db8:	f43f ae6f 	beq.w	8008a9a <_printf_float+0xb6>
 8008dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f7f7 fdf0 	bl	80009a8 <__aeabi_dcmpeq>
 8008dc8:	b9d8      	cbnz	r0, 8008e02 <_printf_float+0x41e>
 8008dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dcc:	f108 0201 	add.w	r2, r8, #1
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47b8      	blx	r7
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d10e      	bne.n	8008dfa <_printf_float+0x416>
 8008ddc:	e65d      	b.n	8008a9a <_printf_float+0xb6>
 8008dde:	2301      	movs	r3, #1
 8008de0:	464a      	mov	r2, r9
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	f43f ae56 	beq.w	8008a9a <_printf_float+0xb6>
 8008dee:	f108 0801 	add.w	r8, r8, #1
 8008df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df4:	3b01      	subs	r3, #1
 8008df6:	4543      	cmp	r3, r8
 8008df8:	dcf1      	bgt.n	8008dde <_printf_float+0x3fa>
 8008dfa:	4653      	mov	r3, sl
 8008dfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e00:	e6e0      	b.n	8008bc4 <_printf_float+0x1e0>
 8008e02:	f04f 0800 	mov.w	r8, #0
 8008e06:	f104 091a 	add.w	r9, r4, #26
 8008e0a:	e7f2      	b.n	8008df2 <_printf_float+0x40e>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	4642      	mov	r2, r8
 8008e10:	e7df      	b.n	8008dd2 <_printf_float+0x3ee>
 8008e12:	2301      	movs	r3, #1
 8008e14:	464a      	mov	r2, r9
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b8      	blx	r7
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	f43f ae3c 	beq.w	8008a9a <_printf_float+0xb6>
 8008e22:	f108 0801 	add.w	r8, r8, #1
 8008e26:	68e3      	ldr	r3, [r4, #12]
 8008e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e2a:	1a5b      	subs	r3, r3, r1
 8008e2c:	4543      	cmp	r3, r8
 8008e2e:	dcf0      	bgt.n	8008e12 <_printf_float+0x42e>
 8008e30:	e6fd      	b.n	8008c2e <_printf_float+0x24a>
 8008e32:	f04f 0800 	mov.w	r8, #0
 8008e36:	f104 0919 	add.w	r9, r4, #25
 8008e3a:	e7f4      	b.n	8008e26 <_printf_float+0x442>

08008e3c <_printf_common>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	4616      	mov	r6, r2
 8008e42:	4699      	mov	r9, r3
 8008e44:	688a      	ldr	r2, [r1, #8]
 8008e46:	690b      	ldr	r3, [r1, #16]
 8008e48:	4607      	mov	r7, r0
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	bfb8      	it	lt
 8008e4e:	4613      	movlt	r3, r2
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e56:	460c      	mov	r4, r1
 8008e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e5c:	b10a      	cbz	r2, 8008e62 <_printf_common+0x26>
 8008e5e:	3301      	adds	r3, #1
 8008e60:	6033      	str	r3, [r6, #0]
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	0699      	lsls	r1, r3, #26
 8008e66:	bf42      	ittt	mi
 8008e68:	6833      	ldrmi	r3, [r6, #0]
 8008e6a:	3302      	addmi	r3, #2
 8008e6c:	6033      	strmi	r3, [r6, #0]
 8008e6e:	6825      	ldr	r5, [r4, #0]
 8008e70:	f015 0506 	ands.w	r5, r5, #6
 8008e74:	d106      	bne.n	8008e84 <_printf_common+0x48>
 8008e76:	f104 0a19 	add.w	sl, r4, #25
 8008e7a:	68e3      	ldr	r3, [r4, #12]
 8008e7c:	6832      	ldr	r2, [r6, #0]
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	42ab      	cmp	r3, r5
 8008e82:	dc28      	bgt.n	8008ed6 <_printf_common+0x9a>
 8008e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e88:	1e13      	subs	r3, r2, #0
 8008e8a:	6822      	ldr	r2, [r4, #0]
 8008e8c:	bf18      	it	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	0692      	lsls	r2, r2, #26
 8008e92:	d42d      	bmi.n	8008ef0 <_printf_common+0xb4>
 8008e94:	4649      	mov	r1, r9
 8008e96:	4638      	mov	r0, r7
 8008e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d020      	beq.n	8008ee4 <_printf_common+0xa8>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	68e5      	ldr	r5, [r4, #12]
 8008ea6:	f003 0306 	and.w	r3, r3, #6
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	bf18      	it	ne
 8008eae:	2500      	movne	r5, #0
 8008eb0:	6832      	ldr	r2, [r6, #0]
 8008eb2:	f04f 0600 	mov.w	r6, #0
 8008eb6:	68a3      	ldr	r3, [r4, #8]
 8008eb8:	bf08      	it	eq
 8008eba:	1aad      	subeq	r5, r5, r2
 8008ebc:	6922      	ldr	r2, [r4, #16]
 8008ebe:	bf08      	it	eq
 8008ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	bfc4      	itt	gt
 8008ec8:	1a9b      	subgt	r3, r3, r2
 8008eca:	18ed      	addgt	r5, r5, r3
 8008ecc:	341a      	adds	r4, #26
 8008ece:	42b5      	cmp	r5, r6
 8008ed0:	d11a      	bne.n	8008f08 <_printf_common+0xcc>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e008      	b.n	8008ee8 <_printf_common+0xac>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4652      	mov	r2, sl
 8008eda:	4649      	mov	r1, r9
 8008edc:	4638      	mov	r0, r7
 8008ede:	47c0      	blx	r8
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d103      	bne.n	8008eec <_printf_common+0xb0>
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eec:	3501      	adds	r5, #1
 8008eee:	e7c4      	b.n	8008e7a <_printf_common+0x3e>
 8008ef0:	2030      	movs	r0, #48	; 0x30
 8008ef2:	18e1      	adds	r1, r4, r3
 8008ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008efe:	4422      	add	r2, r4
 8008f00:	3302      	adds	r3, #2
 8008f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f06:	e7c5      	b.n	8008e94 <_printf_common+0x58>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	4638      	mov	r0, r7
 8008f10:	47c0      	blx	r8
 8008f12:	3001      	adds	r0, #1
 8008f14:	d0e6      	beq.n	8008ee4 <_printf_common+0xa8>
 8008f16:	3601      	adds	r6, #1
 8008f18:	e7d9      	b.n	8008ece <_printf_common+0x92>
	...

08008f1c <_printf_i>:
 8008f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f20:	460c      	mov	r4, r1
 8008f22:	7e27      	ldrb	r7, [r4, #24]
 8008f24:	4691      	mov	r9, r2
 8008f26:	2f78      	cmp	r7, #120	; 0x78
 8008f28:	4680      	mov	r8, r0
 8008f2a:	469a      	mov	sl, r3
 8008f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f32:	d807      	bhi.n	8008f44 <_printf_i+0x28>
 8008f34:	2f62      	cmp	r7, #98	; 0x62
 8008f36:	d80a      	bhi.n	8008f4e <_printf_i+0x32>
 8008f38:	2f00      	cmp	r7, #0
 8008f3a:	f000 80d9 	beq.w	80090f0 <_printf_i+0x1d4>
 8008f3e:	2f58      	cmp	r7, #88	; 0x58
 8008f40:	f000 80a4 	beq.w	800908c <_printf_i+0x170>
 8008f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f4c:	e03a      	b.n	8008fc4 <_printf_i+0xa8>
 8008f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f52:	2b15      	cmp	r3, #21
 8008f54:	d8f6      	bhi.n	8008f44 <_printf_i+0x28>
 8008f56:	a001      	add	r0, pc, #4	; (adr r0, 8008f5c <_printf_i+0x40>)
 8008f58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f5c:	08008fb5 	.word	0x08008fb5
 8008f60:	08008fc9 	.word	0x08008fc9
 8008f64:	08008f45 	.word	0x08008f45
 8008f68:	08008f45 	.word	0x08008f45
 8008f6c:	08008f45 	.word	0x08008f45
 8008f70:	08008f45 	.word	0x08008f45
 8008f74:	08008fc9 	.word	0x08008fc9
 8008f78:	08008f45 	.word	0x08008f45
 8008f7c:	08008f45 	.word	0x08008f45
 8008f80:	08008f45 	.word	0x08008f45
 8008f84:	08008f45 	.word	0x08008f45
 8008f88:	080090d7 	.word	0x080090d7
 8008f8c:	08008ff9 	.word	0x08008ff9
 8008f90:	080090b9 	.word	0x080090b9
 8008f94:	08008f45 	.word	0x08008f45
 8008f98:	08008f45 	.word	0x08008f45
 8008f9c:	080090f9 	.word	0x080090f9
 8008fa0:	08008f45 	.word	0x08008f45
 8008fa4:	08008ff9 	.word	0x08008ff9
 8008fa8:	08008f45 	.word	0x08008f45
 8008fac:	08008f45 	.word	0x08008f45
 8008fb0:	080090c1 	.word	0x080090c1
 8008fb4:	680b      	ldr	r3, [r1, #0]
 8008fb6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fba:	1d1a      	adds	r2, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	600a      	str	r2, [r1, #0]
 8008fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0a4      	b.n	8009112 <_printf_i+0x1f6>
 8008fc8:	6825      	ldr	r5, [r4, #0]
 8008fca:	6808      	ldr	r0, [r1, #0]
 8008fcc:	062e      	lsls	r6, r5, #24
 8008fce:	f100 0304 	add.w	r3, r0, #4
 8008fd2:	d50a      	bpl.n	8008fea <_printf_i+0xce>
 8008fd4:	6805      	ldr	r5, [r0, #0]
 8008fd6:	600b      	str	r3, [r1, #0]
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	da03      	bge.n	8008fe4 <_printf_i+0xc8>
 8008fdc:	232d      	movs	r3, #45	; 0x2d
 8008fde:	426d      	negs	r5, r5
 8008fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe4:	230a      	movs	r3, #10
 8008fe6:	485e      	ldr	r0, [pc, #376]	; (8009160 <_printf_i+0x244>)
 8008fe8:	e019      	b.n	800901e <_printf_i+0x102>
 8008fea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008fee:	6805      	ldr	r5, [r0, #0]
 8008ff0:	600b      	str	r3, [r1, #0]
 8008ff2:	bf18      	it	ne
 8008ff4:	b22d      	sxthne	r5, r5
 8008ff6:	e7ef      	b.n	8008fd8 <_printf_i+0xbc>
 8008ff8:	680b      	ldr	r3, [r1, #0]
 8008ffa:	6825      	ldr	r5, [r4, #0]
 8008ffc:	1d18      	adds	r0, r3, #4
 8008ffe:	6008      	str	r0, [r1, #0]
 8009000:	0628      	lsls	r0, r5, #24
 8009002:	d501      	bpl.n	8009008 <_printf_i+0xec>
 8009004:	681d      	ldr	r5, [r3, #0]
 8009006:	e002      	b.n	800900e <_printf_i+0xf2>
 8009008:	0669      	lsls	r1, r5, #25
 800900a:	d5fb      	bpl.n	8009004 <_printf_i+0xe8>
 800900c:	881d      	ldrh	r5, [r3, #0]
 800900e:	2f6f      	cmp	r7, #111	; 0x6f
 8009010:	bf0c      	ite	eq
 8009012:	2308      	moveq	r3, #8
 8009014:	230a      	movne	r3, #10
 8009016:	4852      	ldr	r0, [pc, #328]	; (8009160 <_printf_i+0x244>)
 8009018:	2100      	movs	r1, #0
 800901a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800901e:	6866      	ldr	r6, [r4, #4]
 8009020:	2e00      	cmp	r6, #0
 8009022:	bfa8      	it	ge
 8009024:	6821      	ldrge	r1, [r4, #0]
 8009026:	60a6      	str	r6, [r4, #8]
 8009028:	bfa4      	itt	ge
 800902a:	f021 0104 	bicge.w	r1, r1, #4
 800902e:	6021      	strge	r1, [r4, #0]
 8009030:	b90d      	cbnz	r5, 8009036 <_printf_i+0x11a>
 8009032:	2e00      	cmp	r6, #0
 8009034:	d04d      	beq.n	80090d2 <_printf_i+0x1b6>
 8009036:	4616      	mov	r6, r2
 8009038:	fbb5 f1f3 	udiv	r1, r5, r3
 800903c:	fb03 5711 	mls	r7, r3, r1, r5
 8009040:	5dc7      	ldrb	r7, [r0, r7]
 8009042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009046:	462f      	mov	r7, r5
 8009048:	42bb      	cmp	r3, r7
 800904a:	460d      	mov	r5, r1
 800904c:	d9f4      	bls.n	8009038 <_printf_i+0x11c>
 800904e:	2b08      	cmp	r3, #8
 8009050:	d10b      	bne.n	800906a <_printf_i+0x14e>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	07df      	lsls	r7, r3, #31
 8009056:	d508      	bpl.n	800906a <_printf_i+0x14e>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	6861      	ldr	r1, [r4, #4]
 800905c:	4299      	cmp	r1, r3
 800905e:	bfde      	ittt	le
 8009060:	2330      	movle	r3, #48	; 0x30
 8009062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800906a:	1b92      	subs	r2, r2, r6
 800906c:	6122      	str	r2, [r4, #16]
 800906e:	464b      	mov	r3, r9
 8009070:	4621      	mov	r1, r4
 8009072:	4640      	mov	r0, r8
 8009074:	f8cd a000 	str.w	sl, [sp]
 8009078:	aa03      	add	r2, sp, #12
 800907a:	f7ff fedf 	bl	8008e3c <_printf_common>
 800907e:	3001      	adds	r0, #1
 8009080:	d14c      	bne.n	800911c <_printf_i+0x200>
 8009082:	f04f 30ff 	mov.w	r0, #4294967295
 8009086:	b004      	add	sp, #16
 8009088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908c:	4834      	ldr	r0, [pc, #208]	; (8009160 <_printf_i+0x244>)
 800908e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009092:	680e      	ldr	r6, [r1, #0]
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	f856 5b04 	ldr.w	r5, [r6], #4
 800909a:	061f      	lsls	r7, r3, #24
 800909c:	600e      	str	r6, [r1, #0]
 800909e:	d514      	bpl.n	80090ca <_printf_i+0x1ae>
 80090a0:	07d9      	lsls	r1, r3, #31
 80090a2:	bf44      	itt	mi
 80090a4:	f043 0320 	orrmi.w	r3, r3, #32
 80090a8:	6023      	strmi	r3, [r4, #0]
 80090aa:	b91d      	cbnz	r5, 80090b4 <_printf_i+0x198>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f023 0320 	bic.w	r3, r3, #32
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	2310      	movs	r3, #16
 80090b6:	e7af      	b.n	8009018 <_printf_i+0xfc>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	f043 0320 	orr.w	r3, r3, #32
 80090be:	6023      	str	r3, [r4, #0]
 80090c0:	2378      	movs	r3, #120	; 0x78
 80090c2:	4828      	ldr	r0, [pc, #160]	; (8009164 <_printf_i+0x248>)
 80090c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090c8:	e7e3      	b.n	8009092 <_printf_i+0x176>
 80090ca:	065e      	lsls	r6, r3, #25
 80090cc:	bf48      	it	mi
 80090ce:	b2ad      	uxthmi	r5, r5
 80090d0:	e7e6      	b.n	80090a0 <_printf_i+0x184>
 80090d2:	4616      	mov	r6, r2
 80090d4:	e7bb      	b.n	800904e <_printf_i+0x132>
 80090d6:	680b      	ldr	r3, [r1, #0]
 80090d8:	6826      	ldr	r6, [r4, #0]
 80090da:	1d1d      	adds	r5, r3, #4
 80090dc:	6960      	ldr	r0, [r4, #20]
 80090de:	600d      	str	r5, [r1, #0]
 80090e0:	0635      	lsls	r5, r6, #24
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	d501      	bpl.n	80090ea <_printf_i+0x1ce>
 80090e6:	6018      	str	r0, [r3, #0]
 80090e8:	e002      	b.n	80090f0 <_printf_i+0x1d4>
 80090ea:	0671      	lsls	r1, r6, #25
 80090ec:	d5fb      	bpl.n	80090e6 <_printf_i+0x1ca>
 80090ee:	8018      	strh	r0, [r3, #0]
 80090f0:	2300      	movs	r3, #0
 80090f2:	4616      	mov	r6, r2
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	e7ba      	b.n	800906e <_printf_i+0x152>
 80090f8:	680b      	ldr	r3, [r1, #0]
 80090fa:	1d1a      	adds	r2, r3, #4
 80090fc:	600a      	str	r2, [r1, #0]
 80090fe:	681e      	ldr	r6, [r3, #0]
 8009100:	2100      	movs	r1, #0
 8009102:	4630      	mov	r0, r6
 8009104:	6862      	ldr	r2, [r4, #4]
 8009106:	f002 fb09 	bl	800b71c <memchr>
 800910a:	b108      	cbz	r0, 8009110 <_printf_i+0x1f4>
 800910c:	1b80      	subs	r0, r0, r6
 800910e:	6060      	str	r0, [r4, #4]
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	6123      	str	r3, [r4, #16]
 8009114:	2300      	movs	r3, #0
 8009116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800911a:	e7a8      	b.n	800906e <_printf_i+0x152>
 800911c:	4632      	mov	r2, r6
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	47d0      	blx	sl
 8009126:	3001      	adds	r0, #1
 8009128:	d0ab      	beq.n	8009082 <_printf_i+0x166>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	079b      	lsls	r3, r3, #30
 800912e:	d413      	bmi.n	8009158 <_printf_i+0x23c>
 8009130:	68e0      	ldr	r0, [r4, #12]
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	4298      	cmp	r0, r3
 8009136:	bfb8      	it	lt
 8009138:	4618      	movlt	r0, r3
 800913a:	e7a4      	b.n	8009086 <_printf_i+0x16a>
 800913c:	2301      	movs	r3, #1
 800913e:	4632      	mov	r2, r6
 8009140:	4649      	mov	r1, r9
 8009142:	4640      	mov	r0, r8
 8009144:	47d0      	blx	sl
 8009146:	3001      	adds	r0, #1
 8009148:	d09b      	beq.n	8009082 <_printf_i+0x166>
 800914a:	3501      	adds	r5, #1
 800914c:	68e3      	ldr	r3, [r4, #12]
 800914e:	9903      	ldr	r1, [sp, #12]
 8009150:	1a5b      	subs	r3, r3, r1
 8009152:	42ab      	cmp	r3, r5
 8009154:	dcf2      	bgt.n	800913c <_printf_i+0x220>
 8009156:	e7eb      	b.n	8009130 <_printf_i+0x214>
 8009158:	2500      	movs	r5, #0
 800915a:	f104 0619 	add.w	r6, r4, #25
 800915e:	e7f5      	b.n	800914c <_printf_i+0x230>
 8009160:	0800d252 	.word	0x0800d252
 8009164:	0800d263 	.word	0x0800d263

08009168 <_scanf_float>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	b087      	sub	sp, #28
 800916e:	9303      	str	r3, [sp, #12]
 8009170:	688b      	ldr	r3, [r1, #8]
 8009172:	4617      	mov	r7, r2
 8009174:	1e5a      	subs	r2, r3, #1
 8009176:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800917a:	bf85      	ittet	hi
 800917c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009180:	195b      	addhi	r3, r3, r5
 8009182:	2300      	movls	r3, #0
 8009184:	9302      	strhi	r3, [sp, #8]
 8009186:	bf88      	it	hi
 8009188:	f240 135d 	movwhi	r3, #349	; 0x15d
 800918c:	468b      	mov	fp, r1
 800918e:	f04f 0500 	mov.w	r5, #0
 8009192:	bf8c      	ite	hi
 8009194:	608b      	strhi	r3, [r1, #8]
 8009196:	9302      	strls	r3, [sp, #8]
 8009198:	680b      	ldr	r3, [r1, #0]
 800919a:	4680      	mov	r8, r0
 800919c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80091a0:	f84b 3b1c 	str.w	r3, [fp], #28
 80091a4:	460c      	mov	r4, r1
 80091a6:	465e      	mov	r6, fp
 80091a8:	46aa      	mov	sl, r5
 80091aa:	46a9      	mov	r9, r5
 80091ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80091b0:	9501      	str	r5, [sp, #4]
 80091b2:	68a2      	ldr	r2, [r4, #8]
 80091b4:	b152      	cbz	r2, 80091cc <_scanf_float+0x64>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b4e      	cmp	r3, #78	; 0x4e
 80091bc:	d864      	bhi.n	8009288 <_scanf_float+0x120>
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d83c      	bhi.n	800923c <_scanf_float+0xd4>
 80091c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80091c6:	b2c8      	uxtb	r0, r1
 80091c8:	280e      	cmp	r0, #14
 80091ca:	d93a      	bls.n	8009242 <_scanf_float+0xda>
 80091cc:	f1b9 0f00 	cmp.w	r9, #0
 80091d0:	d003      	beq.n	80091da <_scanf_float+0x72>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091de:	f1ba 0f01 	cmp.w	sl, #1
 80091e2:	f200 8113 	bhi.w	800940c <_scanf_float+0x2a4>
 80091e6:	455e      	cmp	r6, fp
 80091e8:	f200 8105 	bhi.w	80093f6 <_scanf_float+0x28e>
 80091ec:	2501      	movs	r5, #1
 80091ee:	4628      	mov	r0, r5
 80091f0:	b007      	add	sp, #28
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80091fa:	2a0d      	cmp	r2, #13
 80091fc:	d8e6      	bhi.n	80091cc <_scanf_float+0x64>
 80091fe:	a101      	add	r1, pc, #4	; (adr r1, 8009204 <_scanf_float+0x9c>)
 8009200:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009204:	08009343 	.word	0x08009343
 8009208:	080091cd 	.word	0x080091cd
 800920c:	080091cd 	.word	0x080091cd
 8009210:	080091cd 	.word	0x080091cd
 8009214:	080093a3 	.word	0x080093a3
 8009218:	0800937b 	.word	0x0800937b
 800921c:	080091cd 	.word	0x080091cd
 8009220:	080091cd 	.word	0x080091cd
 8009224:	08009351 	.word	0x08009351
 8009228:	080091cd 	.word	0x080091cd
 800922c:	080091cd 	.word	0x080091cd
 8009230:	080091cd 	.word	0x080091cd
 8009234:	080091cd 	.word	0x080091cd
 8009238:	08009309 	.word	0x08009309
 800923c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009240:	e7db      	b.n	80091fa <_scanf_float+0x92>
 8009242:	290e      	cmp	r1, #14
 8009244:	d8c2      	bhi.n	80091cc <_scanf_float+0x64>
 8009246:	a001      	add	r0, pc, #4	; (adr r0, 800924c <_scanf_float+0xe4>)
 8009248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800924c:	080092fb 	.word	0x080092fb
 8009250:	080091cd 	.word	0x080091cd
 8009254:	080092fb 	.word	0x080092fb
 8009258:	0800938f 	.word	0x0800938f
 800925c:	080091cd 	.word	0x080091cd
 8009260:	080092a9 	.word	0x080092a9
 8009264:	080092e5 	.word	0x080092e5
 8009268:	080092e5 	.word	0x080092e5
 800926c:	080092e5 	.word	0x080092e5
 8009270:	080092e5 	.word	0x080092e5
 8009274:	080092e5 	.word	0x080092e5
 8009278:	080092e5 	.word	0x080092e5
 800927c:	080092e5 	.word	0x080092e5
 8009280:	080092e5 	.word	0x080092e5
 8009284:	080092e5 	.word	0x080092e5
 8009288:	2b6e      	cmp	r3, #110	; 0x6e
 800928a:	d809      	bhi.n	80092a0 <_scanf_float+0x138>
 800928c:	2b60      	cmp	r3, #96	; 0x60
 800928e:	d8b2      	bhi.n	80091f6 <_scanf_float+0x8e>
 8009290:	2b54      	cmp	r3, #84	; 0x54
 8009292:	d077      	beq.n	8009384 <_scanf_float+0x21c>
 8009294:	2b59      	cmp	r3, #89	; 0x59
 8009296:	d199      	bne.n	80091cc <_scanf_float+0x64>
 8009298:	2d07      	cmp	r5, #7
 800929a:	d197      	bne.n	80091cc <_scanf_float+0x64>
 800929c:	2508      	movs	r5, #8
 800929e:	e029      	b.n	80092f4 <_scanf_float+0x18c>
 80092a0:	2b74      	cmp	r3, #116	; 0x74
 80092a2:	d06f      	beq.n	8009384 <_scanf_float+0x21c>
 80092a4:	2b79      	cmp	r3, #121	; 0x79
 80092a6:	e7f6      	b.n	8009296 <_scanf_float+0x12e>
 80092a8:	6821      	ldr	r1, [r4, #0]
 80092aa:	05c8      	lsls	r0, r1, #23
 80092ac:	d51a      	bpl.n	80092e4 <_scanf_float+0x17c>
 80092ae:	9b02      	ldr	r3, [sp, #8]
 80092b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80092b4:	6021      	str	r1, [r4, #0]
 80092b6:	f109 0901 	add.w	r9, r9, #1
 80092ba:	b11b      	cbz	r3, 80092c4 <_scanf_float+0x15c>
 80092bc:	3b01      	subs	r3, #1
 80092be:	3201      	adds	r2, #1
 80092c0:	9302      	str	r3, [sp, #8]
 80092c2:	60a2      	str	r2, [r4, #8]
 80092c4:	68a3      	ldr	r3, [r4, #8]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	60a3      	str	r3, [r4, #8]
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	3301      	adds	r3, #1
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	f340 8084 	ble.w	80093e4 <_scanf_float+0x27c>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	603b      	str	r3, [r7, #0]
 80092e2:	e766      	b.n	80091b2 <_scanf_float+0x4a>
 80092e4:	eb1a 0f05 	cmn.w	sl, r5
 80092e8:	f47f af70 	bne.w	80091cc <_scanf_float+0x64>
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80092f2:	6022      	str	r2, [r4, #0]
 80092f4:	f806 3b01 	strb.w	r3, [r6], #1
 80092f8:	e7e4      	b.n	80092c4 <_scanf_float+0x15c>
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	0610      	lsls	r0, r2, #24
 80092fe:	f57f af65 	bpl.w	80091cc <_scanf_float+0x64>
 8009302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009306:	e7f4      	b.n	80092f2 <_scanf_float+0x18a>
 8009308:	f1ba 0f00 	cmp.w	sl, #0
 800930c:	d10e      	bne.n	800932c <_scanf_float+0x1c4>
 800930e:	f1b9 0f00 	cmp.w	r9, #0
 8009312:	d10e      	bne.n	8009332 <_scanf_float+0x1ca>
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800931a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800931e:	d108      	bne.n	8009332 <_scanf_float+0x1ca>
 8009320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009324:	f04f 0a01 	mov.w	sl, #1
 8009328:	6022      	str	r2, [r4, #0]
 800932a:	e7e3      	b.n	80092f4 <_scanf_float+0x18c>
 800932c:	f1ba 0f02 	cmp.w	sl, #2
 8009330:	d055      	beq.n	80093de <_scanf_float+0x276>
 8009332:	2d01      	cmp	r5, #1
 8009334:	d002      	beq.n	800933c <_scanf_float+0x1d4>
 8009336:	2d04      	cmp	r5, #4
 8009338:	f47f af48 	bne.w	80091cc <_scanf_float+0x64>
 800933c:	3501      	adds	r5, #1
 800933e:	b2ed      	uxtb	r5, r5
 8009340:	e7d8      	b.n	80092f4 <_scanf_float+0x18c>
 8009342:	f1ba 0f01 	cmp.w	sl, #1
 8009346:	f47f af41 	bne.w	80091cc <_scanf_float+0x64>
 800934a:	f04f 0a02 	mov.w	sl, #2
 800934e:	e7d1      	b.n	80092f4 <_scanf_float+0x18c>
 8009350:	b97d      	cbnz	r5, 8009372 <_scanf_float+0x20a>
 8009352:	f1b9 0f00 	cmp.w	r9, #0
 8009356:	f47f af3c 	bne.w	80091d2 <_scanf_float+0x6a>
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009360:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009364:	f47f af39 	bne.w	80091da <_scanf_float+0x72>
 8009368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800936c:	2501      	movs	r5, #1
 800936e:	6022      	str	r2, [r4, #0]
 8009370:	e7c0      	b.n	80092f4 <_scanf_float+0x18c>
 8009372:	2d03      	cmp	r5, #3
 8009374:	d0e2      	beq.n	800933c <_scanf_float+0x1d4>
 8009376:	2d05      	cmp	r5, #5
 8009378:	e7de      	b.n	8009338 <_scanf_float+0x1d0>
 800937a:	2d02      	cmp	r5, #2
 800937c:	f47f af26 	bne.w	80091cc <_scanf_float+0x64>
 8009380:	2503      	movs	r5, #3
 8009382:	e7b7      	b.n	80092f4 <_scanf_float+0x18c>
 8009384:	2d06      	cmp	r5, #6
 8009386:	f47f af21 	bne.w	80091cc <_scanf_float+0x64>
 800938a:	2507      	movs	r5, #7
 800938c:	e7b2      	b.n	80092f4 <_scanf_float+0x18c>
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	0591      	lsls	r1, r2, #22
 8009392:	f57f af1b 	bpl.w	80091cc <_scanf_float+0x64>
 8009396:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800939a:	6022      	str	r2, [r4, #0]
 800939c:	f8cd 9004 	str.w	r9, [sp, #4]
 80093a0:	e7a8      	b.n	80092f4 <_scanf_float+0x18c>
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80093a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80093ac:	d006      	beq.n	80093bc <_scanf_float+0x254>
 80093ae:	0550      	lsls	r0, r2, #21
 80093b0:	f57f af0c 	bpl.w	80091cc <_scanf_float+0x64>
 80093b4:	f1b9 0f00 	cmp.w	r9, #0
 80093b8:	f43f af0f 	beq.w	80091da <_scanf_float+0x72>
 80093bc:	0591      	lsls	r1, r2, #22
 80093be:	bf58      	it	pl
 80093c0:	9901      	ldrpl	r1, [sp, #4]
 80093c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093c6:	bf58      	it	pl
 80093c8:	eba9 0101 	subpl.w	r1, r9, r1
 80093cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80093d0:	f04f 0900 	mov.w	r9, #0
 80093d4:	bf58      	it	pl
 80093d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80093da:	6022      	str	r2, [r4, #0]
 80093dc:	e78a      	b.n	80092f4 <_scanf_float+0x18c>
 80093de:	f04f 0a03 	mov.w	sl, #3
 80093e2:	e787      	b.n	80092f4 <_scanf_float+0x18c>
 80093e4:	4639      	mov	r1, r7
 80093e6:	4640      	mov	r0, r8
 80093e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093ec:	4798      	blx	r3
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f43f aedf 	beq.w	80091b2 <_scanf_float+0x4a>
 80093f4:	e6ea      	b.n	80091cc <_scanf_float+0x64>
 80093f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093fa:	463a      	mov	r2, r7
 80093fc:	4640      	mov	r0, r8
 80093fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009402:	4798      	blx	r3
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	3b01      	subs	r3, #1
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	e6ec      	b.n	80091e6 <_scanf_float+0x7e>
 800940c:	1e6b      	subs	r3, r5, #1
 800940e:	2b06      	cmp	r3, #6
 8009410:	d825      	bhi.n	800945e <_scanf_float+0x2f6>
 8009412:	2d02      	cmp	r5, #2
 8009414:	d836      	bhi.n	8009484 <_scanf_float+0x31c>
 8009416:	455e      	cmp	r6, fp
 8009418:	f67f aee8 	bls.w	80091ec <_scanf_float+0x84>
 800941c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009420:	463a      	mov	r2, r7
 8009422:	4640      	mov	r0, r8
 8009424:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009428:	4798      	blx	r3
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	3b01      	subs	r3, #1
 800942e:	6123      	str	r3, [r4, #16]
 8009430:	e7f1      	b.n	8009416 <_scanf_float+0x2ae>
 8009432:	9802      	ldr	r0, [sp, #8]
 8009434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009438:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800943c:	463a      	mov	r2, r7
 800943e:	9002      	str	r0, [sp, #8]
 8009440:	4640      	mov	r0, r8
 8009442:	4798      	blx	r3
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	3b01      	subs	r3, #1
 8009448:	6123      	str	r3, [r4, #16]
 800944a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800944e:	fa5f fa8a 	uxtb.w	sl, sl
 8009452:	f1ba 0f02 	cmp.w	sl, #2
 8009456:	d1ec      	bne.n	8009432 <_scanf_float+0x2ca>
 8009458:	3d03      	subs	r5, #3
 800945a:	b2ed      	uxtb	r5, r5
 800945c:	1b76      	subs	r6, r6, r5
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	05da      	lsls	r2, r3, #23
 8009462:	d52f      	bpl.n	80094c4 <_scanf_float+0x35c>
 8009464:	055b      	lsls	r3, r3, #21
 8009466:	d510      	bpl.n	800948a <_scanf_float+0x322>
 8009468:	455e      	cmp	r6, fp
 800946a:	f67f aebf 	bls.w	80091ec <_scanf_float+0x84>
 800946e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009472:	463a      	mov	r2, r7
 8009474:	4640      	mov	r0, r8
 8009476:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800947a:	4798      	blx	r3
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	3b01      	subs	r3, #1
 8009480:	6123      	str	r3, [r4, #16]
 8009482:	e7f1      	b.n	8009468 <_scanf_float+0x300>
 8009484:	46aa      	mov	sl, r5
 8009486:	9602      	str	r6, [sp, #8]
 8009488:	e7df      	b.n	800944a <_scanf_float+0x2e2>
 800948a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	2965      	cmp	r1, #101	; 0x65
 8009492:	f103 33ff 	add.w	r3, r3, #4294967295
 8009496:	f106 35ff 	add.w	r5, r6, #4294967295
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	d00c      	beq.n	80094b8 <_scanf_float+0x350>
 800949e:	2945      	cmp	r1, #69	; 0x45
 80094a0:	d00a      	beq.n	80094b8 <_scanf_float+0x350>
 80094a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094a6:	463a      	mov	r2, r7
 80094a8:	4640      	mov	r0, r8
 80094aa:	4798      	blx	r3
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	1eb5      	subs	r5, r6, #2
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	463a      	mov	r2, r7
 80094ba:	4640      	mov	r0, r8
 80094bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094c0:	4798      	blx	r3
 80094c2:	462e      	mov	r6, r5
 80094c4:	6825      	ldr	r5, [r4, #0]
 80094c6:	f015 0510 	ands.w	r5, r5, #16
 80094ca:	d159      	bne.n	8009580 <_scanf_float+0x418>
 80094cc:	7035      	strb	r5, [r6, #0]
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d8:	d11c      	bne.n	8009514 <_scanf_float+0x3ac>
 80094da:	9b01      	ldr	r3, [sp, #4]
 80094dc:	454b      	cmp	r3, r9
 80094de:	eba3 0209 	sub.w	r2, r3, r9
 80094e2:	d124      	bne.n	800952e <_scanf_float+0x3c6>
 80094e4:	2200      	movs	r2, #0
 80094e6:	4659      	mov	r1, fp
 80094e8:	4640      	mov	r0, r8
 80094ea:	f000 fe89 	bl	800a200 <_strtod_r>
 80094ee:	f8d4 c000 	ldr.w	ip, [r4]
 80094f2:	9b03      	ldr	r3, [sp, #12]
 80094f4:	f01c 0f02 	tst.w	ip, #2
 80094f8:	4606      	mov	r6, r0
 80094fa:	460f      	mov	r7, r1
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	d021      	beq.n	8009544 <_scanf_float+0x3dc>
 8009500:	9903      	ldr	r1, [sp, #12]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	600a      	str	r2, [r1, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	e9c3 6700 	strd	r6, r7, [r3]
 800950c:	68e3      	ldr	r3, [r4, #12]
 800950e:	3301      	adds	r3, #1
 8009510:	60e3      	str	r3, [r4, #12]
 8009512:	e66c      	b.n	80091ee <_scanf_float+0x86>
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0e4      	beq.n	80094e4 <_scanf_float+0x37c>
 800951a:	9905      	ldr	r1, [sp, #20]
 800951c:	230a      	movs	r3, #10
 800951e:	462a      	mov	r2, r5
 8009520:	4640      	mov	r0, r8
 8009522:	3101      	adds	r1, #1
 8009524:	f000 fef8 	bl	800a318 <_strtol_r>
 8009528:	9b04      	ldr	r3, [sp, #16]
 800952a:	9e05      	ldr	r6, [sp, #20]
 800952c:	1ac2      	subs	r2, r0, r3
 800952e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009532:	429e      	cmp	r6, r3
 8009534:	bf28      	it	cs
 8009536:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800953a:	4630      	mov	r0, r6
 800953c:	4911      	ldr	r1, [pc, #68]	; (8009584 <_scanf_float+0x41c>)
 800953e:	f000 f829 	bl	8009594 <siprintf>
 8009542:	e7cf      	b.n	80094e4 <_scanf_float+0x37c>
 8009544:	f01c 0f04 	tst.w	ip, #4
 8009548:	f103 0e04 	add.w	lr, r3, #4
 800954c:	d003      	beq.n	8009556 <_scanf_float+0x3ee>
 800954e:	9903      	ldr	r1, [sp, #12]
 8009550:	f8c1 e000 	str.w	lr, [r1]
 8009554:	e7d7      	b.n	8009506 <_scanf_float+0x39e>
 8009556:	9a03      	ldr	r2, [sp, #12]
 8009558:	f8c2 e000 	str.w	lr, [r2]
 800955c:	f8d3 8000 	ldr.w	r8, [r3]
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	f7f7 fa52 	bl	8000a0c <__aeabi_dcmpun>
 8009568:	b128      	cbz	r0, 8009576 <_scanf_float+0x40e>
 800956a:	4807      	ldr	r0, [pc, #28]	; (8009588 <_scanf_float+0x420>)
 800956c:	f000 f80e 	bl	800958c <nanf>
 8009570:	f8c8 0000 	str.w	r0, [r8]
 8009574:	e7ca      	b.n	800950c <_scanf_float+0x3a4>
 8009576:	4630      	mov	r0, r6
 8009578:	4639      	mov	r1, r7
 800957a:	f7f7 faa5 	bl	8000ac8 <__aeabi_d2f>
 800957e:	e7f7      	b.n	8009570 <_scanf_float+0x408>
 8009580:	2500      	movs	r5, #0
 8009582:	e634      	b.n	80091ee <_scanf_float+0x86>
 8009584:	0800d274 	.word	0x0800d274
 8009588:	0800d690 	.word	0x0800d690

0800958c <nanf>:
 800958c:	4800      	ldr	r0, [pc, #0]	; (8009590 <nanf+0x4>)
 800958e:	4770      	bx	lr
 8009590:	7fc00000 	.word	0x7fc00000

08009594 <siprintf>:
 8009594:	b40e      	push	{r1, r2, r3}
 8009596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800959a:	b500      	push	{lr}
 800959c:	b09c      	sub	sp, #112	; 0x70
 800959e:	ab1d      	add	r3, sp, #116	; 0x74
 80095a0:	9002      	str	r0, [sp, #8]
 80095a2:	9006      	str	r0, [sp, #24]
 80095a4:	9107      	str	r1, [sp, #28]
 80095a6:	9104      	str	r1, [sp, #16]
 80095a8:	4808      	ldr	r0, [pc, #32]	; (80095cc <siprintf+0x38>)
 80095aa:	4909      	ldr	r1, [pc, #36]	; (80095d0 <siprintf+0x3c>)
 80095ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b0:	9105      	str	r1, [sp, #20]
 80095b2:	6800      	ldr	r0, [r0, #0]
 80095b4:	a902      	add	r1, sp, #8
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	f002 fe94 	bl	800c2e4 <_svfiprintf_r>
 80095bc:	2200      	movs	r2, #0
 80095be:	9b02      	ldr	r3, [sp, #8]
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	b01c      	add	sp, #112	; 0x70
 80095c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c8:	b003      	add	sp, #12
 80095ca:	4770      	bx	lr
 80095cc:	20000010 	.word	0x20000010
 80095d0:	ffff0208 	.word	0xffff0208

080095d4 <sulp>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	460f      	mov	r7, r1
 80095da:	4690      	mov	r8, r2
 80095dc:	f002 fc2a 	bl	800be34 <__ulp>
 80095e0:	4604      	mov	r4, r0
 80095e2:	460d      	mov	r5, r1
 80095e4:	f1b8 0f00 	cmp.w	r8, #0
 80095e8:	d011      	beq.n	800960e <sulp+0x3a>
 80095ea:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80095ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd0b      	ble.n	800960e <sulp+0x3a>
 80095f6:	2400      	movs	r4, #0
 80095f8:	051b      	lsls	r3, r3, #20
 80095fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009602:	4622      	mov	r2, r4
 8009604:	462b      	mov	r3, r5
 8009606:	f7f6 ff67 	bl	80004d8 <__aeabi_dmul>
 800960a:	4604      	mov	r4, r0
 800960c:	460d      	mov	r5, r1
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009618 <_strtod_l>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	469b      	mov	fp, r3
 800961e:	2300      	movs	r3, #0
 8009620:	b0a1      	sub	sp, #132	; 0x84
 8009622:	931c      	str	r3, [sp, #112]	; 0x70
 8009624:	4ba1      	ldr	r3, [pc, #644]	; (80098ac <_strtod_l+0x294>)
 8009626:	4682      	mov	sl, r0
 8009628:	681f      	ldr	r7, [r3, #0]
 800962a:	460e      	mov	r6, r1
 800962c:	4638      	mov	r0, r7
 800962e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009630:	f7f6 fd8e 	bl	8000150 <strlen>
 8009634:	f04f 0800 	mov.w	r8, #0
 8009638:	4604      	mov	r4, r0
 800963a:	f04f 0900 	mov.w	r9, #0
 800963e:	961b      	str	r6, [sp, #108]	; 0x6c
 8009640:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	2a2b      	cmp	r2, #43	; 0x2b
 8009646:	d04c      	beq.n	80096e2 <_strtod_l+0xca>
 8009648:	d83a      	bhi.n	80096c0 <_strtod_l+0xa8>
 800964a:	2a0d      	cmp	r2, #13
 800964c:	d833      	bhi.n	80096b6 <_strtod_l+0x9e>
 800964e:	2a08      	cmp	r2, #8
 8009650:	d833      	bhi.n	80096ba <_strtod_l+0xa2>
 8009652:	2a00      	cmp	r2, #0
 8009654:	d03d      	beq.n	80096d2 <_strtod_l+0xba>
 8009656:	2300      	movs	r3, #0
 8009658:	930c      	str	r3, [sp, #48]	; 0x30
 800965a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800965c:	782b      	ldrb	r3, [r5, #0]
 800965e:	2b30      	cmp	r3, #48	; 0x30
 8009660:	f040 80af 	bne.w	80097c2 <_strtod_l+0x1aa>
 8009664:	786b      	ldrb	r3, [r5, #1]
 8009666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800966a:	2b58      	cmp	r3, #88	; 0x58
 800966c:	d16c      	bne.n	8009748 <_strtod_l+0x130>
 800966e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009670:	4650      	mov	r0, sl
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	ab1c      	add	r3, sp, #112	; 0x70
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4a8d      	ldr	r2, [pc, #564]	; (80098b0 <_strtod_l+0x298>)
 800967a:	f8cd b008 	str.w	fp, [sp, #8]
 800967e:	ab1d      	add	r3, sp, #116	; 0x74
 8009680:	a91b      	add	r1, sp, #108	; 0x6c
 8009682:	f001 fd2f 	bl	800b0e4 <__gethex>
 8009686:	f010 0607 	ands.w	r6, r0, #7
 800968a:	4604      	mov	r4, r0
 800968c:	d005      	beq.n	800969a <_strtod_l+0x82>
 800968e:	2e06      	cmp	r6, #6
 8009690:	d129      	bne.n	80096e6 <_strtod_l+0xce>
 8009692:	2300      	movs	r3, #0
 8009694:	3501      	adds	r5, #1
 8009696:	951b      	str	r5, [sp, #108]	; 0x6c
 8009698:	930c      	str	r3, [sp, #48]	; 0x30
 800969a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 8596 	bne.w	800a1ce <_strtod_l+0xbb6>
 80096a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096a4:	b1d3      	cbz	r3, 80096dc <_strtod_l+0xc4>
 80096a6:	4642      	mov	r2, r8
 80096a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80096ac:	4610      	mov	r0, r2
 80096ae:	4619      	mov	r1, r3
 80096b0:	b021      	add	sp, #132	; 0x84
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	2a20      	cmp	r2, #32
 80096b8:	d1cd      	bne.n	8009656 <_strtod_l+0x3e>
 80096ba:	3301      	adds	r3, #1
 80096bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80096be:	e7bf      	b.n	8009640 <_strtod_l+0x28>
 80096c0:	2a2d      	cmp	r2, #45	; 0x2d
 80096c2:	d1c8      	bne.n	8009656 <_strtod_l+0x3e>
 80096c4:	2201      	movs	r2, #1
 80096c6:	920c      	str	r2, [sp, #48]	; 0x30
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80096cc:	785b      	ldrb	r3, [r3, #1]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1c3      	bne.n	800965a <_strtod_l+0x42>
 80096d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f040 8577 	bne.w	800a1ca <_strtod_l+0xbb2>
 80096dc:	4642      	mov	r2, r8
 80096de:	464b      	mov	r3, r9
 80096e0:	e7e4      	b.n	80096ac <_strtod_l+0x94>
 80096e2:	2200      	movs	r2, #0
 80096e4:	e7ef      	b.n	80096c6 <_strtod_l+0xae>
 80096e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80096e8:	b13a      	cbz	r2, 80096fa <_strtod_l+0xe2>
 80096ea:	2135      	movs	r1, #53	; 0x35
 80096ec:	a81e      	add	r0, sp, #120	; 0x78
 80096ee:	f002 fca5 	bl	800c03c <__copybits>
 80096f2:	4650      	mov	r0, sl
 80096f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80096f6:	f002 f86d 	bl	800b7d4 <_Bfree>
 80096fa:	3e01      	subs	r6, #1
 80096fc:	2e05      	cmp	r6, #5
 80096fe:	d807      	bhi.n	8009710 <_strtod_l+0xf8>
 8009700:	e8df f006 	tbb	[pc, r6]
 8009704:	1d180b0e 	.word	0x1d180b0e
 8009708:	030e      	.short	0x030e
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	46c8      	mov	r8, r9
 8009710:	0721      	lsls	r1, r4, #28
 8009712:	d5c2      	bpl.n	800969a <_strtod_l+0x82>
 8009714:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009718:	e7bf      	b.n	800969a <_strtod_l+0x82>
 800971a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800971e:	e7f7      	b.n	8009710 <_strtod_l+0xf8>
 8009720:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009722:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800972a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800972e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009732:	e7ed      	b.n	8009710 <_strtod_l+0xf8>
 8009734:	f04f 0800 	mov.w	r8, #0
 8009738:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80098b4 <_strtod_l+0x29c>
 800973c:	e7e8      	b.n	8009710 <_strtod_l+0xf8>
 800973e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009742:	f04f 38ff 	mov.w	r8, #4294967295
 8009746:	e7e3      	b.n	8009710 <_strtod_l+0xf8>
 8009748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	921b      	str	r2, [sp, #108]	; 0x6c
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	2b30      	cmp	r3, #48	; 0x30
 8009752:	d0f9      	beq.n	8009748 <_strtod_l+0x130>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0a0      	beq.n	800969a <_strtod_l+0x82>
 8009758:	2301      	movs	r3, #1
 800975a:	9307      	str	r3, [sp, #28]
 800975c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800975e:	220a      	movs	r2, #10
 8009760:	9308      	str	r3, [sp, #32]
 8009762:	2300      	movs	r3, #0
 8009764:	469b      	mov	fp, r3
 8009766:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800976a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800976c:	7805      	ldrb	r5, [r0, #0]
 800976e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009772:	b2d9      	uxtb	r1, r3
 8009774:	2909      	cmp	r1, #9
 8009776:	d926      	bls.n	80097c6 <_strtod_l+0x1ae>
 8009778:	4622      	mov	r2, r4
 800977a:	4639      	mov	r1, r7
 800977c:	f002 fec8 	bl	800c510 <strncmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	d032      	beq.n	80097ea <_strtod_l+0x1d2>
 8009784:	2000      	movs	r0, #0
 8009786:	462b      	mov	r3, r5
 8009788:	465c      	mov	r4, fp
 800978a:	4602      	mov	r2, r0
 800978c:	9004      	str	r0, [sp, #16]
 800978e:	2b65      	cmp	r3, #101	; 0x65
 8009790:	d001      	beq.n	8009796 <_strtod_l+0x17e>
 8009792:	2b45      	cmp	r3, #69	; 0x45
 8009794:	d113      	bne.n	80097be <_strtod_l+0x1a6>
 8009796:	b91c      	cbnz	r4, 80097a0 <_strtod_l+0x188>
 8009798:	9b07      	ldr	r3, [sp, #28]
 800979a:	4303      	orrs	r3, r0
 800979c:	d099      	beq.n	80096d2 <_strtod_l+0xba>
 800979e:	2400      	movs	r4, #0
 80097a0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80097a2:	1c73      	adds	r3, r6, #1
 80097a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80097a6:	7873      	ldrb	r3, [r6, #1]
 80097a8:	2b2b      	cmp	r3, #43	; 0x2b
 80097aa:	d078      	beq.n	800989e <_strtod_l+0x286>
 80097ac:	2b2d      	cmp	r3, #45	; 0x2d
 80097ae:	d07b      	beq.n	80098a8 <_strtod_l+0x290>
 80097b0:	2700      	movs	r7, #0
 80097b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80097b6:	2909      	cmp	r1, #9
 80097b8:	f240 8082 	bls.w	80098c0 <_strtod_l+0x2a8>
 80097bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80097be:	2500      	movs	r5, #0
 80097c0:	e09e      	b.n	8009900 <_strtod_l+0x2e8>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e7c9      	b.n	800975a <_strtod_l+0x142>
 80097c6:	f1bb 0f08 	cmp.w	fp, #8
 80097ca:	bfd5      	itete	le
 80097cc:	9906      	ldrle	r1, [sp, #24]
 80097ce:	9905      	ldrgt	r1, [sp, #20]
 80097d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80097d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097d8:	f100 0001 	add.w	r0, r0, #1
 80097dc:	bfd4      	ite	le
 80097de:	9306      	strle	r3, [sp, #24]
 80097e0:	9305      	strgt	r3, [sp, #20]
 80097e2:	f10b 0b01 	add.w	fp, fp, #1
 80097e6:	901b      	str	r0, [sp, #108]	; 0x6c
 80097e8:	e7bf      	b.n	800976a <_strtod_l+0x152>
 80097ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097ec:	191a      	adds	r2, r3, r4
 80097ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80097f0:	5d1b      	ldrb	r3, [r3, r4]
 80097f2:	f1bb 0f00 	cmp.w	fp, #0
 80097f6:	d036      	beq.n	8009866 <_strtod_l+0x24e>
 80097f8:	465c      	mov	r4, fp
 80097fa:	9004      	str	r0, [sp, #16]
 80097fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009800:	2a09      	cmp	r2, #9
 8009802:	d912      	bls.n	800982a <_strtod_l+0x212>
 8009804:	2201      	movs	r2, #1
 8009806:	e7c2      	b.n	800978e <_strtod_l+0x176>
 8009808:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800980a:	3001      	adds	r0, #1
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009810:	785b      	ldrb	r3, [r3, #1]
 8009812:	2b30      	cmp	r3, #48	; 0x30
 8009814:	d0f8      	beq.n	8009808 <_strtod_l+0x1f0>
 8009816:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800981a:	2a08      	cmp	r2, #8
 800981c:	f200 84dc 	bhi.w	800a1d8 <_strtod_l+0xbc0>
 8009820:	9004      	str	r0, [sp, #16]
 8009822:	2000      	movs	r0, #0
 8009824:	4604      	mov	r4, r0
 8009826:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009828:	9208      	str	r2, [sp, #32]
 800982a:	3b30      	subs	r3, #48	; 0x30
 800982c:	f100 0201 	add.w	r2, r0, #1
 8009830:	d013      	beq.n	800985a <_strtod_l+0x242>
 8009832:	9904      	ldr	r1, [sp, #16]
 8009834:	1905      	adds	r5, r0, r4
 8009836:	4411      	add	r1, r2
 8009838:	9104      	str	r1, [sp, #16]
 800983a:	4622      	mov	r2, r4
 800983c:	210a      	movs	r1, #10
 800983e:	42aa      	cmp	r2, r5
 8009840:	d113      	bne.n	800986a <_strtod_l+0x252>
 8009842:	1822      	adds	r2, r4, r0
 8009844:	2a08      	cmp	r2, #8
 8009846:	f104 0401 	add.w	r4, r4, #1
 800984a:	4404      	add	r4, r0
 800984c:	dc1b      	bgt.n	8009886 <_strtod_l+0x26e>
 800984e:	220a      	movs	r2, #10
 8009850:	9906      	ldr	r1, [sp, #24]
 8009852:	fb02 3301 	mla	r3, r2, r1, r3
 8009856:	9306      	str	r3, [sp, #24]
 8009858:	2200      	movs	r2, #0
 800985a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800985c:	4610      	mov	r0, r2
 800985e:	1c59      	adds	r1, r3, #1
 8009860:	911b      	str	r1, [sp, #108]	; 0x6c
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	e7ca      	b.n	80097fc <_strtod_l+0x1e4>
 8009866:	4658      	mov	r0, fp
 8009868:	e7d3      	b.n	8009812 <_strtod_l+0x1fa>
 800986a:	2a08      	cmp	r2, #8
 800986c:	dc04      	bgt.n	8009878 <_strtod_l+0x260>
 800986e:	9f06      	ldr	r7, [sp, #24]
 8009870:	434f      	muls	r7, r1
 8009872:	9706      	str	r7, [sp, #24]
 8009874:	3201      	adds	r2, #1
 8009876:	e7e2      	b.n	800983e <_strtod_l+0x226>
 8009878:	1c57      	adds	r7, r2, #1
 800987a:	2f10      	cmp	r7, #16
 800987c:	bfde      	ittt	le
 800987e:	9f05      	ldrle	r7, [sp, #20]
 8009880:	434f      	mulle	r7, r1
 8009882:	9705      	strle	r7, [sp, #20]
 8009884:	e7f6      	b.n	8009874 <_strtod_l+0x25c>
 8009886:	2c10      	cmp	r4, #16
 8009888:	bfdf      	itttt	le
 800988a:	220a      	movle	r2, #10
 800988c:	9905      	ldrle	r1, [sp, #20]
 800988e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009892:	9305      	strle	r3, [sp, #20]
 8009894:	e7e0      	b.n	8009858 <_strtod_l+0x240>
 8009896:	2300      	movs	r3, #0
 8009898:	2201      	movs	r2, #1
 800989a:	9304      	str	r3, [sp, #16]
 800989c:	e77c      	b.n	8009798 <_strtod_l+0x180>
 800989e:	2700      	movs	r7, #0
 80098a0:	1cb3      	adds	r3, r6, #2
 80098a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80098a4:	78b3      	ldrb	r3, [r6, #2]
 80098a6:	e784      	b.n	80097b2 <_strtod_l+0x19a>
 80098a8:	2701      	movs	r7, #1
 80098aa:	e7f9      	b.n	80098a0 <_strtod_l+0x288>
 80098ac:	0800d4d0 	.word	0x0800d4d0
 80098b0:	0800d27c 	.word	0x0800d27c
 80098b4:	7ff00000 	.word	0x7ff00000
 80098b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098ba:	1c59      	adds	r1, r3, #1
 80098bc:	911b      	str	r1, [sp, #108]	; 0x6c
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b30      	cmp	r3, #48	; 0x30
 80098c2:	d0f9      	beq.n	80098b8 <_strtod_l+0x2a0>
 80098c4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80098c8:	2908      	cmp	r1, #8
 80098ca:	f63f af78 	bhi.w	80097be <_strtod_l+0x1a6>
 80098ce:	f04f 0e0a 	mov.w	lr, #10
 80098d2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80098d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098d8:	9309      	str	r3, [sp, #36]	; 0x24
 80098da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098dc:	1c59      	adds	r1, r3, #1
 80098de:	911b      	str	r1, [sp, #108]	; 0x6c
 80098e0:	785b      	ldrb	r3, [r3, #1]
 80098e2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80098e6:	2d09      	cmp	r5, #9
 80098e8:	d935      	bls.n	8009956 <_strtod_l+0x33e>
 80098ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80098ec:	1b49      	subs	r1, r1, r5
 80098ee:	2908      	cmp	r1, #8
 80098f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80098f4:	dc02      	bgt.n	80098fc <_strtod_l+0x2e4>
 80098f6:	4565      	cmp	r5, ip
 80098f8:	bfa8      	it	ge
 80098fa:	4665      	movge	r5, ip
 80098fc:	b107      	cbz	r7, 8009900 <_strtod_l+0x2e8>
 80098fe:	426d      	negs	r5, r5
 8009900:	2c00      	cmp	r4, #0
 8009902:	d14c      	bne.n	800999e <_strtod_l+0x386>
 8009904:	9907      	ldr	r1, [sp, #28]
 8009906:	4301      	orrs	r1, r0
 8009908:	f47f aec7 	bne.w	800969a <_strtod_l+0x82>
 800990c:	2a00      	cmp	r2, #0
 800990e:	f47f aee0 	bne.w	80096d2 <_strtod_l+0xba>
 8009912:	2b69      	cmp	r3, #105	; 0x69
 8009914:	d026      	beq.n	8009964 <_strtod_l+0x34c>
 8009916:	dc23      	bgt.n	8009960 <_strtod_l+0x348>
 8009918:	2b49      	cmp	r3, #73	; 0x49
 800991a:	d023      	beq.n	8009964 <_strtod_l+0x34c>
 800991c:	2b4e      	cmp	r3, #78	; 0x4e
 800991e:	f47f aed8 	bne.w	80096d2 <_strtod_l+0xba>
 8009922:	499c      	ldr	r1, [pc, #624]	; (8009b94 <_strtod_l+0x57c>)
 8009924:	a81b      	add	r0, sp, #108	; 0x6c
 8009926:	f001 fe2b 	bl	800b580 <__match>
 800992a:	2800      	cmp	r0, #0
 800992c:	f43f aed1 	beq.w	80096d2 <_strtod_l+0xba>
 8009930:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b28      	cmp	r3, #40	; 0x28
 8009936:	d12c      	bne.n	8009992 <_strtod_l+0x37a>
 8009938:	4997      	ldr	r1, [pc, #604]	; (8009b98 <_strtod_l+0x580>)
 800993a:	aa1e      	add	r2, sp, #120	; 0x78
 800993c:	a81b      	add	r0, sp, #108	; 0x6c
 800993e:	f001 fe33 	bl	800b5a8 <__hexnan>
 8009942:	2805      	cmp	r0, #5
 8009944:	d125      	bne.n	8009992 <_strtod_l+0x37a>
 8009946:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009948:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800994c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009950:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009954:	e6a1      	b.n	800969a <_strtod_l+0x82>
 8009956:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800995a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800995e:	e7bc      	b.n	80098da <_strtod_l+0x2c2>
 8009960:	2b6e      	cmp	r3, #110	; 0x6e
 8009962:	e7dc      	b.n	800991e <_strtod_l+0x306>
 8009964:	498d      	ldr	r1, [pc, #564]	; (8009b9c <_strtod_l+0x584>)
 8009966:	a81b      	add	r0, sp, #108	; 0x6c
 8009968:	f001 fe0a 	bl	800b580 <__match>
 800996c:	2800      	cmp	r0, #0
 800996e:	f43f aeb0 	beq.w	80096d2 <_strtod_l+0xba>
 8009972:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009974:	498a      	ldr	r1, [pc, #552]	; (8009ba0 <_strtod_l+0x588>)
 8009976:	3b01      	subs	r3, #1
 8009978:	a81b      	add	r0, sp, #108	; 0x6c
 800997a:	931b      	str	r3, [sp, #108]	; 0x6c
 800997c:	f001 fe00 	bl	800b580 <__match>
 8009980:	b910      	cbnz	r0, 8009988 <_strtod_l+0x370>
 8009982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009984:	3301      	adds	r3, #1
 8009986:	931b      	str	r3, [sp, #108]	; 0x6c
 8009988:	f04f 0800 	mov.w	r8, #0
 800998c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009bb0 <_strtod_l+0x598>
 8009990:	e683      	b.n	800969a <_strtod_l+0x82>
 8009992:	4884      	ldr	r0, [pc, #528]	; (8009ba4 <_strtod_l+0x58c>)
 8009994:	f002 fda6 	bl	800c4e4 <nan>
 8009998:	4680      	mov	r8, r0
 800999a:	4689      	mov	r9, r1
 800999c:	e67d      	b.n	800969a <_strtod_l+0x82>
 800999e:	9b04      	ldr	r3, [sp, #16]
 80099a0:	f1bb 0f00 	cmp.w	fp, #0
 80099a4:	bf08      	it	eq
 80099a6:	46a3      	moveq	fp, r4
 80099a8:	1aeb      	subs	r3, r5, r3
 80099aa:	2c10      	cmp	r4, #16
 80099ac:	9806      	ldr	r0, [sp, #24]
 80099ae:	4626      	mov	r6, r4
 80099b0:	9307      	str	r3, [sp, #28]
 80099b2:	bfa8      	it	ge
 80099b4:	2610      	movge	r6, #16
 80099b6:	f7f6 fd15 	bl	80003e4 <__aeabi_ui2d>
 80099ba:	2c09      	cmp	r4, #9
 80099bc:	4680      	mov	r8, r0
 80099be:	4689      	mov	r9, r1
 80099c0:	dd13      	ble.n	80099ea <_strtod_l+0x3d2>
 80099c2:	4b79      	ldr	r3, [pc, #484]	; (8009ba8 <_strtod_l+0x590>)
 80099c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80099cc:	f7f6 fd84 	bl	80004d8 <__aeabi_dmul>
 80099d0:	4680      	mov	r8, r0
 80099d2:	9805      	ldr	r0, [sp, #20]
 80099d4:	4689      	mov	r9, r1
 80099d6:	f7f6 fd05 	bl	80003e4 <__aeabi_ui2d>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4640      	mov	r0, r8
 80099e0:	4649      	mov	r1, r9
 80099e2:	f7f6 fbc3 	bl	800016c <__adddf3>
 80099e6:	4680      	mov	r8, r0
 80099e8:	4689      	mov	r9, r1
 80099ea:	2c0f      	cmp	r4, #15
 80099ec:	dc36      	bgt.n	8009a5c <_strtod_l+0x444>
 80099ee:	9b07      	ldr	r3, [sp, #28]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f43f ae52 	beq.w	800969a <_strtod_l+0x82>
 80099f6:	dd22      	ble.n	8009a3e <_strtod_l+0x426>
 80099f8:	2b16      	cmp	r3, #22
 80099fa:	dc09      	bgt.n	8009a10 <_strtod_l+0x3f8>
 80099fc:	4c6a      	ldr	r4, [pc, #424]	; (8009ba8 <_strtod_l+0x590>)
 80099fe:	4642      	mov	r2, r8
 8009a00:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009a04:	464b      	mov	r3, r9
 8009a06:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009a0a:	f7f6 fd65 	bl	80004d8 <__aeabi_dmul>
 8009a0e:	e7c3      	b.n	8009998 <_strtod_l+0x380>
 8009a10:	9a07      	ldr	r2, [sp, #28]
 8009a12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009a16:	4293      	cmp	r3, r2
 8009a18:	db20      	blt.n	8009a5c <_strtod_l+0x444>
 8009a1a:	4d63      	ldr	r5, [pc, #396]	; (8009ba8 <_strtod_l+0x590>)
 8009a1c:	f1c4 040f 	rsb	r4, r4, #15
 8009a20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009a24:	4642      	mov	r2, r8
 8009a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	f7f6 fd54 	bl	80004d8 <__aeabi_dmul>
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	1b1c      	subs	r4, r3, r4
 8009a34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009a38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a3c:	e7e5      	b.n	8009a0a <_strtod_l+0x3f2>
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	3316      	adds	r3, #22
 8009a42:	db0b      	blt.n	8009a5c <_strtod_l+0x444>
 8009a44:	9b04      	ldr	r3, [sp, #16]
 8009a46:	4a58      	ldr	r2, [pc, #352]	; (8009ba8 <_strtod_l+0x590>)
 8009a48:	1b5d      	subs	r5, r3, r5
 8009a4a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009a4e:	4640      	mov	r0, r8
 8009a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fe69 	bl	800072c <__aeabi_ddiv>
 8009a5a:	e79d      	b.n	8009998 <_strtod_l+0x380>
 8009a5c:	9b07      	ldr	r3, [sp, #28]
 8009a5e:	1ba6      	subs	r6, r4, r6
 8009a60:	441e      	add	r6, r3
 8009a62:	2e00      	cmp	r6, #0
 8009a64:	dd71      	ble.n	8009b4a <_strtod_l+0x532>
 8009a66:	f016 030f 	ands.w	r3, r6, #15
 8009a6a:	d00a      	beq.n	8009a82 <_strtod_l+0x46a>
 8009a6c:	494e      	ldr	r1, [pc, #312]	; (8009ba8 <_strtod_l+0x590>)
 8009a6e:	4642      	mov	r2, r8
 8009a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a78:	464b      	mov	r3, r9
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	4680      	mov	r8, r0
 8009a80:	4689      	mov	r9, r1
 8009a82:	f036 060f 	bics.w	r6, r6, #15
 8009a86:	d050      	beq.n	8009b2a <_strtod_l+0x512>
 8009a88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009a8c:	dd27      	ble.n	8009ade <_strtod_l+0x4c6>
 8009a8e:	f04f 0b00 	mov.w	fp, #0
 8009a92:	f8cd b010 	str.w	fp, [sp, #16]
 8009a96:	f8cd b020 	str.w	fp, [sp, #32]
 8009a9a:	f8cd b018 	str.w	fp, [sp, #24]
 8009a9e:	2322      	movs	r3, #34	; 0x22
 8009aa0:	f04f 0800 	mov.w	r8, #0
 8009aa4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009bb0 <_strtod_l+0x598>
 8009aa8:	f8ca 3000 	str.w	r3, [sl]
 8009aac:	9b08      	ldr	r3, [sp, #32]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f43f adf3 	beq.w	800969a <_strtod_l+0x82>
 8009ab4:	4650      	mov	r0, sl
 8009ab6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ab8:	f001 fe8c 	bl	800b7d4 <_Bfree>
 8009abc:	4650      	mov	r0, sl
 8009abe:	9906      	ldr	r1, [sp, #24]
 8009ac0:	f001 fe88 	bl	800b7d4 <_Bfree>
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	9904      	ldr	r1, [sp, #16]
 8009ac8:	f001 fe84 	bl	800b7d4 <_Bfree>
 8009acc:	4650      	mov	r0, sl
 8009ace:	9908      	ldr	r1, [sp, #32]
 8009ad0:	f001 fe80 	bl	800b7d4 <_Bfree>
 8009ad4:	4659      	mov	r1, fp
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	f001 fe7c 	bl	800b7d4 <_Bfree>
 8009adc:	e5dd      	b.n	800969a <_strtod_l+0x82>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	461f      	mov	r7, r3
 8009ae6:	1136      	asrs	r6, r6, #4
 8009ae8:	2e01      	cmp	r6, #1
 8009aea:	dc21      	bgt.n	8009b30 <_strtod_l+0x518>
 8009aec:	b10b      	cbz	r3, 8009af2 <_strtod_l+0x4da>
 8009aee:	4680      	mov	r8, r0
 8009af0:	4689      	mov	r9, r1
 8009af2:	4b2e      	ldr	r3, [pc, #184]	; (8009bac <_strtod_l+0x594>)
 8009af4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009af8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009afc:	4642      	mov	r2, r8
 8009afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b02:	464b      	mov	r3, r9
 8009b04:	f7f6 fce8 	bl	80004d8 <__aeabi_dmul>
 8009b08:	4b29      	ldr	r3, [pc, #164]	; (8009bb0 <_strtod_l+0x598>)
 8009b0a:	460a      	mov	r2, r1
 8009b0c:	400b      	ands	r3, r1
 8009b0e:	4929      	ldr	r1, [pc, #164]	; (8009bb4 <_strtod_l+0x59c>)
 8009b10:	4680      	mov	r8, r0
 8009b12:	428b      	cmp	r3, r1
 8009b14:	d8bb      	bhi.n	8009a8e <_strtod_l+0x476>
 8009b16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b1a:	428b      	cmp	r3, r1
 8009b1c:	bf86      	itte	hi
 8009b1e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009b22:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009bb8 <_strtod_l+0x5a0>
 8009b26:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	e07e      	b.n	8009c2e <_strtod_l+0x616>
 8009b30:	07f2      	lsls	r2, r6, #31
 8009b32:	d507      	bpl.n	8009b44 <_strtod_l+0x52c>
 8009b34:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <_strtod_l+0x594>)
 8009b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fccb 	bl	80004d8 <__aeabi_dmul>
 8009b42:	2301      	movs	r3, #1
 8009b44:	3701      	adds	r7, #1
 8009b46:	1076      	asrs	r6, r6, #1
 8009b48:	e7ce      	b.n	8009ae8 <_strtod_l+0x4d0>
 8009b4a:	d0ee      	beq.n	8009b2a <_strtod_l+0x512>
 8009b4c:	4276      	negs	r6, r6
 8009b4e:	f016 020f 	ands.w	r2, r6, #15
 8009b52:	d00a      	beq.n	8009b6a <_strtod_l+0x552>
 8009b54:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <_strtod_l+0x590>)
 8009b56:	4640      	mov	r0, r8
 8009b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fde3 	bl	800072c <__aeabi_ddiv>
 8009b66:	4680      	mov	r8, r0
 8009b68:	4689      	mov	r9, r1
 8009b6a:	1136      	asrs	r6, r6, #4
 8009b6c:	d0dd      	beq.n	8009b2a <_strtod_l+0x512>
 8009b6e:	2e1f      	cmp	r6, #31
 8009b70:	dd24      	ble.n	8009bbc <_strtod_l+0x5a4>
 8009b72:	f04f 0b00 	mov.w	fp, #0
 8009b76:	f8cd b010 	str.w	fp, [sp, #16]
 8009b7a:	f8cd b020 	str.w	fp, [sp, #32]
 8009b7e:	f8cd b018 	str.w	fp, [sp, #24]
 8009b82:	2322      	movs	r3, #34	; 0x22
 8009b84:	f04f 0800 	mov.w	r8, #0
 8009b88:	f04f 0900 	mov.w	r9, #0
 8009b8c:	f8ca 3000 	str.w	r3, [sl]
 8009b90:	e78c      	b.n	8009aac <_strtod_l+0x494>
 8009b92:	bf00      	nop
 8009b94:	0800d24d 	.word	0x0800d24d
 8009b98:	0800d290 	.word	0x0800d290
 8009b9c:	0800d245 	.word	0x0800d245
 8009ba0:	0800d3d4 	.word	0x0800d3d4
 8009ba4:	0800d690 	.word	0x0800d690
 8009ba8:	0800d570 	.word	0x0800d570
 8009bac:	0800d548 	.word	0x0800d548
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	7ca00000 	.word	0x7ca00000
 8009bb8:	7fefffff 	.word	0x7fefffff
 8009bbc:	f016 0310 	ands.w	r3, r6, #16
 8009bc0:	bf18      	it	ne
 8009bc2:	236a      	movne	r3, #106	; 0x6a
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	9305      	str	r3, [sp, #20]
 8009bc8:	4649      	mov	r1, r9
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4fb2      	ldr	r7, [pc, #712]	; (8009e98 <_strtod_l+0x880>)
 8009bce:	07f2      	lsls	r2, r6, #31
 8009bd0:	d504      	bpl.n	8009bdc <_strtod_l+0x5c4>
 8009bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd6:	f7f6 fc7f 	bl	80004d8 <__aeabi_dmul>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	1076      	asrs	r6, r6, #1
 8009bde:	f107 0708 	add.w	r7, r7, #8
 8009be2:	d1f4      	bne.n	8009bce <_strtod_l+0x5b6>
 8009be4:	b10b      	cbz	r3, 8009bea <_strtod_l+0x5d2>
 8009be6:	4680      	mov	r8, r0
 8009be8:	4689      	mov	r9, r1
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	b1bb      	cbz	r3, 8009c1e <_strtod_l+0x606>
 8009bee:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009bf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	dd10      	ble.n	8009c1e <_strtod_l+0x606>
 8009bfc:	2b1f      	cmp	r3, #31
 8009bfe:	f340 812b 	ble.w	8009e58 <_strtod_l+0x840>
 8009c02:	2b34      	cmp	r3, #52	; 0x34
 8009c04:	bfd8      	it	le
 8009c06:	f04f 32ff 	movle.w	r2, #4294967295
 8009c0a:	f04f 0800 	mov.w	r8, #0
 8009c0e:	bfcf      	iteee	gt
 8009c10:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009c14:	3b20      	suble	r3, #32
 8009c16:	fa02 f303 	lslle.w	r3, r2, r3
 8009c1a:	ea03 0901 	andle.w	r9, r3, r1
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2300      	movs	r3, #0
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 febf 	bl	80009a8 <__aeabi_dcmpeq>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1a1      	bne.n	8009b72 <_strtod_l+0x55a>
 8009c2e:	9b06      	ldr	r3, [sp, #24]
 8009c30:	465a      	mov	r2, fp
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	4650      	mov	r0, sl
 8009c36:	4623      	mov	r3, r4
 8009c38:	9908      	ldr	r1, [sp, #32]
 8009c3a:	f001 fe37 	bl	800b8ac <__s2b>
 8009c3e:	9008      	str	r0, [sp, #32]
 8009c40:	2800      	cmp	r0, #0
 8009c42:	f43f af24 	beq.w	8009a8e <_strtod_l+0x476>
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	f04f 0b00 	mov.w	fp, #0
 8009c4c:	1b5d      	subs	r5, r3, r5
 8009c4e:	9b07      	ldr	r3, [sp, #28]
 8009c50:	f8cd b010 	str.w	fp, [sp, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	bfb4      	ite	lt
 8009c58:	462b      	movlt	r3, r5
 8009c5a:	2300      	movge	r3, #0
 8009c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c5e:	9b07      	ldr	r3, [sp, #28]
 8009c60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c64:	9316      	str	r3, [sp, #88]	; 0x58
 8009c66:	9b08      	ldr	r3, [sp, #32]
 8009c68:	4650      	mov	r0, sl
 8009c6a:	6859      	ldr	r1, [r3, #4]
 8009c6c:	f001 fd72 	bl	800b754 <_Balloc>
 8009c70:	9006      	str	r0, [sp, #24]
 8009c72:	2800      	cmp	r0, #0
 8009c74:	f43f af13 	beq.w	8009a9e <_strtod_l+0x486>
 8009c78:	9b08      	ldr	r3, [sp, #32]
 8009c7a:	300c      	adds	r0, #12
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	f103 010c 	add.w	r1, r3, #12
 8009c82:	3202      	adds	r2, #2
 8009c84:	0092      	lsls	r2, r2, #2
 8009c86:	f001 fd57 	bl	800b738 <memcpy>
 8009c8a:	ab1e      	add	r3, sp, #120	; 0x78
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	4642      	mov	r2, r8
 8009c94:	464b      	mov	r3, r9
 8009c96:	4650      	mov	r0, sl
 8009c98:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009c9c:	f002 f944 	bl	800bf28 <__d2b>
 8009ca0:	901c      	str	r0, [sp, #112]	; 0x70
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f43f aefb 	beq.w	8009a9e <_strtod_l+0x486>
 8009ca8:	2101      	movs	r1, #1
 8009caa:	4650      	mov	r0, sl
 8009cac:	f001 fe96 	bl	800b9dc <__i2b>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	9004      	str	r0, [sp, #16]
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f43f aef2 	beq.w	8009a9e <_strtod_l+0x486>
 8009cba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009cbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	bfab      	itete	ge
 8009cc2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009cc4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009cc6:	18ee      	addge	r6, r5, r3
 8009cc8:	1b5c      	sublt	r4, r3, r5
 8009cca:	9b05      	ldr	r3, [sp, #20]
 8009ccc:	bfa8      	it	ge
 8009cce:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009cd0:	eba5 0503 	sub.w	r5, r5, r3
 8009cd4:	4415      	add	r5, r2
 8009cd6:	4b71      	ldr	r3, [pc, #452]	; (8009e9c <_strtod_l+0x884>)
 8009cd8:	f105 35ff 	add.w	r5, r5, #4294967295
 8009cdc:	bfb8      	it	lt
 8009cde:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009ce0:	429d      	cmp	r5, r3
 8009ce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ce6:	f280 80c9 	bge.w	8009e7c <_strtod_l+0x864>
 8009cea:	1b5b      	subs	r3, r3, r5
 8009cec:	2b1f      	cmp	r3, #31
 8009cee:	f04f 0701 	mov.w	r7, #1
 8009cf2:	eba2 0203 	sub.w	r2, r2, r3
 8009cf6:	f300 80b6 	bgt.w	8009e66 <_strtod_l+0x84e>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	fa07 f303 	lsl.w	r3, r7, r3
 8009d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d02:	18b7      	adds	r7, r6, r2
 8009d04:	9b05      	ldr	r3, [sp, #20]
 8009d06:	42be      	cmp	r6, r7
 8009d08:	4414      	add	r4, r2
 8009d0a:	441c      	add	r4, r3
 8009d0c:	4633      	mov	r3, r6
 8009d0e:	bfa8      	it	ge
 8009d10:	463b      	movge	r3, r7
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	bfa8      	it	ge
 8009d16:	4623      	movge	r3, r4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfc2      	ittt	gt
 8009d1c:	1aff      	subgt	r7, r7, r3
 8009d1e:	1ae4      	subgt	r4, r4, r3
 8009d20:	1af6      	subgt	r6, r6, r3
 8009d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dd17      	ble.n	8009d58 <_strtod_l+0x740>
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	9904      	ldr	r1, [sp, #16]
 8009d2e:	f001 ff0f 	bl	800bb50 <__pow5mult>
 8009d32:	9004      	str	r0, [sp, #16]
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f43f aeb2 	beq.w	8009a9e <_strtod_l+0x486>
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d3e:	4650      	mov	r0, sl
 8009d40:	f001 fe62 	bl	800ba08 <__multiply>
 8009d44:	9009      	str	r0, [sp, #36]	; 0x24
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f43f aea9 	beq.w	8009a9e <_strtod_l+0x486>
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d50:	f001 fd40 	bl	800b7d4 <_Bfree>
 8009d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d56:	931c      	str	r3, [sp, #112]	; 0x70
 8009d58:	2f00      	cmp	r7, #0
 8009d5a:	f300 8093 	bgt.w	8009e84 <_strtod_l+0x86c>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	dd08      	ble.n	8009d76 <_strtod_l+0x75e>
 8009d64:	4650      	mov	r0, sl
 8009d66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d68:	9906      	ldr	r1, [sp, #24]
 8009d6a:	f001 fef1 	bl	800bb50 <__pow5mult>
 8009d6e:	9006      	str	r0, [sp, #24]
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f43f ae94 	beq.w	8009a9e <_strtod_l+0x486>
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	dd08      	ble.n	8009d8c <_strtod_l+0x774>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	4650      	mov	r0, sl
 8009d7e:	9906      	ldr	r1, [sp, #24]
 8009d80:	f001 ff40 	bl	800bc04 <__lshift>
 8009d84:	9006      	str	r0, [sp, #24]
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f43f ae89 	beq.w	8009a9e <_strtod_l+0x486>
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	dd08      	ble.n	8009da2 <_strtod_l+0x78a>
 8009d90:	4632      	mov	r2, r6
 8009d92:	4650      	mov	r0, sl
 8009d94:	9904      	ldr	r1, [sp, #16]
 8009d96:	f001 ff35 	bl	800bc04 <__lshift>
 8009d9a:	9004      	str	r0, [sp, #16]
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f43f ae7e 	beq.w	8009a9e <_strtod_l+0x486>
 8009da2:	4650      	mov	r0, sl
 8009da4:	9a06      	ldr	r2, [sp, #24]
 8009da6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009da8:	f001 ffb4 	bl	800bd14 <__mdiff>
 8009dac:	4683      	mov	fp, r0
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f43f ae75 	beq.w	8009a9e <_strtod_l+0x486>
 8009db4:	2400      	movs	r4, #0
 8009db6:	68c3      	ldr	r3, [r0, #12]
 8009db8:	9904      	ldr	r1, [sp, #16]
 8009dba:	60c4      	str	r4, [r0, #12]
 8009dbc:	930d      	str	r3, [sp, #52]	; 0x34
 8009dbe:	f001 ff8d 	bl	800bcdc <__mcmp>
 8009dc2:	42a0      	cmp	r0, r4
 8009dc4:	da70      	bge.n	8009ea8 <_strtod_l+0x890>
 8009dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dc8:	ea53 0308 	orrs.w	r3, r3, r8
 8009dcc:	f040 8096 	bne.w	8009efc <_strtod_l+0x8e4>
 8009dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 8091 	bne.w	8009efc <_strtod_l+0x8e4>
 8009dda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dde:	0d1b      	lsrs	r3, r3, #20
 8009de0:	051b      	lsls	r3, r3, #20
 8009de2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009de6:	f240 8089 	bls.w	8009efc <_strtod_l+0x8e4>
 8009dea:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009dee:	b923      	cbnz	r3, 8009dfa <_strtod_l+0x7e2>
 8009df0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	f340 8081 	ble.w	8009efc <_strtod_l+0x8e4>
 8009dfa:	4659      	mov	r1, fp
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f001 ff00 	bl	800bc04 <__lshift>
 8009e04:	9904      	ldr	r1, [sp, #16]
 8009e06:	4683      	mov	fp, r0
 8009e08:	f001 ff68 	bl	800bcdc <__mcmp>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	dd75      	ble.n	8009efc <_strtod_l+0x8e4>
 8009e10:	9905      	ldr	r1, [sp, #20]
 8009e12:	464b      	mov	r3, r9
 8009e14:	4a22      	ldr	r2, [pc, #136]	; (8009ea0 <_strtod_l+0x888>)
 8009e16:	2900      	cmp	r1, #0
 8009e18:	f000 8091 	beq.w	8009f3e <_strtod_l+0x926>
 8009e1c:	ea02 0109 	and.w	r1, r2, r9
 8009e20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e24:	f300 808b 	bgt.w	8009f3e <_strtod_l+0x926>
 8009e28:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e2c:	f77f aea9 	ble.w	8009b82 <_strtod_l+0x56a>
 8009e30:	2300      	movs	r3, #0
 8009e32:	4a1c      	ldr	r2, [pc, #112]	; (8009ea4 <_strtod_l+0x88c>)
 8009e34:	4640      	mov	r0, r8
 8009e36:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e40:	f7f6 fb4a 	bl	80004d8 <__aeabi_dmul>
 8009e44:	460b      	mov	r3, r1
 8009e46:	4303      	orrs	r3, r0
 8009e48:	bf08      	it	eq
 8009e4a:	2322      	moveq	r3, #34	; 0x22
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	4689      	mov	r9, r1
 8009e50:	bf08      	it	eq
 8009e52:	f8ca 3000 	streq.w	r3, [sl]
 8009e56:	e62d      	b.n	8009ab4 <_strtod_l+0x49c>
 8009e58:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e60:	ea03 0808 	and.w	r8, r3, r8
 8009e64:	e6db      	b.n	8009c1e <_strtod_l+0x606>
 8009e66:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009e6a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009e6e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009e72:	35e2      	adds	r5, #226	; 0xe2
 8009e74:	fa07 f505 	lsl.w	r5, r7, r5
 8009e78:	970f      	str	r7, [sp, #60]	; 0x3c
 8009e7a:	e742      	b.n	8009d02 <_strtod_l+0x6ea>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	2500      	movs	r5, #0
 8009e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e82:	e73e      	b.n	8009d02 <_strtod_l+0x6ea>
 8009e84:	463a      	mov	r2, r7
 8009e86:	4650      	mov	r0, sl
 8009e88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e8a:	f001 febb 	bl	800bc04 <__lshift>
 8009e8e:	901c      	str	r0, [sp, #112]	; 0x70
 8009e90:	2800      	cmp	r0, #0
 8009e92:	f47f af64 	bne.w	8009d5e <_strtod_l+0x746>
 8009e96:	e602      	b.n	8009a9e <_strtod_l+0x486>
 8009e98:	0800d2a8 	.word	0x0800d2a8
 8009e9c:	fffffc02 	.word	0xfffffc02
 8009ea0:	7ff00000 	.word	0x7ff00000
 8009ea4:	39500000 	.word	0x39500000
 8009ea8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009eac:	d166      	bne.n	8009f7c <_strtod_l+0x964>
 8009eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb4:	b35a      	cbz	r2, 8009f0e <_strtod_l+0x8f6>
 8009eb6:	4a9c      	ldr	r2, [pc, #624]	; (800a128 <_strtod_l+0xb10>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d12c      	bne.n	8009f16 <_strtod_l+0x8fe>
 8009ebc:	9b05      	ldr	r3, [sp, #20]
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	b303      	cbz	r3, 8009f04 <_strtod_l+0x8ec>
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	4a99      	ldr	r2, [pc, #612]	; (800a12c <_strtod_l+0xb14>)
 8009ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8009eca:	401a      	ands	r2, r3
 8009ecc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009ed0:	d81b      	bhi.n	8009f0a <_strtod_l+0x8f2>
 8009ed2:	0d12      	lsrs	r2, r2, #20
 8009ed4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8009edc:	4298      	cmp	r0, r3
 8009ede:	d11a      	bne.n	8009f16 <_strtod_l+0x8fe>
 8009ee0:	4b93      	ldr	r3, [pc, #588]	; (800a130 <_strtod_l+0xb18>)
 8009ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d102      	bne.n	8009eee <_strtod_l+0x8d6>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f add8 	beq.w	8009a9e <_strtod_l+0x486>
 8009eee:	f04f 0800 	mov.w	r8, #0
 8009ef2:	4b8e      	ldr	r3, [pc, #568]	; (800a12c <_strtod_l+0xb14>)
 8009ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef6:	401a      	ands	r2, r3
 8009ef8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009efc:	9b05      	ldr	r3, [sp, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d196      	bne.n	8009e30 <_strtod_l+0x818>
 8009f02:	e5d7      	b.n	8009ab4 <_strtod_l+0x49c>
 8009f04:	f04f 33ff 	mov.w	r3, #4294967295
 8009f08:	e7e8      	b.n	8009edc <_strtod_l+0x8c4>
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	e7e6      	b.n	8009edc <_strtod_l+0x8c4>
 8009f0e:	ea53 0308 	orrs.w	r3, r3, r8
 8009f12:	f43f af7d 	beq.w	8009e10 <_strtod_l+0x7f8>
 8009f16:	b1e5      	cbz	r5, 8009f52 <_strtod_l+0x93a>
 8009f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1a:	421d      	tst	r5, r3
 8009f1c:	d0ee      	beq.n	8009efc <_strtod_l+0x8e4>
 8009f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f20:	4640      	mov	r0, r8
 8009f22:	4649      	mov	r1, r9
 8009f24:	9a05      	ldr	r2, [sp, #20]
 8009f26:	b1c3      	cbz	r3, 8009f5a <_strtod_l+0x942>
 8009f28:	f7ff fb54 	bl	80095d4 <sulp>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f34:	f7f6 f91a 	bl	800016c <__adddf3>
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4689      	mov	r9, r1
 8009f3c:	e7de      	b.n	8009efc <_strtod_l+0x8e4>
 8009f3e:	4013      	ands	r3, r2
 8009f40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f44:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f48:	f04f 38ff 	mov.w	r8, #4294967295
 8009f4c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009f50:	e7d4      	b.n	8009efc <_strtod_l+0x8e4>
 8009f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f54:	ea13 0f08 	tst.w	r3, r8
 8009f58:	e7e0      	b.n	8009f1c <_strtod_l+0x904>
 8009f5a:	f7ff fb3b 	bl	80095d4 <sulp>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f66:	f7f6 f8ff 	bl	8000168 <__aeabi_dsub>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4680      	mov	r8, r0
 8009f70:	4689      	mov	r9, r1
 8009f72:	f7f6 fd19 	bl	80009a8 <__aeabi_dcmpeq>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0c0      	beq.n	8009efc <_strtod_l+0x8e4>
 8009f7a:	e602      	b.n	8009b82 <_strtod_l+0x56a>
 8009f7c:	4658      	mov	r0, fp
 8009f7e:	9904      	ldr	r1, [sp, #16]
 8009f80:	f002 f82e 	bl	800bfe0 <__ratio>
 8009f84:	2200      	movs	r2, #0
 8009f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460f      	mov	r7, r1
 8009f8e:	f7f6 fd1f 	bl	80009d0 <__aeabi_dcmple>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d075      	beq.n	800a082 <_strtod_l+0xa6a>
 8009f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d047      	beq.n	800a02c <_strtod_l+0xa14>
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	4f65      	ldr	r7, [pc, #404]	; (800a134 <_strtod_l+0xb1c>)
 8009fa0:	4d64      	ldr	r5, [pc, #400]	; (800a134 <_strtod_l+0xb1c>)
 8009fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fa8:	0d1b      	lsrs	r3, r3, #20
 8009faa:	051b      	lsls	r3, r3, #20
 8009fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fb0:	4b61      	ldr	r3, [pc, #388]	; (800a138 <_strtod_l+0xb20>)
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	f040 80c8 	bne.w	800a148 <_strtod_l+0xb30>
 8009fb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fbc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009fc8:	4649      	mov	r1, r9
 8009fca:	f001 ff33 	bl	800be34 <__ulp>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 fa7f 	bl	80004d8 <__aeabi_dmul>
 8009fda:	4642      	mov	r2, r8
 8009fdc:	464b      	mov	r3, r9
 8009fde:	f7f6 f8c5 	bl	800016c <__adddf3>
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4951      	ldr	r1, [pc, #324]	; (800a12c <_strtod_l+0xb14>)
 8009fe6:	4a55      	ldr	r2, [pc, #340]	; (800a13c <_strtod_l+0xb24>)
 8009fe8:	4019      	ands	r1, r3
 8009fea:	4291      	cmp	r1, r2
 8009fec:	4680      	mov	r8, r0
 8009fee:	d95e      	bls.n	800a0ae <_strtod_l+0xa96>
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d103      	bne.n	800a002 <_strtod_l+0x9ea>
 8009ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f43f ad4e 	beq.w	8009a9e <_strtod_l+0x486>
 800a002:	f04f 38ff 	mov.w	r8, #4294967295
 800a006:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a130 <_strtod_l+0xb18>
 800a00a:	4650      	mov	r0, sl
 800a00c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a00e:	f001 fbe1 	bl	800b7d4 <_Bfree>
 800a012:	4650      	mov	r0, sl
 800a014:	9906      	ldr	r1, [sp, #24]
 800a016:	f001 fbdd 	bl	800b7d4 <_Bfree>
 800a01a:	4650      	mov	r0, sl
 800a01c:	9904      	ldr	r1, [sp, #16]
 800a01e:	f001 fbd9 	bl	800b7d4 <_Bfree>
 800a022:	4659      	mov	r1, fp
 800a024:	4650      	mov	r0, sl
 800a026:	f001 fbd5 	bl	800b7d4 <_Bfree>
 800a02a:	e61c      	b.n	8009c66 <_strtod_l+0x64e>
 800a02c:	f1b8 0f00 	cmp.w	r8, #0
 800a030:	d119      	bne.n	800a066 <_strtod_l+0xa4e>
 800a032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a038:	b9e3      	cbnz	r3, 800a074 <_strtod_l+0xa5c>
 800a03a:	2200      	movs	r2, #0
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	4b3c      	ldr	r3, [pc, #240]	; (800a134 <_strtod_l+0xb1c>)
 800a042:	f7f6 fcbb 	bl	80009bc <__aeabi_dcmplt>
 800a046:	b9c8      	cbnz	r0, 800a07c <_strtod_l+0xa64>
 800a048:	2200      	movs	r2, #0
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	4b3c      	ldr	r3, [pc, #240]	; (800a140 <_strtod_l+0xb28>)
 800a050:	f7f6 fa42 	bl	80004d8 <__aeabi_dmul>
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a05c:	9418      	str	r4, [sp, #96]	; 0x60
 800a05e:	9319      	str	r3, [sp, #100]	; 0x64
 800a060:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a064:	e79d      	b.n	8009fa2 <_strtod_l+0x98a>
 800a066:	f1b8 0f01 	cmp.w	r8, #1
 800a06a:	d103      	bne.n	800a074 <_strtod_l+0xa5c>
 800a06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f43f ad87 	beq.w	8009b82 <_strtod_l+0x56a>
 800a074:	2600      	movs	r6, #0
 800a076:	2400      	movs	r4, #0
 800a078:	4f32      	ldr	r7, [pc, #200]	; (800a144 <_strtod_l+0xb2c>)
 800a07a:	e791      	b.n	8009fa0 <_strtod_l+0x988>
 800a07c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a07e:	4d30      	ldr	r5, [pc, #192]	; (800a140 <_strtod_l+0xb28>)
 800a080:	e7ea      	b.n	800a058 <_strtod_l+0xa40>
 800a082:	4b2f      	ldr	r3, [pc, #188]	; (800a140 <_strtod_l+0xb28>)
 800a084:	2200      	movs	r2, #0
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 fa25 	bl	80004d8 <__aeabi_dmul>
 800a08e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	b933      	cbnz	r3, 800a0a4 <_strtod_l+0xa8c>
 800a096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a09a:	9010      	str	r0, [sp, #64]	; 0x40
 800a09c:	9311      	str	r3, [sp, #68]	; 0x44
 800a09e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a0a2:	e77e      	b.n	8009fa2 <_strtod_l+0x98a>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a0ac:	e7f7      	b.n	800a09e <_strtod_l+0xa86>
 800a0ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a0b2:	9b05      	ldr	r3, [sp, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1a8      	bne.n	800a00a <_strtod_l+0x9f2>
 800a0b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0be:	0d1b      	lsrs	r3, r3, #20
 800a0c0:	051b      	lsls	r3, r3, #20
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d1a1      	bne.n	800a00a <_strtod_l+0x9f2>
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	f7f6 fffb 	bl	80010c4 <__aeabi_d2lz>
 800a0ce:	f7f6 f9d5 	bl	800047c <__aeabi_l2d>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 f845 	bl	8000168 <__aeabi_dsub>
 800a0de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0e4:	ea43 0308 	orr.w	r3, r3, r8
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	d066      	beq.n	800a1be <_strtod_l+0xba6>
 800a0f0:	a309      	add	r3, pc, #36	; (adr r3, 800a118 <_strtod_l+0xb00>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fc61 	bl	80009bc <__aeabi_dcmplt>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f47f acda 	bne.w	8009ab4 <_strtod_l+0x49c>
 800a100:	a307      	add	r3, pc, #28	; (adr r3, 800a120 <_strtod_l+0xb08>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	4620      	mov	r0, r4
 800a108:	4629      	mov	r1, r5
 800a10a:	f7f6 fc75 	bl	80009f8 <__aeabi_dcmpgt>
 800a10e:	2800      	cmp	r0, #0
 800a110:	f43f af7b 	beq.w	800a00a <_strtod_l+0x9f2>
 800a114:	e4ce      	b.n	8009ab4 <_strtod_l+0x49c>
 800a116:	bf00      	nop
 800a118:	94a03595 	.word	0x94a03595
 800a11c:	3fdfffff 	.word	0x3fdfffff
 800a120:	35afe535 	.word	0x35afe535
 800a124:	3fe00000 	.word	0x3fe00000
 800a128:	000fffff 	.word	0x000fffff
 800a12c:	7ff00000 	.word	0x7ff00000
 800a130:	7fefffff 	.word	0x7fefffff
 800a134:	3ff00000 	.word	0x3ff00000
 800a138:	7fe00000 	.word	0x7fe00000
 800a13c:	7c9fffff 	.word	0x7c9fffff
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	bff00000 	.word	0xbff00000
 800a148:	9b05      	ldr	r3, [sp, #20]
 800a14a:	b313      	cbz	r3, 800a192 <_strtod_l+0xb7a>
 800a14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a14e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a152:	d81e      	bhi.n	800a192 <_strtod_l+0xb7a>
 800a154:	a326      	add	r3, pc, #152	; (adr r3, 800a1f0 <_strtod_l+0xbd8>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7f6 fc37 	bl	80009d0 <__aeabi_dcmple>
 800a162:	b190      	cbz	r0, 800a18a <_strtod_l+0xb72>
 800a164:	4629      	mov	r1, r5
 800a166:	4620      	mov	r0, r4
 800a168:	f7f6 fc8e 	bl	8000a88 <__aeabi_d2uiz>
 800a16c:	2801      	cmp	r0, #1
 800a16e:	bf38      	it	cc
 800a170:	2001      	movcc	r0, #1
 800a172:	f7f6 f937 	bl	80003e4 <__aeabi_ui2d>
 800a176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a178:	4604      	mov	r4, r0
 800a17a:	460d      	mov	r5, r1
 800a17c:	b9d3      	cbnz	r3, 800a1b4 <_strtod_l+0xb9c>
 800a17e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a182:	9012      	str	r0, [sp, #72]	; 0x48
 800a184:	9313      	str	r3, [sp, #76]	; 0x4c
 800a186:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a18a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a18c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a190:	1a9f      	subs	r7, r3, r2
 800a192:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a196:	f001 fe4d 	bl	800be34 <__ulp>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f6 f999 	bl	80004d8 <__aeabi_dmul>
 800a1a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1aa:	f7f5 ffdf 	bl	800016c <__adddf3>
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	4689      	mov	r9, r1
 800a1b2:	e77e      	b.n	800a0b2 <_strtod_l+0xa9a>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a1bc:	e7e3      	b.n	800a186 <_strtod_l+0xb6e>
 800a1be:	a30e      	add	r3, pc, #56	; (adr r3, 800a1f8 <_strtod_l+0xbe0>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 fbfa 	bl	80009bc <__aeabi_dcmplt>
 800a1c8:	e7a1      	b.n	800a10e <_strtod_l+0xaf6>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	f7ff ba65 	b.w	80096a2 <_strtod_l+0x8a>
 800a1d8:	2b65      	cmp	r3, #101	; 0x65
 800a1da:	f43f ab5c 	beq.w	8009896 <_strtod_l+0x27e>
 800a1de:	2b45      	cmp	r3, #69	; 0x45
 800a1e0:	f43f ab59 	beq.w	8009896 <_strtod_l+0x27e>
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f7ff bb8d 	b.w	8009904 <_strtod_l+0x2ec>
 800a1ea:	bf00      	nop
 800a1ec:	f3af 8000 	nop.w
 800a1f0:	ffc00000 	.word	0xffc00000
 800a1f4:	41dfffff 	.word	0x41dfffff
 800a1f8:	94a03595 	.word	0x94a03595
 800a1fc:	3fcfffff 	.word	0x3fcfffff

0800a200 <_strtod_r>:
 800a200:	4b01      	ldr	r3, [pc, #4]	; (800a208 <_strtod_r+0x8>)
 800a202:	f7ff ba09 	b.w	8009618 <_strtod_l>
 800a206:	bf00      	nop
 800a208:	20000078 	.word	0x20000078

0800a20c <_strtol_l.isra.0>:
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a212:	4686      	mov	lr, r0
 800a214:	d001      	beq.n	800a21a <_strtol_l.isra.0+0xe>
 800a216:	2b24      	cmp	r3, #36	; 0x24
 800a218:	d906      	bls.n	800a228 <_strtol_l.isra.0+0x1c>
 800a21a:	f7fe fb13 	bl	8008844 <__errno>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	2000      	movs	r0, #0
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	468c      	mov	ip, r1
 800a22a:	4e3a      	ldr	r6, [pc, #232]	; (800a314 <_strtol_l.isra.0+0x108>)
 800a22c:	4660      	mov	r0, ip
 800a22e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a232:	5da5      	ldrb	r5, [r4, r6]
 800a234:	f015 0508 	ands.w	r5, r5, #8
 800a238:	d1f8      	bne.n	800a22c <_strtol_l.isra.0+0x20>
 800a23a:	2c2d      	cmp	r4, #45	; 0x2d
 800a23c:	d133      	bne.n	800a2a6 <_strtol_l.isra.0+0x9a>
 800a23e:	f04f 0801 	mov.w	r8, #1
 800a242:	f89c 4000 	ldrb.w	r4, [ip]
 800a246:	f100 0c02 	add.w	ip, r0, #2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d05d      	beq.n	800a30a <_strtol_l.isra.0+0xfe>
 800a24e:	2b10      	cmp	r3, #16
 800a250:	d10c      	bne.n	800a26c <_strtol_l.isra.0+0x60>
 800a252:	2c30      	cmp	r4, #48	; 0x30
 800a254:	d10a      	bne.n	800a26c <_strtol_l.isra.0+0x60>
 800a256:	f89c 0000 	ldrb.w	r0, [ip]
 800a25a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a25e:	2858      	cmp	r0, #88	; 0x58
 800a260:	d14e      	bne.n	800a300 <_strtol_l.isra.0+0xf4>
 800a262:	2310      	movs	r3, #16
 800a264:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a268:	f10c 0c02 	add.w	ip, ip, #2
 800a26c:	2500      	movs	r5, #0
 800a26e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a272:	3f01      	subs	r7, #1
 800a274:	fbb7 f9f3 	udiv	r9, r7, r3
 800a278:	4628      	mov	r0, r5
 800a27a:	fb03 7a19 	mls	sl, r3, r9, r7
 800a27e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a282:	2e09      	cmp	r6, #9
 800a284:	d818      	bhi.n	800a2b8 <_strtol_l.isra.0+0xac>
 800a286:	4634      	mov	r4, r6
 800a288:	42a3      	cmp	r3, r4
 800a28a:	dd24      	ble.n	800a2d6 <_strtol_l.isra.0+0xca>
 800a28c:	2d00      	cmp	r5, #0
 800a28e:	db1f      	blt.n	800a2d0 <_strtol_l.isra.0+0xc4>
 800a290:	4581      	cmp	r9, r0
 800a292:	d31d      	bcc.n	800a2d0 <_strtol_l.isra.0+0xc4>
 800a294:	d101      	bne.n	800a29a <_strtol_l.isra.0+0x8e>
 800a296:	45a2      	cmp	sl, r4
 800a298:	db1a      	blt.n	800a2d0 <_strtol_l.isra.0+0xc4>
 800a29a:	2501      	movs	r5, #1
 800a29c:	fb00 4003 	mla	r0, r0, r3, r4
 800a2a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a2a4:	e7eb      	b.n	800a27e <_strtol_l.isra.0+0x72>
 800a2a6:	2c2b      	cmp	r4, #43	; 0x2b
 800a2a8:	bf08      	it	eq
 800a2aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a2ae:	46a8      	mov	r8, r5
 800a2b0:	bf08      	it	eq
 800a2b2:	f100 0c02 	addeq.w	ip, r0, #2
 800a2b6:	e7c8      	b.n	800a24a <_strtol_l.isra.0+0x3e>
 800a2b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a2bc:	2e19      	cmp	r6, #25
 800a2be:	d801      	bhi.n	800a2c4 <_strtol_l.isra.0+0xb8>
 800a2c0:	3c37      	subs	r4, #55	; 0x37
 800a2c2:	e7e1      	b.n	800a288 <_strtol_l.isra.0+0x7c>
 800a2c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a2c8:	2e19      	cmp	r6, #25
 800a2ca:	d804      	bhi.n	800a2d6 <_strtol_l.isra.0+0xca>
 800a2cc:	3c57      	subs	r4, #87	; 0x57
 800a2ce:	e7db      	b.n	800a288 <_strtol_l.isra.0+0x7c>
 800a2d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a2d4:	e7e4      	b.n	800a2a0 <_strtol_l.isra.0+0x94>
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	da08      	bge.n	800a2ec <_strtol_l.isra.0+0xe0>
 800a2da:	2322      	movs	r3, #34	; 0x22
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f8ce 3000 	str.w	r3, [lr]
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d09e      	beq.n	800a224 <_strtol_l.isra.0+0x18>
 800a2e6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a2ea:	e007      	b.n	800a2fc <_strtol_l.isra.0+0xf0>
 800a2ec:	f1b8 0f00 	cmp.w	r8, #0
 800a2f0:	d000      	beq.n	800a2f4 <_strtol_l.isra.0+0xe8>
 800a2f2:	4240      	negs	r0, r0
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	d095      	beq.n	800a224 <_strtol_l.isra.0+0x18>
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	d1f4      	bne.n	800a2e6 <_strtol_l.isra.0+0xda>
 800a2fc:	6011      	str	r1, [r2, #0]
 800a2fe:	e791      	b.n	800a224 <_strtol_l.isra.0+0x18>
 800a300:	2430      	movs	r4, #48	; 0x30
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1b2      	bne.n	800a26c <_strtol_l.isra.0+0x60>
 800a306:	2308      	movs	r3, #8
 800a308:	e7b0      	b.n	800a26c <_strtol_l.isra.0+0x60>
 800a30a:	2c30      	cmp	r4, #48	; 0x30
 800a30c:	d0a3      	beq.n	800a256 <_strtol_l.isra.0+0x4a>
 800a30e:	230a      	movs	r3, #10
 800a310:	e7ac      	b.n	800a26c <_strtol_l.isra.0+0x60>
 800a312:	bf00      	nop
 800a314:	0800d2d1 	.word	0x0800d2d1

0800a318 <_strtol_r>:
 800a318:	f7ff bf78 	b.w	800a20c <_strtol_l.isra.0>

0800a31c <quorem>:
 800a31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	6903      	ldr	r3, [r0, #16]
 800a322:	690c      	ldr	r4, [r1, #16]
 800a324:	4607      	mov	r7, r0
 800a326:	42a3      	cmp	r3, r4
 800a328:	f2c0 8083 	blt.w	800a432 <quorem+0x116>
 800a32c:	3c01      	subs	r4, #1
 800a32e:	f100 0514 	add.w	r5, r0, #20
 800a332:	f101 0814 	add.w	r8, r1, #20
 800a336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a344:	3301      	adds	r3, #1
 800a346:	429a      	cmp	r2, r3
 800a348:	fbb2 f6f3 	udiv	r6, r2, r3
 800a34c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a354:	d332      	bcc.n	800a3bc <quorem+0xa0>
 800a356:	f04f 0e00 	mov.w	lr, #0
 800a35a:	4640      	mov	r0, r8
 800a35c:	46ac      	mov	ip, r5
 800a35e:	46f2      	mov	sl, lr
 800a360:	f850 2b04 	ldr.w	r2, [r0], #4
 800a364:	b293      	uxth	r3, r2
 800a366:	fb06 e303 	mla	r3, r6, r3, lr
 800a36a:	0c12      	lsrs	r2, r2, #16
 800a36c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a370:	fb06 e202 	mla	r2, r6, r2, lr
 800a374:	b29b      	uxth	r3, r3
 800a376:	ebaa 0303 	sub.w	r3, sl, r3
 800a37a:	f8dc a000 	ldr.w	sl, [ip]
 800a37e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a382:	fa1f fa8a 	uxth.w	sl, sl
 800a386:	4453      	add	r3, sl
 800a388:	fa1f fa82 	uxth.w	sl, r2
 800a38c:	f8dc 2000 	ldr.w	r2, [ip]
 800a390:	4581      	cmp	r9, r0
 800a392:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a396:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3a4:	f84c 3b04 	str.w	r3, [ip], #4
 800a3a8:	d2da      	bcs.n	800a360 <quorem+0x44>
 800a3aa:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3ae:	b92b      	cbnz	r3, 800a3bc <quorem+0xa0>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	3b04      	subs	r3, #4
 800a3b4:	429d      	cmp	r5, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	d32f      	bcc.n	800a41a <quorem+0xfe>
 800a3ba:	613c      	str	r4, [r7, #16]
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f001 fc8d 	bl	800bcdc <__mcmp>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	db25      	blt.n	800a412 <quorem+0xf6>
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f04f 0c00 	mov.w	ip, #0
 800a3cc:	3601      	adds	r6, #1
 800a3ce:	f858 1b04 	ldr.w	r1, [r8], #4
 800a3d2:	f8d0 e000 	ldr.w	lr, [r0]
 800a3d6:	b28b      	uxth	r3, r1
 800a3d8:	ebac 0303 	sub.w	r3, ip, r3
 800a3dc:	fa1f f28e 	uxth.w	r2, lr
 800a3e0:	4413      	add	r3, r2
 800a3e2:	0c0a      	lsrs	r2, r1, #16
 800a3e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3f2:	45c1      	cmp	r9, r8
 800a3f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3f8:	f840 3b04 	str.w	r3, [r0], #4
 800a3fc:	d2e7      	bcs.n	800a3ce <quorem+0xb2>
 800a3fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a406:	b922      	cbnz	r2, 800a412 <quorem+0xf6>
 800a408:	3b04      	subs	r3, #4
 800a40a:	429d      	cmp	r5, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	d30a      	bcc.n	800a426 <quorem+0x10a>
 800a410:	613c      	str	r4, [r7, #16]
 800a412:	4630      	mov	r0, r6
 800a414:	b003      	add	sp, #12
 800a416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	3b04      	subs	r3, #4
 800a41e:	2a00      	cmp	r2, #0
 800a420:	d1cb      	bne.n	800a3ba <quorem+0x9e>
 800a422:	3c01      	subs	r4, #1
 800a424:	e7c6      	b.n	800a3b4 <quorem+0x98>
 800a426:	6812      	ldr	r2, [r2, #0]
 800a428:	3b04      	subs	r3, #4
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	d1f0      	bne.n	800a410 <quorem+0xf4>
 800a42e:	3c01      	subs	r4, #1
 800a430:	e7eb      	b.n	800a40a <quorem+0xee>
 800a432:	2000      	movs	r0, #0
 800a434:	e7ee      	b.n	800a414 <quorem+0xf8>
	...

0800a438 <_dtoa_r>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	4616      	mov	r6, r2
 800a43e:	461f      	mov	r7, r3
 800a440:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a442:	b099      	sub	sp, #100	; 0x64
 800a444:	4605      	mov	r5, r0
 800a446:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a44a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a44e:	b974      	cbnz	r4, 800a46e <_dtoa_r+0x36>
 800a450:	2010      	movs	r0, #16
 800a452:	f001 f949 	bl	800b6e8 <malloc>
 800a456:	4602      	mov	r2, r0
 800a458:	6268      	str	r0, [r5, #36]	; 0x24
 800a45a:	b920      	cbnz	r0, 800a466 <_dtoa_r+0x2e>
 800a45c:	21ea      	movs	r1, #234	; 0xea
 800a45e:	4bae      	ldr	r3, [pc, #696]	; (800a718 <_dtoa_r+0x2e0>)
 800a460:	48ae      	ldr	r0, [pc, #696]	; (800a71c <_dtoa_r+0x2e4>)
 800a462:	f002 f875 	bl	800c550 <__assert_func>
 800a466:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a46a:	6004      	str	r4, [r0, #0]
 800a46c:	60c4      	str	r4, [r0, #12]
 800a46e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	b151      	cbz	r1, 800a48a <_dtoa_r+0x52>
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	2301      	movs	r3, #1
 800a478:	4093      	lsls	r3, r2
 800a47a:	604a      	str	r2, [r1, #4]
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	4628      	mov	r0, r5
 800a480:	f001 f9a8 	bl	800b7d4 <_Bfree>
 800a484:	2200      	movs	r2, #0
 800a486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	1e3b      	subs	r3, r7, #0
 800a48c:	bfaf      	iteee	ge
 800a48e:	2300      	movge	r3, #0
 800a490:	2201      	movlt	r2, #1
 800a492:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a496:	9305      	strlt	r3, [sp, #20]
 800a498:	bfa8      	it	ge
 800a49a:	f8c8 3000 	strge.w	r3, [r8]
 800a49e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a4a2:	4b9f      	ldr	r3, [pc, #636]	; (800a720 <_dtoa_r+0x2e8>)
 800a4a4:	bfb8      	it	lt
 800a4a6:	f8c8 2000 	strlt.w	r2, [r8]
 800a4aa:	ea33 0309 	bics.w	r3, r3, r9
 800a4ae:	d119      	bne.n	800a4e4 <_dtoa_r+0xac>
 800a4b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4bc:	4333      	orrs	r3, r6
 800a4be:	f000 8580 	beq.w	800afc2 <_dtoa_r+0xb8a>
 800a4c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4c4:	b953      	cbnz	r3, 800a4dc <_dtoa_r+0xa4>
 800a4c6:	4b97      	ldr	r3, [pc, #604]	; (800a724 <_dtoa_r+0x2ec>)
 800a4c8:	e022      	b.n	800a510 <_dtoa_r+0xd8>
 800a4ca:	4b97      	ldr	r3, [pc, #604]	; (800a728 <_dtoa_r+0x2f0>)
 800a4cc:	9308      	str	r3, [sp, #32]
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	9808      	ldr	r0, [sp, #32]
 800a4d6:	b019      	add	sp, #100	; 0x64
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	4b91      	ldr	r3, [pc, #580]	; (800a724 <_dtoa_r+0x2ec>)
 800a4de:	9308      	str	r3, [sp, #32]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	e7f5      	b.n	800a4d0 <_dtoa_r+0x98>
 800a4e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a4e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a4ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f7f6 fa58 	bl	80009a8 <__aeabi_dcmpeq>
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	b158      	cbz	r0, 800a514 <_dtoa_r+0xdc>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 8559 	beq.w	800afbc <_dtoa_r+0xb84>
 800a50a:	4888      	ldr	r0, [pc, #544]	; (800a72c <_dtoa_r+0x2f4>)
 800a50c:	6018      	str	r0, [r3, #0]
 800a50e:	1e43      	subs	r3, r0, #1
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	e7df      	b.n	800a4d4 <_dtoa_r+0x9c>
 800a514:	ab16      	add	r3, sp, #88	; 0x58
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	ab17      	add	r3, sp, #92	; 0x5c
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	4628      	mov	r0, r5
 800a51e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a522:	f001 fd01 	bl	800bf28 <__d2b>
 800a526:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a52a:	4682      	mov	sl, r0
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	d07e      	beq.n	800a62e <_dtoa_r+0x1f6>
 800a530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a536:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a53a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a53e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a542:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a546:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a54a:	2200      	movs	r2, #0
 800a54c:	4b78      	ldr	r3, [pc, #480]	; (800a730 <_dtoa_r+0x2f8>)
 800a54e:	f7f5 fe0b 	bl	8000168 <__aeabi_dsub>
 800a552:	a36b      	add	r3, pc, #428	; (adr r3, 800a700 <_dtoa_r+0x2c8>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f7f5 ffbe 	bl	80004d8 <__aeabi_dmul>
 800a55c:	a36a      	add	r3, pc, #424	; (adr r3, 800a708 <_dtoa_r+0x2d0>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fe03 	bl	800016c <__adddf3>
 800a566:	4606      	mov	r6, r0
 800a568:	4620      	mov	r0, r4
 800a56a:	460f      	mov	r7, r1
 800a56c:	f7f5 ff4a 	bl	8000404 <__aeabi_i2d>
 800a570:	a367      	add	r3, pc, #412	; (adr r3, 800a710 <_dtoa_r+0x2d8>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f5 ffaf 	bl	80004d8 <__aeabi_dmul>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4630      	mov	r0, r6
 800a580:	4639      	mov	r1, r7
 800a582:	f7f5 fdf3 	bl	800016c <__adddf3>
 800a586:	4606      	mov	r6, r0
 800a588:	460f      	mov	r7, r1
 800a58a:	f7f6 fa55 	bl	8000a38 <__aeabi_d2iz>
 800a58e:	2200      	movs	r2, #0
 800a590:	4681      	mov	r9, r0
 800a592:	2300      	movs	r3, #0
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f7f6 fa10 	bl	80009bc <__aeabi_dcmplt>
 800a59c:	b148      	cbz	r0, 800a5b2 <_dtoa_r+0x17a>
 800a59e:	4648      	mov	r0, r9
 800a5a0:	f7f5 ff30 	bl	8000404 <__aeabi_i2d>
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	f7f6 f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 800a5ac:	b908      	cbnz	r0, 800a5b2 <_dtoa_r+0x17a>
 800a5ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5b2:	f1b9 0f16 	cmp.w	r9, #22
 800a5b6:	d857      	bhi.n	800a668 <_dtoa_r+0x230>
 800a5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5bc:	4b5d      	ldr	r3, [pc, #372]	; (800a734 <_dtoa_r+0x2fc>)
 800a5be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f7f6 f9f9 	bl	80009bc <__aeabi_dcmplt>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d04e      	beq.n	800a66c <_dtoa_r+0x234>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5d8:	1b1c      	subs	r4, r3, r4
 800a5da:	1e63      	subs	r3, r4, #1
 800a5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5de:	bf49      	itett	mi
 800a5e0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a5e4:	2300      	movpl	r3, #0
 800a5e6:	9306      	strmi	r3, [sp, #24]
 800a5e8:	2300      	movmi	r3, #0
 800a5ea:	bf54      	ite	pl
 800a5ec:	9306      	strpl	r3, [sp, #24]
 800a5ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	db3c      	blt.n	800a670 <_dtoa_r+0x238>
 800a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a5fc:	444b      	add	r3, r9
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	2300      	movs	r3, #0
 800a602:	930a      	str	r3, [sp, #40]	; 0x28
 800a604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a606:	2b09      	cmp	r3, #9
 800a608:	d86c      	bhi.n	800a6e4 <_dtoa_r+0x2ac>
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	bfc4      	itt	gt
 800a60e:	3b04      	subgt	r3, #4
 800a610:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a614:	bfc8      	it	gt
 800a616:	2400      	movgt	r4, #0
 800a618:	f1a3 0302 	sub.w	r3, r3, #2
 800a61c:	bfd8      	it	le
 800a61e:	2401      	movle	r4, #1
 800a620:	2b03      	cmp	r3, #3
 800a622:	f200 808b 	bhi.w	800a73c <_dtoa_r+0x304>
 800a626:	e8df f003 	tbb	[pc, r3]
 800a62a:	4f2d      	.short	0x4f2d
 800a62c:	5b4d      	.short	0x5b4d
 800a62e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a632:	441c      	add	r4, r3
 800a634:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a638:	2b20      	cmp	r3, #32
 800a63a:	bfc3      	ittte	gt
 800a63c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a640:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a644:	fa09 f303 	lslgt.w	r3, r9, r3
 800a648:	f1c3 0320 	rsble	r3, r3, #32
 800a64c:	bfc6      	itte	gt
 800a64e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a652:	4318      	orrgt	r0, r3
 800a654:	fa06 f003 	lslle.w	r0, r6, r3
 800a658:	f7f5 fec4 	bl	80003e4 <__aeabi_ui2d>
 800a65c:	2301      	movs	r3, #1
 800a65e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a662:	3c01      	subs	r4, #1
 800a664:	9313      	str	r3, [sp, #76]	; 0x4c
 800a666:	e770      	b.n	800a54a <_dtoa_r+0x112>
 800a668:	2301      	movs	r3, #1
 800a66a:	e7b3      	b.n	800a5d4 <_dtoa_r+0x19c>
 800a66c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a66e:	e7b2      	b.n	800a5d6 <_dtoa_r+0x19e>
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	eba3 0309 	sub.w	r3, r3, r9
 800a676:	9306      	str	r3, [sp, #24]
 800a678:	f1c9 0300 	rsb	r3, r9, #0
 800a67c:	930a      	str	r3, [sp, #40]	; 0x28
 800a67e:	2300      	movs	r3, #0
 800a680:	930e      	str	r3, [sp, #56]	; 0x38
 800a682:	e7bf      	b.n	800a604 <_dtoa_r+0x1cc>
 800a684:	2300      	movs	r3, #0
 800a686:	930b      	str	r3, [sp, #44]	; 0x2c
 800a688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dc59      	bgt.n	800a742 <_dtoa_r+0x30a>
 800a68e:	f04f 0b01 	mov.w	fp, #1
 800a692:	465b      	mov	r3, fp
 800a694:	f8cd b008 	str.w	fp, [sp, #8]
 800a698:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a69c:	2200      	movs	r2, #0
 800a69e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a6a0:	6042      	str	r2, [r0, #4]
 800a6a2:	2204      	movs	r2, #4
 800a6a4:	f102 0614 	add.w	r6, r2, #20
 800a6a8:	429e      	cmp	r6, r3
 800a6aa:	6841      	ldr	r1, [r0, #4]
 800a6ac:	d94f      	bls.n	800a74e <_dtoa_r+0x316>
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f001 f850 	bl	800b754 <_Balloc>
 800a6b4:	9008      	str	r0, [sp, #32]
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d14d      	bne.n	800a756 <_dtoa_r+0x31e>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6c0:	4b1d      	ldr	r3, [pc, #116]	; (800a738 <_dtoa_r+0x300>)
 800a6c2:	e6cd      	b.n	800a460 <_dtoa_r+0x28>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e7de      	b.n	800a686 <_dtoa_r+0x24e>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6ce:	eb09 0b03 	add.w	fp, r9, r3
 800a6d2:	f10b 0301 	add.w	r3, fp, #1
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	9302      	str	r3, [sp, #8]
 800a6da:	bfb8      	it	lt
 800a6dc:	2301      	movlt	r3, #1
 800a6de:	e7dd      	b.n	800a69c <_dtoa_r+0x264>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e7f2      	b.n	800a6ca <_dtoa_r+0x292>
 800a6e4:	2401      	movs	r4, #1
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6ea:	9322      	str	r3, [sp, #136]	; 0x88
 800a6ec:	f04f 3bff 	mov.w	fp, #4294967295
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2312      	movs	r3, #18
 800a6f4:	f8cd b008 	str.w	fp, [sp, #8]
 800a6f8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6fa:	e7cf      	b.n	800a69c <_dtoa_r+0x264>
 800a6fc:	f3af 8000 	nop.w
 800a700:	636f4361 	.word	0x636f4361
 800a704:	3fd287a7 	.word	0x3fd287a7
 800a708:	8b60c8b3 	.word	0x8b60c8b3
 800a70c:	3fc68a28 	.word	0x3fc68a28
 800a710:	509f79fb 	.word	0x509f79fb
 800a714:	3fd34413 	.word	0x3fd34413
 800a718:	0800d3de 	.word	0x0800d3de
 800a71c:	0800d3f5 	.word	0x0800d3f5
 800a720:	7ff00000 	.word	0x7ff00000
 800a724:	0800d3da 	.word	0x0800d3da
 800a728:	0800d3d1 	.word	0x0800d3d1
 800a72c:	0800d251 	.word	0x0800d251
 800a730:	3ff80000 	.word	0x3ff80000
 800a734:	0800d570 	.word	0x0800d570
 800a738:	0800d454 	.word	0x0800d454
 800a73c:	2301      	movs	r3, #1
 800a73e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a740:	e7d4      	b.n	800a6ec <_dtoa_r+0x2b4>
 800a742:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a746:	465b      	mov	r3, fp
 800a748:	f8cd b008 	str.w	fp, [sp, #8]
 800a74c:	e7a6      	b.n	800a69c <_dtoa_r+0x264>
 800a74e:	3101      	adds	r1, #1
 800a750:	6041      	str	r1, [r0, #4]
 800a752:	0052      	lsls	r2, r2, #1
 800a754:	e7a6      	b.n	800a6a4 <_dtoa_r+0x26c>
 800a756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a758:	9a08      	ldr	r2, [sp, #32]
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	9b02      	ldr	r3, [sp, #8]
 800a75e:	2b0e      	cmp	r3, #14
 800a760:	f200 80a8 	bhi.w	800a8b4 <_dtoa_r+0x47c>
 800a764:	2c00      	cmp	r4, #0
 800a766:	f000 80a5 	beq.w	800a8b4 <_dtoa_r+0x47c>
 800a76a:	f1b9 0f00 	cmp.w	r9, #0
 800a76e:	dd34      	ble.n	800a7da <_dtoa_r+0x3a2>
 800a770:	4a9a      	ldr	r2, [pc, #616]	; (800a9dc <_dtoa_r+0x5a4>)
 800a772:	f009 030f 	and.w	r3, r9, #15
 800a776:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a77a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a77e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a782:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a786:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a78a:	d016      	beq.n	800a7ba <_dtoa_r+0x382>
 800a78c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a790:	4b93      	ldr	r3, [pc, #588]	; (800a9e0 <_dtoa_r+0x5a8>)
 800a792:	2703      	movs	r7, #3
 800a794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a798:	f7f5 ffc8 	bl	800072c <__aeabi_ddiv>
 800a79c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7a0:	f004 040f 	and.w	r4, r4, #15
 800a7a4:	4e8e      	ldr	r6, [pc, #568]	; (800a9e0 <_dtoa_r+0x5a8>)
 800a7a6:	b954      	cbnz	r4, 800a7be <_dtoa_r+0x386>
 800a7a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7b0:	f7f5 ffbc 	bl	800072c <__aeabi_ddiv>
 800a7b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7b8:	e029      	b.n	800a80e <_dtoa_r+0x3d6>
 800a7ba:	2702      	movs	r7, #2
 800a7bc:	e7f2      	b.n	800a7a4 <_dtoa_r+0x36c>
 800a7be:	07e1      	lsls	r1, r4, #31
 800a7c0:	d508      	bpl.n	800a7d4 <_dtoa_r+0x39c>
 800a7c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7ca:	f7f5 fe85 	bl	80004d8 <__aeabi_dmul>
 800a7ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7d2:	3701      	adds	r7, #1
 800a7d4:	1064      	asrs	r4, r4, #1
 800a7d6:	3608      	adds	r6, #8
 800a7d8:	e7e5      	b.n	800a7a6 <_dtoa_r+0x36e>
 800a7da:	f000 80a5 	beq.w	800a928 <_dtoa_r+0x4f0>
 800a7de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7e2:	f1c9 0400 	rsb	r4, r9, #0
 800a7e6:	4b7d      	ldr	r3, [pc, #500]	; (800a9dc <_dtoa_r+0x5a4>)
 800a7e8:	f004 020f 	and.w	r2, r4, #15
 800a7ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f5 fe70 	bl	80004d8 <__aeabi_dmul>
 800a7f8:	2702      	movs	r7, #2
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a800:	4e77      	ldr	r6, [pc, #476]	; (800a9e0 <_dtoa_r+0x5a8>)
 800a802:	1124      	asrs	r4, r4, #4
 800a804:	2c00      	cmp	r4, #0
 800a806:	f040 8084 	bne.w	800a912 <_dtoa_r+0x4da>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1d2      	bne.n	800a7b4 <_dtoa_r+0x37c>
 800a80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 808b 	beq.w	800a92c <_dtoa_r+0x4f4>
 800a816:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a81a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a81e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a822:	2200      	movs	r2, #0
 800a824:	4b6f      	ldr	r3, [pc, #444]	; (800a9e4 <_dtoa_r+0x5ac>)
 800a826:	f7f6 f8c9 	bl	80009bc <__aeabi_dcmplt>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d07e      	beq.n	800a92c <_dtoa_r+0x4f4>
 800a82e:	9b02      	ldr	r3, [sp, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d07b      	beq.n	800a92c <_dtoa_r+0x4f4>
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	dd38      	ble.n	800a8ac <_dtoa_r+0x474>
 800a83a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a83e:	2200      	movs	r2, #0
 800a840:	4b69      	ldr	r3, [pc, #420]	; (800a9e8 <_dtoa_r+0x5b0>)
 800a842:	f7f5 fe49 	bl	80004d8 <__aeabi_dmul>
 800a846:	465c      	mov	r4, fp
 800a848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a84c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a850:	3701      	adds	r7, #1
 800a852:	4638      	mov	r0, r7
 800a854:	f7f5 fdd6 	bl	8000404 <__aeabi_i2d>
 800a858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a85c:	f7f5 fe3c 	bl	80004d8 <__aeabi_dmul>
 800a860:	2200      	movs	r2, #0
 800a862:	4b62      	ldr	r3, [pc, #392]	; (800a9ec <_dtoa_r+0x5b4>)
 800a864:	f7f5 fc82 	bl	800016c <__adddf3>
 800a868:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a86c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a870:	9611      	str	r6, [sp, #68]	; 0x44
 800a872:	2c00      	cmp	r4, #0
 800a874:	d15d      	bne.n	800a932 <_dtoa_r+0x4fa>
 800a876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a87a:	2200      	movs	r2, #0
 800a87c:	4b5c      	ldr	r3, [pc, #368]	; (800a9f0 <_dtoa_r+0x5b8>)
 800a87e:	f7f5 fc73 	bl	8000168 <__aeabi_dsub>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a88a:	4633      	mov	r3, r6
 800a88c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a88e:	f7f6 f8b3 	bl	80009f8 <__aeabi_dcmpgt>
 800a892:	2800      	cmp	r0, #0
 800a894:	f040 829e 	bne.w	800add4 <_dtoa_r+0x99c>
 800a898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a89c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a89e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a8a2:	f7f6 f88b 	bl	80009bc <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f040 8292 	bne.w	800add0 <_dtoa_r+0x998>
 800a8ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a8b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a8b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f2c0 8153 	blt.w	800ab62 <_dtoa_r+0x72a>
 800a8bc:	f1b9 0f0e 	cmp.w	r9, #14
 800a8c0:	f300 814f 	bgt.w	800ab62 <_dtoa_r+0x72a>
 800a8c4:	4b45      	ldr	r3, [pc, #276]	; (800a9dc <_dtoa_r+0x5a4>)
 800a8c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a8ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a8d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f280 80db 	bge.w	800aa90 <_dtoa_r+0x658>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f300 80d7 	bgt.w	800aa90 <_dtoa_r+0x658>
 800a8e2:	f040 8274 	bne.w	800adce <_dtoa_r+0x996>
 800a8e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	4b40      	ldr	r3, [pc, #256]	; (800a9f0 <_dtoa_r+0x5b8>)
 800a8ee:	f7f5 fdf3 	bl	80004d8 <__aeabi_dmul>
 800a8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f6:	f7f6 f875 	bl	80009e4 <__aeabi_dcmpge>
 800a8fa:	9c02      	ldr	r4, [sp, #8]
 800a8fc:	4626      	mov	r6, r4
 800a8fe:	2800      	cmp	r0, #0
 800a900:	f040 824a 	bne.w	800ad98 <_dtoa_r+0x960>
 800a904:	2331      	movs	r3, #49	; 0x31
 800a906:	9f08      	ldr	r7, [sp, #32]
 800a908:	f109 0901 	add.w	r9, r9, #1
 800a90c:	f807 3b01 	strb.w	r3, [r7], #1
 800a910:	e246      	b.n	800ada0 <_dtoa_r+0x968>
 800a912:	07e2      	lsls	r2, r4, #31
 800a914:	d505      	bpl.n	800a922 <_dtoa_r+0x4ea>
 800a916:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a91a:	f7f5 fddd 	bl	80004d8 <__aeabi_dmul>
 800a91e:	2301      	movs	r3, #1
 800a920:	3701      	adds	r7, #1
 800a922:	1064      	asrs	r4, r4, #1
 800a924:	3608      	adds	r6, #8
 800a926:	e76d      	b.n	800a804 <_dtoa_r+0x3cc>
 800a928:	2702      	movs	r7, #2
 800a92a:	e770      	b.n	800a80e <_dtoa_r+0x3d6>
 800a92c:	46c8      	mov	r8, r9
 800a92e:	9c02      	ldr	r4, [sp, #8]
 800a930:	e78f      	b.n	800a852 <_dtoa_r+0x41a>
 800a932:	9908      	ldr	r1, [sp, #32]
 800a934:	4b29      	ldr	r3, [pc, #164]	; (800a9dc <_dtoa_r+0x5a4>)
 800a936:	4421      	add	r1, r4
 800a938:	9112      	str	r1, [sp, #72]	; 0x48
 800a93a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a93c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a940:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a944:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a948:	2900      	cmp	r1, #0
 800a94a:	d055      	beq.n	800a9f8 <_dtoa_r+0x5c0>
 800a94c:	2000      	movs	r0, #0
 800a94e:	4929      	ldr	r1, [pc, #164]	; (800a9f4 <_dtoa_r+0x5bc>)
 800a950:	f7f5 feec 	bl	800072c <__aeabi_ddiv>
 800a954:	463b      	mov	r3, r7
 800a956:	4632      	mov	r2, r6
 800a958:	f7f5 fc06 	bl	8000168 <__aeabi_dsub>
 800a95c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a960:	9f08      	ldr	r7, [sp, #32]
 800a962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a966:	f7f6 f867 	bl	8000a38 <__aeabi_d2iz>
 800a96a:	4604      	mov	r4, r0
 800a96c:	f7f5 fd4a 	bl	8000404 <__aeabi_i2d>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a978:	f7f5 fbf6 	bl	8000168 <__aeabi_dsub>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	3430      	adds	r4, #48	; 0x30
 800a982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a98a:	f807 4b01 	strb.w	r4, [r7], #1
 800a98e:	f7f6 f815 	bl	80009bc <__aeabi_dcmplt>
 800a992:	2800      	cmp	r0, #0
 800a994:	d174      	bne.n	800aa80 <_dtoa_r+0x648>
 800a996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a99a:	2000      	movs	r0, #0
 800a99c:	4911      	ldr	r1, [pc, #68]	; (800a9e4 <_dtoa_r+0x5ac>)
 800a99e:	f7f5 fbe3 	bl	8000168 <__aeabi_dsub>
 800a9a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9a6:	f7f6 f809 	bl	80009bc <__aeabi_dcmplt>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f040 80b6 	bne.w	800ab1c <_dtoa_r+0x6e4>
 800a9b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9b2:	429f      	cmp	r7, r3
 800a9b4:	f43f af7a 	beq.w	800a8ac <_dtoa_r+0x474>
 800a9b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <_dtoa_r+0x5b0>)
 800a9c0:	f7f5 fd8a 	bl	80004d8 <__aeabi_dmul>
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ce:	4b06      	ldr	r3, [pc, #24]	; (800a9e8 <_dtoa_r+0x5b0>)
 800a9d0:	f7f5 fd82 	bl	80004d8 <__aeabi_dmul>
 800a9d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9d8:	e7c3      	b.n	800a962 <_dtoa_r+0x52a>
 800a9da:	bf00      	nop
 800a9dc:	0800d570 	.word	0x0800d570
 800a9e0:	0800d548 	.word	0x0800d548
 800a9e4:	3ff00000 	.word	0x3ff00000
 800a9e8:	40240000 	.word	0x40240000
 800a9ec:	401c0000 	.word	0x401c0000
 800a9f0:	40140000 	.word	0x40140000
 800a9f4:	3fe00000 	.word	0x3fe00000
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f5 fd6c 	bl	80004d8 <__aeabi_dmul>
 800aa00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa06:	9c08      	ldr	r4, [sp, #32]
 800aa08:	9314      	str	r3, [sp, #80]	; 0x50
 800aa0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa0e:	f7f6 f813 	bl	8000a38 <__aeabi_d2iz>
 800aa12:	9015      	str	r0, [sp, #84]	; 0x54
 800aa14:	f7f5 fcf6 	bl	8000404 <__aeabi_i2d>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa20:	f7f5 fba2 	bl	8000168 <__aeabi_dsub>
 800aa24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa26:	4606      	mov	r6, r0
 800aa28:	3330      	adds	r3, #48	; 0x30
 800aa2a:	f804 3b01 	strb.w	r3, [r4], #1
 800aa2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa30:	460f      	mov	r7, r1
 800aa32:	429c      	cmp	r4, r3
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	d124      	bne.n	800aa84 <_dtoa_r+0x64c>
 800aa3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa3e:	4bb3      	ldr	r3, [pc, #716]	; (800ad0c <_dtoa_r+0x8d4>)
 800aa40:	f7f5 fb94 	bl	800016c <__adddf3>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 ffd4 	bl	80009f8 <__aeabi_dcmpgt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d162      	bne.n	800ab1a <_dtoa_r+0x6e2>
 800aa54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa58:	2000      	movs	r0, #0
 800aa5a:	49ac      	ldr	r1, [pc, #688]	; (800ad0c <_dtoa_r+0x8d4>)
 800aa5c:	f7f5 fb84 	bl	8000168 <__aeabi_dsub>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4630      	mov	r0, r6
 800aa66:	4639      	mov	r1, r7
 800aa68:	f7f5 ffa8 	bl	80009bc <__aeabi_dcmplt>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	f43f af1d 	beq.w	800a8ac <_dtoa_r+0x474>
 800aa72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa74:	1e7b      	subs	r3, r7, #1
 800aa76:	9314      	str	r3, [sp, #80]	; 0x50
 800aa78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa7c:	2b30      	cmp	r3, #48	; 0x30
 800aa7e:	d0f8      	beq.n	800aa72 <_dtoa_r+0x63a>
 800aa80:	46c1      	mov	r9, r8
 800aa82:	e03a      	b.n	800aafa <_dtoa_r+0x6c2>
 800aa84:	4ba2      	ldr	r3, [pc, #648]	; (800ad10 <_dtoa_r+0x8d8>)
 800aa86:	f7f5 fd27 	bl	80004d8 <__aeabi_dmul>
 800aa8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa8e:	e7bc      	b.n	800aa0a <_dtoa_r+0x5d2>
 800aa90:	9f08      	ldr	r7, [sp, #32]
 800aa92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa9a:	f7f5 fe47 	bl	800072c <__aeabi_ddiv>
 800aa9e:	f7f5 ffcb 	bl	8000a38 <__aeabi_d2iz>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	f7f5 fcae 	bl	8000404 <__aeabi_i2d>
 800aaa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaac:	f7f5 fd14 	bl	80004d8 <__aeabi_dmul>
 800aab0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aab4:	460b      	mov	r3, r1
 800aab6:	4602      	mov	r2, r0
 800aab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aabc:	f7f5 fb54 	bl	8000168 <__aeabi_dsub>
 800aac0:	f807 6b01 	strb.w	r6, [r7], #1
 800aac4:	9e08      	ldr	r6, [sp, #32]
 800aac6:	9b02      	ldr	r3, [sp, #8]
 800aac8:	1bbe      	subs	r6, r7, r6
 800aaca:	42b3      	cmp	r3, r6
 800aacc:	d13a      	bne.n	800ab44 <_dtoa_r+0x70c>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	f7f5 fb4b 	bl	800016c <__adddf3>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aae2:	f7f5 ff89 	bl	80009f8 <__aeabi_dcmpgt>
 800aae6:	bb58      	cbnz	r0, 800ab40 <_dtoa_r+0x708>
 800aae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf0:	f7f5 ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 800aaf4:	b108      	cbz	r0, 800aafa <_dtoa_r+0x6c2>
 800aaf6:	07e1      	lsls	r1, r4, #31
 800aaf8:	d422      	bmi.n	800ab40 <_dtoa_r+0x708>
 800aafa:	4628      	mov	r0, r5
 800aafc:	4651      	mov	r1, sl
 800aafe:	f000 fe69 	bl	800b7d4 <_Bfree>
 800ab02:	2300      	movs	r3, #0
 800ab04:	703b      	strb	r3, [r7, #0]
 800ab06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab08:	f109 0001 	add.w	r0, r9, #1
 800ab0c:	6018      	str	r0, [r3, #0]
 800ab0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f43f acdf 	beq.w	800a4d4 <_dtoa_r+0x9c>
 800ab16:	601f      	str	r7, [r3, #0]
 800ab18:	e4dc      	b.n	800a4d4 <_dtoa_r+0x9c>
 800ab1a:	4627      	mov	r7, r4
 800ab1c:	463b      	mov	r3, r7
 800ab1e:	461f      	mov	r7, r3
 800ab20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab24:	2a39      	cmp	r2, #57	; 0x39
 800ab26:	d107      	bne.n	800ab38 <_dtoa_r+0x700>
 800ab28:	9a08      	ldr	r2, [sp, #32]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d1f7      	bne.n	800ab1e <_dtoa_r+0x6e6>
 800ab2e:	2230      	movs	r2, #48	; 0x30
 800ab30:	9908      	ldr	r1, [sp, #32]
 800ab32:	f108 0801 	add.w	r8, r8, #1
 800ab36:	700a      	strb	r2, [r1, #0]
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	e79f      	b.n	800aa80 <_dtoa_r+0x648>
 800ab40:	46c8      	mov	r8, r9
 800ab42:	e7eb      	b.n	800ab1c <_dtoa_r+0x6e4>
 800ab44:	2200      	movs	r2, #0
 800ab46:	4b72      	ldr	r3, [pc, #456]	; (800ad10 <_dtoa_r+0x8d8>)
 800ab48:	f7f5 fcc6 	bl	80004d8 <__aeabi_dmul>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab54:	2200      	movs	r2, #0
 800ab56:	2300      	movs	r3, #0
 800ab58:	f7f5 ff26 	bl	80009a8 <__aeabi_dcmpeq>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d098      	beq.n	800aa92 <_dtoa_r+0x65a>
 800ab60:	e7cb      	b.n	800aafa <_dtoa_r+0x6c2>
 800ab62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	f000 80cd 	beq.w	800ad04 <_dtoa_r+0x8cc>
 800ab6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab6c:	2a01      	cmp	r2, #1
 800ab6e:	f300 80af 	bgt.w	800acd0 <_dtoa_r+0x898>
 800ab72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	f000 80a7 	beq.w	800acc8 <_dtoa_r+0x890>
 800ab7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab80:	9f06      	ldr	r7, [sp, #24]
 800ab82:	9a06      	ldr	r2, [sp, #24]
 800ab84:	2101      	movs	r1, #1
 800ab86:	441a      	add	r2, r3
 800ab88:	9206      	str	r2, [sp, #24]
 800ab8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	441a      	add	r2, r3
 800ab90:	9209      	str	r2, [sp, #36]	; 0x24
 800ab92:	f000 ff23 	bl	800b9dc <__i2b>
 800ab96:	4606      	mov	r6, r0
 800ab98:	2f00      	cmp	r7, #0
 800ab9a:	dd0c      	ble.n	800abb6 <_dtoa_r+0x77e>
 800ab9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd09      	ble.n	800abb6 <_dtoa_r+0x77e>
 800aba2:	42bb      	cmp	r3, r7
 800aba4:	bfa8      	it	ge
 800aba6:	463b      	movge	r3, r7
 800aba8:	9a06      	ldr	r2, [sp, #24]
 800abaa:	1aff      	subs	r7, r7, r3
 800abac:	1ad2      	subs	r2, r2, r3
 800abae:	9206      	str	r2, [sp, #24]
 800abb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	9309      	str	r3, [sp, #36]	; 0x24
 800abb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb8:	b1f3      	cbz	r3, 800abf8 <_dtoa_r+0x7c0>
 800abba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 80a9 	beq.w	800ad14 <_dtoa_r+0x8dc>
 800abc2:	2c00      	cmp	r4, #0
 800abc4:	dd10      	ble.n	800abe8 <_dtoa_r+0x7b0>
 800abc6:	4631      	mov	r1, r6
 800abc8:	4622      	mov	r2, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 ffc0 	bl	800bb50 <__pow5mult>
 800abd0:	4652      	mov	r2, sl
 800abd2:	4601      	mov	r1, r0
 800abd4:	4606      	mov	r6, r0
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 ff16 	bl	800ba08 <__multiply>
 800abdc:	4680      	mov	r8, r0
 800abde:	4651      	mov	r1, sl
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 fdf7 	bl	800b7d4 <_Bfree>
 800abe6:	46c2      	mov	sl, r8
 800abe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abea:	1b1a      	subs	r2, r3, r4
 800abec:	d004      	beq.n	800abf8 <_dtoa_r+0x7c0>
 800abee:	4651      	mov	r1, sl
 800abf0:	4628      	mov	r0, r5
 800abf2:	f000 ffad 	bl	800bb50 <__pow5mult>
 800abf6:	4682      	mov	sl, r0
 800abf8:	2101      	movs	r1, #1
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 feee 	bl	800b9dc <__i2b>
 800ac00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac02:	4604      	mov	r4, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f340 8087 	ble.w	800ad18 <_dtoa_r+0x8e0>
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 ff9e 	bl	800bb50 <__pow5mult>
 800ac14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac16:	4604      	mov	r4, r0
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	f340 8080 	ble.w	800ad1e <_dtoa_r+0x8e6>
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac28:	6918      	ldr	r0, [r3, #16]
 800ac2a:	f000 fe89 	bl	800b940 <__hi0bits>
 800ac2e:	f1c0 0020 	rsb	r0, r0, #32
 800ac32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac34:	4418      	add	r0, r3
 800ac36:	f010 001f 	ands.w	r0, r0, #31
 800ac3a:	f000 8092 	beq.w	800ad62 <_dtoa_r+0x92a>
 800ac3e:	f1c0 0320 	rsb	r3, r0, #32
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	f340 808a 	ble.w	800ad5c <_dtoa_r+0x924>
 800ac48:	f1c0 001c 	rsb	r0, r0, #28
 800ac4c:	9b06      	ldr	r3, [sp, #24]
 800ac4e:	4407      	add	r7, r0
 800ac50:	4403      	add	r3, r0
 800ac52:	9306      	str	r3, [sp, #24]
 800ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac56:	4403      	add	r3, r0
 800ac58:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5a:	9b06      	ldr	r3, [sp, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dd05      	ble.n	800ac6c <_dtoa_r+0x834>
 800ac60:	4651      	mov	r1, sl
 800ac62:	461a      	mov	r2, r3
 800ac64:	4628      	mov	r0, r5
 800ac66:	f000 ffcd 	bl	800bc04 <__lshift>
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dd05      	ble.n	800ac7e <_dtoa_r+0x846>
 800ac72:	4621      	mov	r1, r4
 800ac74:	461a      	mov	r2, r3
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 ffc4 	bl	800bc04 <__lshift>
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d070      	beq.n	800ad66 <_dtoa_r+0x92e>
 800ac84:	4621      	mov	r1, r4
 800ac86:	4650      	mov	r0, sl
 800ac88:	f001 f828 	bl	800bcdc <__mcmp>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	da6a      	bge.n	800ad66 <_dtoa_r+0x92e>
 800ac90:	2300      	movs	r3, #0
 800ac92:	4651      	mov	r1, sl
 800ac94:	220a      	movs	r2, #10
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 fdbe 	bl	800b818 <__multadd>
 800ac9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac9e:	4682      	mov	sl, r0
 800aca0:	f109 39ff 	add.w	r9, r9, #4294967295
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 8193 	beq.w	800afd0 <_dtoa_r+0xb98>
 800acaa:	4631      	mov	r1, r6
 800acac:	2300      	movs	r3, #0
 800acae:	220a      	movs	r2, #10
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 fdb1 	bl	800b818 <__multadd>
 800acb6:	f1bb 0f00 	cmp.w	fp, #0
 800acba:	4606      	mov	r6, r0
 800acbc:	f300 8093 	bgt.w	800ade6 <_dtoa_r+0x9ae>
 800acc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	dc57      	bgt.n	800ad76 <_dtoa_r+0x93e>
 800acc6:	e08e      	b.n	800ade6 <_dtoa_r+0x9ae>
 800acc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acce:	e756      	b.n	800ab7e <_dtoa_r+0x746>
 800acd0:	9b02      	ldr	r3, [sp, #8]
 800acd2:	1e5c      	subs	r4, r3, #1
 800acd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	bfb7      	itett	lt
 800acda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acdc:	1b1c      	subge	r4, r3, r4
 800acde:	1ae2      	sublt	r2, r4, r3
 800ace0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ace2:	bfbe      	ittt	lt
 800ace4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ace6:	189b      	addlt	r3, r3, r2
 800ace8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	bfb8      	it	lt
 800acee:	2400      	movlt	r4, #0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	bfbb      	ittet	lt
 800acf4:	9b06      	ldrlt	r3, [sp, #24]
 800acf6:	9a02      	ldrlt	r2, [sp, #8]
 800acf8:	9f06      	ldrge	r7, [sp, #24]
 800acfa:	1a9f      	sublt	r7, r3, r2
 800acfc:	bfac      	ite	ge
 800acfe:	9b02      	ldrge	r3, [sp, #8]
 800ad00:	2300      	movlt	r3, #0
 800ad02:	e73e      	b.n	800ab82 <_dtoa_r+0x74a>
 800ad04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad06:	9f06      	ldr	r7, [sp, #24]
 800ad08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ad0a:	e745      	b.n	800ab98 <_dtoa_r+0x760>
 800ad0c:	3fe00000 	.word	0x3fe00000
 800ad10:	40240000 	.word	0x40240000
 800ad14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad16:	e76a      	b.n	800abee <_dtoa_r+0x7b6>
 800ad18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	dc19      	bgt.n	800ad52 <_dtoa_r+0x91a>
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	b9bb      	cbnz	r3, 800ad52 <_dtoa_r+0x91a>
 800ad22:	9b05      	ldr	r3, [sp, #20]
 800ad24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad28:	b99b      	cbnz	r3, 800ad52 <_dtoa_r+0x91a>
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad30:	0d1b      	lsrs	r3, r3, #20
 800ad32:	051b      	lsls	r3, r3, #20
 800ad34:	b183      	cbz	r3, 800ad58 <_dtoa_r+0x920>
 800ad36:	f04f 0801 	mov.w	r8, #1
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	9306      	str	r3, [sp, #24]
 800ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad42:	3301      	adds	r3, #1
 800ad44:	9309      	str	r3, [sp, #36]	; 0x24
 800ad46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f47f af6a 	bne.w	800ac22 <_dtoa_r+0x7ea>
 800ad4e:	2001      	movs	r0, #1
 800ad50:	e76f      	b.n	800ac32 <_dtoa_r+0x7fa>
 800ad52:	f04f 0800 	mov.w	r8, #0
 800ad56:	e7f6      	b.n	800ad46 <_dtoa_r+0x90e>
 800ad58:	4698      	mov	r8, r3
 800ad5a:	e7f4      	b.n	800ad46 <_dtoa_r+0x90e>
 800ad5c:	f43f af7d 	beq.w	800ac5a <_dtoa_r+0x822>
 800ad60:	4618      	mov	r0, r3
 800ad62:	301c      	adds	r0, #28
 800ad64:	e772      	b.n	800ac4c <_dtoa_r+0x814>
 800ad66:	9b02      	ldr	r3, [sp, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc36      	bgt.n	800adda <_dtoa_r+0x9a2>
 800ad6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	dd33      	ble.n	800adda <_dtoa_r+0x9a2>
 800ad72:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ad76:	f1bb 0f00 	cmp.w	fp, #0
 800ad7a:	d10d      	bne.n	800ad98 <_dtoa_r+0x960>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	465b      	mov	r3, fp
 800ad80:	2205      	movs	r2, #5
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 fd48 	bl	800b818 <__multadd>
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	f000 ffa5 	bl	800bcdc <__mcmp>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f73f adb6 	bgt.w	800a904 <_dtoa_r+0x4cc>
 800ad98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad9a:	9f08      	ldr	r7, [sp, #32]
 800ad9c:	ea6f 0903 	mvn.w	r9, r3
 800ada0:	f04f 0800 	mov.w	r8, #0
 800ada4:	4621      	mov	r1, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 fd14 	bl	800b7d4 <_Bfree>
 800adac:	2e00      	cmp	r6, #0
 800adae:	f43f aea4 	beq.w	800aafa <_dtoa_r+0x6c2>
 800adb2:	f1b8 0f00 	cmp.w	r8, #0
 800adb6:	d005      	beq.n	800adc4 <_dtoa_r+0x98c>
 800adb8:	45b0      	cmp	r8, r6
 800adba:	d003      	beq.n	800adc4 <_dtoa_r+0x98c>
 800adbc:	4641      	mov	r1, r8
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 fd08 	bl	800b7d4 <_Bfree>
 800adc4:	4631      	mov	r1, r6
 800adc6:	4628      	mov	r0, r5
 800adc8:	f000 fd04 	bl	800b7d4 <_Bfree>
 800adcc:	e695      	b.n	800aafa <_dtoa_r+0x6c2>
 800adce:	2400      	movs	r4, #0
 800add0:	4626      	mov	r6, r4
 800add2:	e7e1      	b.n	800ad98 <_dtoa_r+0x960>
 800add4:	46c1      	mov	r9, r8
 800add6:	4626      	mov	r6, r4
 800add8:	e594      	b.n	800a904 <_dtoa_r+0x4cc>
 800adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800addc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80fc 	beq.w	800afde <_dtoa_r+0xba6>
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	dd05      	ble.n	800adf6 <_dtoa_r+0x9be>
 800adea:	4631      	mov	r1, r6
 800adec:	463a      	mov	r2, r7
 800adee:	4628      	mov	r0, r5
 800adf0:	f000 ff08 	bl	800bc04 <__lshift>
 800adf4:	4606      	mov	r6, r0
 800adf6:	f1b8 0f00 	cmp.w	r8, #0
 800adfa:	d05c      	beq.n	800aeb6 <_dtoa_r+0xa7e>
 800adfc:	4628      	mov	r0, r5
 800adfe:	6871      	ldr	r1, [r6, #4]
 800ae00:	f000 fca8 	bl	800b754 <_Balloc>
 800ae04:	4607      	mov	r7, r0
 800ae06:	b928      	cbnz	r0, 800ae14 <_dtoa_r+0x9dc>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ae0e:	4b7e      	ldr	r3, [pc, #504]	; (800b008 <_dtoa_r+0xbd0>)
 800ae10:	f7ff bb26 	b.w	800a460 <_dtoa_r+0x28>
 800ae14:	6932      	ldr	r2, [r6, #16]
 800ae16:	f106 010c 	add.w	r1, r6, #12
 800ae1a:	3202      	adds	r2, #2
 800ae1c:	0092      	lsls	r2, r2, #2
 800ae1e:	300c      	adds	r0, #12
 800ae20:	f000 fc8a 	bl	800b738 <memcpy>
 800ae24:	2201      	movs	r2, #1
 800ae26:	4639      	mov	r1, r7
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f000 feeb 	bl	800bc04 <__lshift>
 800ae2e:	46b0      	mov	r8, r6
 800ae30:	4606      	mov	r6, r0
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	3301      	adds	r3, #1
 800ae36:	9302      	str	r3, [sp, #8]
 800ae38:	9b08      	ldr	r3, [sp, #32]
 800ae3a:	445b      	add	r3, fp
 800ae3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	9309      	str	r3, [sp, #36]	; 0x24
 800ae46:	9b02      	ldr	r3, [sp, #8]
 800ae48:	4621      	mov	r1, r4
 800ae4a:	4650      	mov	r0, sl
 800ae4c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae50:	f7ff fa64 	bl	800a31c <quorem>
 800ae54:	4603      	mov	r3, r0
 800ae56:	4641      	mov	r1, r8
 800ae58:	3330      	adds	r3, #48	; 0x30
 800ae5a:	9004      	str	r0, [sp, #16]
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae60:	f000 ff3c 	bl	800bcdc <__mcmp>
 800ae64:	4632      	mov	r2, r6
 800ae66:	9006      	str	r0, [sp, #24]
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f000 ff52 	bl	800bd14 <__mdiff>
 800ae70:	68c2      	ldr	r2, [r0, #12]
 800ae72:	4607      	mov	r7, r0
 800ae74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae76:	bb02      	cbnz	r2, 800aeba <_dtoa_r+0xa82>
 800ae78:	4601      	mov	r1, r0
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	f000 ff2e 	bl	800bcdc <__mcmp>
 800ae80:	4602      	mov	r2, r0
 800ae82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae84:	4639      	mov	r1, r7
 800ae86:	4628      	mov	r0, r5
 800ae88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ae8c:	f000 fca2 	bl	800b7d4 <_Bfree>
 800ae90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae94:	9f02      	ldr	r7, [sp, #8]
 800ae96:	ea43 0102 	orr.w	r1, r3, r2
 800ae9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9c:	430b      	orrs	r3, r1
 800ae9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea0:	d10d      	bne.n	800aebe <_dtoa_r+0xa86>
 800aea2:	2b39      	cmp	r3, #57	; 0x39
 800aea4:	d027      	beq.n	800aef6 <_dtoa_r+0xabe>
 800aea6:	9a06      	ldr	r2, [sp, #24]
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	dd01      	ble.n	800aeb0 <_dtoa_r+0xa78>
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	3331      	adds	r3, #49	; 0x31
 800aeb0:	f88b 3000 	strb.w	r3, [fp]
 800aeb4:	e776      	b.n	800ada4 <_dtoa_r+0x96c>
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	e7b9      	b.n	800ae2e <_dtoa_r+0x9f6>
 800aeba:	2201      	movs	r2, #1
 800aebc:	e7e2      	b.n	800ae84 <_dtoa_r+0xa4c>
 800aebe:	9906      	ldr	r1, [sp, #24]
 800aec0:	2900      	cmp	r1, #0
 800aec2:	db04      	blt.n	800aece <_dtoa_r+0xa96>
 800aec4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800aec6:	4301      	orrs	r1, r0
 800aec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeca:	4301      	orrs	r1, r0
 800aecc:	d120      	bne.n	800af10 <_dtoa_r+0xad8>
 800aece:	2a00      	cmp	r2, #0
 800aed0:	ddee      	ble.n	800aeb0 <_dtoa_r+0xa78>
 800aed2:	4651      	mov	r1, sl
 800aed4:	2201      	movs	r2, #1
 800aed6:	4628      	mov	r0, r5
 800aed8:	9302      	str	r3, [sp, #8]
 800aeda:	f000 fe93 	bl	800bc04 <__lshift>
 800aede:	4621      	mov	r1, r4
 800aee0:	4682      	mov	sl, r0
 800aee2:	f000 fefb 	bl	800bcdc <__mcmp>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	9b02      	ldr	r3, [sp, #8]
 800aeea:	dc02      	bgt.n	800aef2 <_dtoa_r+0xaba>
 800aeec:	d1e0      	bne.n	800aeb0 <_dtoa_r+0xa78>
 800aeee:	07da      	lsls	r2, r3, #31
 800aef0:	d5de      	bpl.n	800aeb0 <_dtoa_r+0xa78>
 800aef2:	2b39      	cmp	r3, #57	; 0x39
 800aef4:	d1da      	bne.n	800aeac <_dtoa_r+0xa74>
 800aef6:	2339      	movs	r3, #57	; 0x39
 800aef8:	f88b 3000 	strb.w	r3, [fp]
 800aefc:	463b      	mov	r3, r7
 800aefe:	461f      	mov	r7, r3
 800af00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800af04:	3b01      	subs	r3, #1
 800af06:	2a39      	cmp	r2, #57	; 0x39
 800af08:	d050      	beq.n	800afac <_dtoa_r+0xb74>
 800af0a:	3201      	adds	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	e749      	b.n	800ada4 <_dtoa_r+0x96c>
 800af10:	2a00      	cmp	r2, #0
 800af12:	dd03      	ble.n	800af1c <_dtoa_r+0xae4>
 800af14:	2b39      	cmp	r3, #57	; 0x39
 800af16:	d0ee      	beq.n	800aef6 <_dtoa_r+0xabe>
 800af18:	3301      	adds	r3, #1
 800af1a:	e7c9      	b.n	800aeb0 <_dtoa_r+0xa78>
 800af1c:	9a02      	ldr	r2, [sp, #8]
 800af1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af20:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af24:	428a      	cmp	r2, r1
 800af26:	d02a      	beq.n	800af7e <_dtoa_r+0xb46>
 800af28:	4651      	mov	r1, sl
 800af2a:	2300      	movs	r3, #0
 800af2c:	220a      	movs	r2, #10
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 fc72 	bl	800b818 <__multadd>
 800af34:	45b0      	cmp	r8, r6
 800af36:	4682      	mov	sl, r0
 800af38:	f04f 0300 	mov.w	r3, #0
 800af3c:	f04f 020a 	mov.w	r2, #10
 800af40:	4641      	mov	r1, r8
 800af42:	4628      	mov	r0, r5
 800af44:	d107      	bne.n	800af56 <_dtoa_r+0xb1e>
 800af46:	f000 fc67 	bl	800b818 <__multadd>
 800af4a:	4680      	mov	r8, r0
 800af4c:	4606      	mov	r6, r0
 800af4e:	9b02      	ldr	r3, [sp, #8]
 800af50:	3301      	adds	r3, #1
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	e777      	b.n	800ae46 <_dtoa_r+0xa0e>
 800af56:	f000 fc5f 	bl	800b818 <__multadd>
 800af5a:	4631      	mov	r1, r6
 800af5c:	4680      	mov	r8, r0
 800af5e:	2300      	movs	r3, #0
 800af60:	220a      	movs	r2, #10
 800af62:	4628      	mov	r0, r5
 800af64:	f000 fc58 	bl	800b818 <__multadd>
 800af68:	4606      	mov	r6, r0
 800af6a:	e7f0      	b.n	800af4e <_dtoa_r+0xb16>
 800af6c:	f1bb 0f00 	cmp.w	fp, #0
 800af70:	bfcc      	ite	gt
 800af72:	465f      	movgt	r7, fp
 800af74:	2701      	movle	r7, #1
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	9a08      	ldr	r2, [sp, #32]
 800af7c:	4417      	add	r7, r2
 800af7e:	4651      	mov	r1, sl
 800af80:	2201      	movs	r2, #1
 800af82:	4628      	mov	r0, r5
 800af84:	9302      	str	r3, [sp, #8]
 800af86:	f000 fe3d 	bl	800bc04 <__lshift>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4682      	mov	sl, r0
 800af8e:	f000 fea5 	bl	800bcdc <__mcmp>
 800af92:	2800      	cmp	r0, #0
 800af94:	dcb2      	bgt.n	800aefc <_dtoa_r+0xac4>
 800af96:	d102      	bne.n	800af9e <_dtoa_r+0xb66>
 800af98:	9b02      	ldr	r3, [sp, #8]
 800af9a:	07db      	lsls	r3, r3, #31
 800af9c:	d4ae      	bmi.n	800aefc <_dtoa_r+0xac4>
 800af9e:	463b      	mov	r3, r7
 800afa0:	461f      	mov	r7, r3
 800afa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afa6:	2a30      	cmp	r2, #48	; 0x30
 800afa8:	d0fa      	beq.n	800afa0 <_dtoa_r+0xb68>
 800afaa:	e6fb      	b.n	800ada4 <_dtoa_r+0x96c>
 800afac:	9a08      	ldr	r2, [sp, #32]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d1a5      	bne.n	800aefe <_dtoa_r+0xac6>
 800afb2:	2331      	movs	r3, #49	; 0x31
 800afb4:	f109 0901 	add.w	r9, r9, #1
 800afb8:	7013      	strb	r3, [r2, #0]
 800afba:	e6f3      	b.n	800ada4 <_dtoa_r+0x96c>
 800afbc:	4b13      	ldr	r3, [pc, #76]	; (800b00c <_dtoa_r+0xbd4>)
 800afbe:	f7ff baa7 	b.w	800a510 <_dtoa_r+0xd8>
 800afc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f47f aa80 	bne.w	800a4ca <_dtoa_r+0x92>
 800afca:	4b11      	ldr	r3, [pc, #68]	; (800b010 <_dtoa_r+0xbd8>)
 800afcc:	f7ff baa0 	b.w	800a510 <_dtoa_r+0xd8>
 800afd0:	f1bb 0f00 	cmp.w	fp, #0
 800afd4:	dc03      	bgt.n	800afde <_dtoa_r+0xba6>
 800afd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afd8:	2b02      	cmp	r3, #2
 800afda:	f73f aecc 	bgt.w	800ad76 <_dtoa_r+0x93e>
 800afde:	9f08      	ldr	r7, [sp, #32]
 800afe0:	4621      	mov	r1, r4
 800afe2:	4650      	mov	r0, sl
 800afe4:	f7ff f99a 	bl	800a31c <quorem>
 800afe8:	9a08      	ldr	r2, [sp, #32]
 800afea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afee:	f807 3b01 	strb.w	r3, [r7], #1
 800aff2:	1aba      	subs	r2, r7, r2
 800aff4:	4593      	cmp	fp, r2
 800aff6:	ddb9      	ble.n	800af6c <_dtoa_r+0xb34>
 800aff8:	4651      	mov	r1, sl
 800affa:	2300      	movs	r3, #0
 800affc:	220a      	movs	r2, #10
 800affe:	4628      	mov	r0, r5
 800b000:	f000 fc0a 	bl	800b818 <__multadd>
 800b004:	4682      	mov	sl, r0
 800b006:	e7eb      	b.n	800afe0 <_dtoa_r+0xba8>
 800b008:	0800d454 	.word	0x0800d454
 800b00c:	0800d250 	.word	0x0800d250
 800b010:	0800d3d1 	.word	0x0800d3d1

0800b014 <rshift>:
 800b014:	6903      	ldr	r3, [r0, #16]
 800b016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b01a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b01e:	f100 0414 	add.w	r4, r0, #20
 800b022:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b026:	dd46      	ble.n	800b0b6 <rshift+0xa2>
 800b028:	f011 011f 	ands.w	r1, r1, #31
 800b02c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b030:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b034:	d10c      	bne.n	800b050 <rshift+0x3c>
 800b036:	4629      	mov	r1, r5
 800b038:	f100 0710 	add.w	r7, r0, #16
 800b03c:	42b1      	cmp	r1, r6
 800b03e:	d335      	bcc.n	800b0ac <rshift+0x98>
 800b040:	1a9b      	subs	r3, r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	1eea      	subs	r2, r5, #3
 800b046:	4296      	cmp	r6, r2
 800b048:	bf38      	it	cc
 800b04a:	2300      	movcc	r3, #0
 800b04c:	4423      	add	r3, r4
 800b04e:	e015      	b.n	800b07c <rshift+0x68>
 800b050:	46a1      	mov	r9, r4
 800b052:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b056:	f1c1 0820 	rsb	r8, r1, #32
 800b05a:	40cf      	lsrs	r7, r1
 800b05c:	f105 0e04 	add.w	lr, r5, #4
 800b060:	4576      	cmp	r6, lr
 800b062:	46f4      	mov	ip, lr
 800b064:	d816      	bhi.n	800b094 <rshift+0x80>
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	009a      	lsls	r2, r3, #2
 800b06a:	3a04      	subs	r2, #4
 800b06c:	3501      	adds	r5, #1
 800b06e:	42ae      	cmp	r6, r5
 800b070:	bf38      	it	cc
 800b072:	2200      	movcc	r2, #0
 800b074:	18a3      	adds	r3, r4, r2
 800b076:	50a7      	str	r7, [r4, r2]
 800b078:	b107      	cbz	r7, 800b07c <rshift+0x68>
 800b07a:	3304      	adds	r3, #4
 800b07c:	42a3      	cmp	r3, r4
 800b07e:	eba3 0204 	sub.w	r2, r3, r4
 800b082:	bf08      	it	eq
 800b084:	2300      	moveq	r3, #0
 800b086:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b08a:	6102      	str	r2, [r0, #16]
 800b08c:	bf08      	it	eq
 800b08e:	6143      	streq	r3, [r0, #20]
 800b090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b094:	f8dc c000 	ldr.w	ip, [ip]
 800b098:	fa0c fc08 	lsl.w	ip, ip, r8
 800b09c:	ea4c 0707 	orr.w	r7, ip, r7
 800b0a0:	f849 7b04 	str.w	r7, [r9], #4
 800b0a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0a8:	40cf      	lsrs	r7, r1
 800b0aa:	e7d9      	b.n	800b060 <rshift+0x4c>
 800b0ac:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0b0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0b4:	e7c2      	b.n	800b03c <rshift+0x28>
 800b0b6:	4623      	mov	r3, r4
 800b0b8:	e7e0      	b.n	800b07c <rshift+0x68>

0800b0ba <__hexdig_fun>:
 800b0ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0be:	2b09      	cmp	r3, #9
 800b0c0:	d802      	bhi.n	800b0c8 <__hexdig_fun+0xe>
 800b0c2:	3820      	subs	r0, #32
 800b0c4:	b2c0      	uxtb	r0, r0
 800b0c6:	4770      	bx	lr
 800b0c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0cc:	2b05      	cmp	r3, #5
 800b0ce:	d801      	bhi.n	800b0d4 <__hexdig_fun+0x1a>
 800b0d0:	3847      	subs	r0, #71	; 0x47
 800b0d2:	e7f7      	b.n	800b0c4 <__hexdig_fun+0xa>
 800b0d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0d8:	2b05      	cmp	r3, #5
 800b0da:	d801      	bhi.n	800b0e0 <__hexdig_fun+0x26>
 800b0dc:	3827      	subs	r0, #39	; 0x27
 800b0de:	e7f1      	b.n	800b0c4 <__hexdig_fun+0xa>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	4770      	bx	lr

0800b0e4 <__gethex>:
 800b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	b08b      	sub	sp, #44	; 0x2c
 800b0ea:	9306      	str	r3, [sp, #24]
 800b0ec:	4bb9      	ldr	r3, [pc, #740]	; (800b3d4 <__gethex+0x2f0>)
 800b0ee:	9002      	str	r0, [sp, #8]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	468b      	mov	fp, r1
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	4690      	mov	r8, r2
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	f7f5 f829 	bl	8000150 <strlen>
 800b0fe:	4682      	mov	sl, r0
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	f8db 2000 	ldr.w	r2, [fp]
 800b106:	4403      	add	r3, r0
 800b108:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b10c:	9307      	str	r3, [sp, #28]
 800b10e:	1c93      	adds	r3, r2, #2
 800b110:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b114:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b118:	32fe      	adds	r2, #254	; 0xfe
 800b11a:	18d1      	adds	r1, r2, r3
 800b11c:	461f      	mov	r7, r3
 800b11e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b122:	9101      	str	r1, [sp, #4]
 800b124:	2830      	cmp	r0, #48	; 0x30
 800b126:	d0f8      	beq.n	800b11a <__gethex+0x36>
 800b128:	f7ff ffc7 	bl	800b0ba <__hexdig_fun>
 800b12c:	4604      	mov	r4, r0
 800b12e:	2800      	cmp	r0, #0
 800b130:	d13a      	bne.n	800b1a8 <__gethex+0xc4>
 800b132:	4652      	mov	r2, sl
 800b134:	4638      	mov	r0, r7
 800b136:	9903      	ldr	r1, [sp, #12]
 800b138:	f001 f9ea 	bl	800c510 <strncmp>
 800b13c:	4605      	mov	r5, r0
 800b13e:	2800      	cmp	r0, #0
 800b140:	d166      	bne.n	800b210 <__gethex+0x12c>
 800b142:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b146:	eb07 060a 	add.w	r6, r7, sl
 800b14a:	f7ff ffb6 	bl	800b0ba <__hexdig_fun>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d060      	beq.n	800b214 <__gethex+0x130>
 800b152:	4633      	mov	r3, r6
 800b154:	7818      	ldrb	r0, [r3, #0]
 800b156:	461f      	mov	r7, r3
 800b158:	2830      	cmp	r0, #48	; 0x30
 800b15a:	f103 0301 	add.w	r3, r3, #1
 800b15e:	d0f9      	beq.n	800b154 <__gethex+0x70>
 800b160:	f7ff ffab 	bl	800b0ba <__hexdig_fun>
 800b164:	2301      	movs	r3, #1
 800b166:	fab0 f480 	clz	r4, r0
 800b16a:	4635      	mov	r5, r6
 800b16c:	0964      	lsrs	r4, r4, #5
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	463a      	mov	r2, r7
 800b172:	4616      	mov	r6, r2
 800b174:	7830      	ldrb	r0, [r6, #0]
 800b176:	3201      	adds	r2, #1
 800b178:	f7ff ff9f 	bl	800b0ba <__hexdig_fun>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d1f8      	bne.n	800b172 <__gethex+0x8e>
 800b180:	4652      	mov	r2, sl
 800b182:	4630      	mov	r0, r6
 800b184:	9903      	ldr	r1, [sp, #12]
 800b186:	f001 f9c3 	bl	800c510 <strncmp>
 800b18a:	b980      	cbnz	r0, 800b1ae <__gethex+0xca>
 800b18c:	b94d      	cbnz	r5, 800b1a2 <__gethex+0xbe>
 800b18e:	eb06 050a 	add.w	r5, r6, sl
 800b192:	462a      	mov	r2, r5
 800b194:	4616      	mov	r6, r2
 800b196:	7830      	ldrb	r0, [r6, #0]
 800b198:	3201      	adds	r2, #1
 800b19a:	f7ff ff8e 	bl	800b0ba <__hexdig_fun>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d1f8      	bne.n	800b194 <__gethex+0xb0>
 800b1a2:	1bad      	subs	r5, r5, r6
 800b1a4:	00ad      	lsls	r5, r5, #2
 800b1a6:	e004      	b.n	800b1b2 <__gethex+0xce>
 800b1a8:	2400      	movs	r4, #0
 800b1aa:	4625      	mov	r5, r4
 800b1ac:	e7e0      	b.n	800b170 <__gethex+0x8c>
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	d1f7      	bne.n	800b1a2 <__gethex+0xbe>
 800b1b2:	7833      	ldrb	r3, [r6, #0]
 800b1b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1b8:	2b50      	cmp	r3, #80	; 0x50
 800b1ba:	d139      	bne.n	800b230 <__gethex+0x14c>
 800b1bc:	7873      	ldrb	r3, [r6, #1]
 800b1be:	2b2b      	cmp	r3, #43	; 0x2b
 800b1c0:	d02a      	beq.n	800b218 <__gethex+0x134>
 800b1c2:	2b2d      	cmp	r3, #45	; 0x2d
 800b1c4:	d02c      	beq.n	800b220 <__gethex+0x13c>
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	1c71      	adds	r1, r6, #1
 800b1cc:	7808      	ldrb	r0, [r1, #0]
 800b1ce:	f7ff ff74 	bl	800b0ba <__hexdig_fun>
 800b1d2:	1e43      	subs	r3, r0, #1
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b18      	cmp	r3, #24
 800b1d8:	d82a      	bhi.n	800b230 <__gethex+0x14c>
 800b1da:	f1a0 0210 	sub.w	r2, r0, #16
 800b1de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1e2:	f7ff ff6a 	bl	800b0ba <__hexdig_fun>
 800b1e6:	1e43      	subs	r3, r0, #1
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b18      	cmp	r3, #24
 800b1ec:	d91b      	bls.n	800b226 <__gethex+0x142>
 800b1ee:	f1b9 0f00 	cmp.w	r9, #0
 800b1f2:	d000      	beq.n	800b1f6 <__gethex+0x112>
 800b1f4:	4252      	negs	r2, r2
 800b1f6:	4415      	add	r5, r2
 800b1f8:	f8cb 1000 	str.w	r1, [fp]
 800b1fc:	b1d4      	cbz	r4, 800b234 <__gethex+0x150>
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	bf14      	ite	ne
 800b204:	2700      	movne	r7, #0
 800b206:	2706      	moveq	r7, #6
 800b208:	4638      	mov	r0, r7
 800b20a:	b00b      	add	sp, #44	; 0x2c
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	463e      	mov	r6, r7
 800b212:	4625      	mov	r5, r4
 800b214:	2401      	movs	r4, #1
 800b216:	e7cc      	b.n	800b1b2 <__gethex+0xce>
 800b218:	f04f 0900 	mov.w	r9, #0
 800b21c:	1cb1      	adds	r1, r6, #2
 800b21e:	e7d5      	b.n	800b1cc <__gethex+0xe8>
 800b220:	f04f 0901 	mov.w	r9, #1
 800b224:	e7fa      	b.n	800b21c <__gethex+0x138>
 800b226:	230a      	movs	r3, #10
 800b228:	fb03 0202 	mla	r2, r3, r2, r0
 800b22c:	3a10      	subs	r2, #16
 800b22e:	e7d6      	b.n	800b1de <__gethex+0xfa>
 800b230:	4631      	mov	r1, r6
 800b232:	e7e1      	b.n	800b1f8 <__gethex+0x114>
 800b234:	4621      	mov	r1, r4
 800b236:	1bf3      	subs	r3, r6, r7
 800b238:	3b01      	subs	r3, #1
 800b23a:	2b07      	cmp	r3, #7
 800b23c:	dc0a      	bgt.n	800b254 <__gethex+0x170>
 800b23e:	9802      	ldr	r0, [sp, #8]
 800b240:	f000 fa88 	bl	800b754 <_Balloc>
 800b244:	4604      	mov	r4, r0
 800b246:	b940      	cbnz	r0, 800b25a <__gethex+0x176>
 800b248:	4602      	mov	r2, r0
 800b24a:	21de      	movs	r1, #222	; 0xde
 800b24c:	4b62      	ldr	r3, [pc, #392]	; (800b3d8 <__gethex+0x2f4>)
 800b24e:	4863      	ldr	r0, [pc, #396]	; (800b3dc <__gethex+0x2f8>)
 800b250:	f001 f97e 	bl	800c550 <__assert_func>
 800b254:	3101      	adds	r1, #1
 800b256:	105b      	asrs	r3, r3, #1
 800b258:	e7ef      	b.n	800b23a <__gethex+0x156>
 800b25a:	f04f 0b00 	mov.w	fp, #0
 800b25e:	f100 0914 	add.w	r9, r0, #20
 800b262:	f1ca 0301 	rsb	r3, sl, #1
 800b266:	f8cd 9010 	str.w	r9, [sp, #16]
 800b26a:	f8cd b004 	str.w	fp, [sp, #4]
 800b26e:	9308      	str	r3, [sp, #32]
 800b270:	42b7      	cmp	r7, r6
 800b272:	d33f      	bcc.n	800b2f4 <__gethex+0x210>
 800b274:	9f04      	ldr	r7, [sp, #16]
 800b276:	9b01      	ldr	r3, [sp, #4]
 800b278:	f847 3b04 	str.w	r3, [r7], #4
 800b27c:	eba7 0709 	sub.w	r7, r7, r9
 800b280:	10bf      	asrs	r7, r7, #2
 800b282:	6127      	str	r7, [r4, #16]
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fb5b 	bl	800b940 <__hi0bits>
 800b28a:	017f      	lsls	r7, r7, #5
 800b28c:	f8d8 6000 	ldr.w	r6, [r8]
 800b290:	1a3f      	subs	r7, r7, r0
 800b292:	42b7      	cmp	r7, r6
 800b294:	dd62      	ble.n	800b35c <__gethex+0x278>
 800b296:	1bbf      	subs	r7, r7, r6
 800b298:	4639      	mov	r1, r7
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 fef1 	bl	800c082 <__any_on>
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	b1a8      	cbz	r0, 800b2d0 <__gethex+0x1ec>
 800b2a4:	f04f 0a01 	mov.w	sl, #1
 800b2a8:	1e7b      	subs	r3, r7, #1
 800b2aa:	1159      	asrs	r1, r3, #5
 800b2ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2b0:	f003 021f 	and.w	r2, r3, #31
 800b2b4:	fa0a f202 	lsl.w	r2, sl, r2
 800b2b8:	420a      	tst	r2, r1
 800b2ba:	d009      	beq.n	800b2d0 <__gethex+0x1ec>
 800b2bc:	4553      	cmp	r3, sl
 800b2be:	dd05      	ble.n	800b2cc <__gethex+0x1e8>
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	1eb9      	subs	r1, r7, #2
 800b2c4:	f000 fedd 	bl	800c082 <__any_on>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d144      	bne.n	800b356 <__gethex+0x272>
 800b2cc:	f04f 0a02 	mov.w	sl, #2
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7ff fe9e 	bl	800b014 <rshift>
 800b2d8:	443d      	add	r5, r7
 800b2da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2de:	42ab      	cmp	r3, r5
 800b2e0:	da4a      	bge.n	800b378 <__gethex+0x294>
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	9802      	ldr	r0, [sp, #8]
 800b2e6:	f000 fa75 	bl	800b7d4 <_Bfree>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2ee:	27a3      	movs	r7, #163	; 0xa3
 800b2f0:	6013      	str	r3, [r2, #0]
 800b2f2:	e789      	b.n	800b208 <__gethex+0x124>
 800b2f4:	1e73      	subs	r3, r6, #1
 800b2f6:	9a07      	ldr	r2, [sp, #28]
 800b2f8:	9305      	str	r3, [sp, #20]
 800b2fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d019      	beq.n	800b336 <__gethex+0x252>
 800b302:	f1bb 0f20 	cmp.w	fp, #32
 800b306:	d107      	bne.n	800b318 <__gethex+0x234>
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	9a01      	ldr	r2, [sp, #4]
 800b30c:	f843 2b04 	str.w	r2, [r3], #4
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	2300      	movs	r3, #0
 800b314:	469b      	mov	fp, r3
 800b316:	9301      	str	r3, [sp, #4]
 800b318:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b31c:	f7ff fecd 	bl	800b0ba <__hexdig_fun>
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	f000 000f 	and.w	r0, r0, #15
 800b326:	fa00 f00b 	lsl.w	r0, r0, fp
 800b32a:	4303      	orrs	r3, r0
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	f10b 0b04 	add.w	fp, fp, #4
 800b332:	9b05      	ldr	r3, [sp, #20]
 800b334:	e00d      	b.n	800b352 <__gethex+0x26e>
 800b336:	9b05      	ldr	r3, [sp, #20]
 800b338:	9a08      	ldr	r2, [sp, #32]
 800b33a:	4413      	add	r3, r2
 800b33c:	42bb      	cmp	r3, r7
 800b33e:	d3e0      	bcc.n	800b302 <__gethex+0x21e>
 800b340:	4618      	mov	r0, r3
 800b342:	4652      	mov	r2, sl
 800b344:	9903      	ldr	r1, [sp, #12]
 800b346:	9309      	str	r3, [sp, #36]	; 0x24
 800b348:	f001 f8e2 	bl	800c510 <strncmp>
 800b34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34e:	2800      	cmp	r0, #0
 800b350:	d1d7      	bne.n	800b302 <__gethex+0x21e>
 800b352:	461e      	mov	r6, r3
 800b354:	e78c      	b.n	800b270 <__gethex+0x18c>
 800b356:	f04f 0a03 	mov.w	sl, #3
 800b35a:	e7b9      	b.n	800b2d0 <__gethex+0x1ec>
 800b35c:	da09      	bge.n	800b372 <__gethex+0x28e>
 800b35e:	1bf7      	subs	r7, r6, r7
 800b360:	4621      	mov	r1, r4
 800b362:	463a      	mov	r2, r7
 800b364:	9802      	ldr	r0, [sp, #8]
 800b366:	f000 fc4d 	bl	800bc04 <__lshift>
 800b36a:	4604      	mov	r4, r0
 800b36c:	1bed      	subs	r5, r5, r7
 800b36e:	f100 0914 	add.w	r9, r0, #20
 800b372:	f04f 0a00 	mov.w	sl, #0
 800b376:	e7b0      	b.n	800b2da <__gethex+0x1f6>
 800b378:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b37c:	42a8      	cmp	r0, r5
 800b37e:	dd71      	ble.n	800b464 <__gethex+0x380>
 800b380:	1b45      	subs	r5, r0, r5
 800b382:	42ae      	cmp	r6, r5
 800b384:	dc34      	bgt.n	800b3f0 <__gethex+0x30c>
 800b386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d028      	beq.n	800b3e0 <__gethex+0x2fc>
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d02a      	beq.n	800b3e8 <__gethex+0x304>
 800b392:	2b01      	cmp	r3, #1
 800b394:	d115      	bne.n	800b3c2 <__gethex+0x2de>
 800b396:	42ae      	cmp	r6, r5
 800b398:	d113      	bne.n	800b3c2 <__gethex+0x2de>
 800b39a:	2e01      	cmp	r6, #1
 800b39c:	d10b      	bne.n	800b3b6 <__gethex+0x2d2>
 800b39e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3a2:	9a06      	ldr	r2, [sp, #24]
 800b3a4:	2762      	movs	r7, #98	; 0x62
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	6123      	str	r3, [r4, #16]
 800b3ac:	f8c9 3000 	str.w	r3, [r9]
 800b3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3b2:	601c      	str	r4, [r3, #0]
 800b3b4:	e728      	b.n	800b208 <__gethex+0x124>
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	1e71      	subs	r1, r6, #1
 800b3ba:	f000 fe62 	bl	800c082 <__any_on>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d1ed      	bne.n	800b39e <__gethex+0x2ba>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	9802      	ldr	r0, [sp, #8]
 800b3c6:	f000 fa05 	bl	800b7d4 <_Bfree>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3ce:	2750      	movs	r7, #80	; 0x50
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	e719      	b.n	800b208 <__gethex+0x124>
 800b3d4:	0800d4d0 	.word	0x0800d4d0
 800b3d8:	0800d454 	.word	0x0800d454
 800b3dc:	0800d465 	.word	0x0800d465
 800b3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1ed      	bne.n	800b3c2 <__gethex+0x2de>
 800b3e6:	e7da      	b.n	800b39e <__gethex+0x2ba>
 800b3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1d7      	bne.n	800b39e <__gethex+0x2ba>
 800b3ee:	e7e8      	b.n	800b3c2 <__gethex+0x2de>
 800b3f0:	1e6f      	subs	r7, r5, #1
 800b3f2:	f1ba 0f00 	cmp.w	sl, #0
 800b3f6:	d132      	bne.n	800b45e <__gethex+0x37a>
 800b3f8:	b127      	cbz	r7, 800b404 <__gethex+0x320>
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f000 fe40 	bl	800c082 <__any_on>
 800b402:	4682      	mov	sl, r0
 800b404:	2101      	movs	r1, #1
 800b406:	117b      	asrs	r3, r7, #5
 800b408:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b40c:	f007 071f 	and.w	r7, r7, #31
 800b410:	fa01 f707 	lsl.w	r7, r1, r7
 800b414:	421f      	tst	r7, r3
 800b416:	f04f 0702 	mov.w	r7, #2
 800b41a:	4629      	mov	r1, r5
 800b41c:	4620      	mov	r0, r4
 800b41e:	bf18      	it	ne
 800b420:	f04a 0a02 	orrne.w	sl, sl, #2
 800b424:	1b76      	subs	r6, r6, r5
 800b426:	f7ff fdf5 	bl	800b014 <rshift>
 800b42a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b42e:	f1ba 0f00 	cmp.w	sl, #0
 800b432:	d048      	beq.n	800b4c6 <__gethex+0x3e2>
 800b434:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d015      	beq.n	800b468 <__gethex+0x384>
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d017      	beq.n	800b470 <__gethex+0x38c>
 800b440:	2b01      	cmp	r3, #1
 800b442:	d109      	bne.n	800b458 <__gethex+0x374>
 800b444:	f01a 0f02 	tst.w	sl, #2
 800b448:	d006      	beq.n	800b458 <__gethex+0x374>
 800b44a:	f8d9 0000 	ldr.w	r0, [r9]
 800b44e:	ea4a 0a00 	orr.w	sl, sl, r0
 800b452:	f01a 0f01 	tst.w	sl, #1
 800b456:	d10e      	bne.n	800b476 <__gethex+0x392>
 800b458:	f047 0710 	orr.w	r7, r7, #16
 800b45c:	e033      	b.n	800b4c6 <__gethex+0x3e2>
 800b45e:	f04f 0a01 	mov.w	sl, #1
 800b462:	e7cf      	b.n	800b404 <__gethex+0x320>
 800b464:	2701      	movs	r7, #1
 800b466:	e7e2      	b.n	800b42e <__gethex+0x34a>
 800b468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b46a:	f1c3 0301 	rsb	r3, r3, #1
 800b46e:	9315      	str	r3, [sp, #84]	; 0x54
 800b470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f0      	beq.n	800b458 <__gethex+0x374>
 800b476:	f04f 0c00 	mov.w	ip, #0
 800b47a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b47e:	f104 0314 	add.w	r3, r4, #20
 800b482:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b486:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b490:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b494:	d01c      	beq.n	800b4d0 <__gethex+0x3ec>
 800b496:	3201      	adds	r2, #1
 800b498:	6002      	str	r2, [r0, #0]
 800b49a:	2f02      	cmp	r7, #2
 800b49c:	f104 0314 	add.w	r3, r4, #20
 800b4a0:	d13d      	bne.n	800b51e <__gethex+0x43a>
 800b4a2:	f8d8 2000 	ldr.w	r2, [r8]
 800b4a6:	3a01      	subs	r2, #1
 800b4a8:	42b2      	cmp	r2, r6
 800b4aa:	d10a      	bne.n	800b4c2 <__gethex+0x3de>
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	1171      	asrs	r1, r6, #5
 800b4b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4b4:	f006 061f 	and.w	r6, r6, #31
 800b4b8:	fa02 f606 	lsl.w	r6, r2, r6
 800b4bc:	421e      	tst	r6, r3
 800b4be:	bf18      	it	ne
 800b4c0:	4617      	movne	r7, r2
 800b4c2:	f047 0720 	orr.w	r7, r7, #32
 800b4c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4c8:	601c      	str	r4, [r3, #0]
 800b4ca:	9b06      	ldr	r3, [sp, #24]
 800b4cc:	601d      	str	r5, [r3, #0]
 800b4ce:	e69b      	b.n	800b208 <__gethex+0x124>
 800b4d0:	4299      	cmp	r1, r3
 800b4d2:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4d6:	d8d8      	bhi.n	800b48a <__gethex+0x3a6>
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	459b      	cmp	fp, r3
 800b4dc:	db17      	blt.n	800b50e <__gethex+0x42a>
 800b4de:	6861      	ldr	r1, [r4, #4]
 800b4e0:	9802      	ldr	r0, [sp, #8]
 800b4e2:	3101      	adds	r1, #1
 800b4e4:	f000 f936 	bl	800b754 <_Balloc>
 800b4e8:	4681      	mov	r9, r0
 800b4ea:	b918      	cbnz	r0, 800b4f4 <__gethex+0x410>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	2184      	movs	r1, #132	; 0x84
 800b4f0:	4b19      	ldr	r3, [pc, #100]	; (800b558 <__gethex+0x474>)
 800b4f2:	e6ac      	b.n	800b24e <__gethex+0x16a>
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	f104 010c 	add.w	r1, r4, #12
 800b4fa:	3202      	adds	r2, #2
 800b4fc:	0092      	lsls	r2, r2, #2
 800b4fe:	300c      	adds	r0, #12
 800b500:	f000 f91a 	bl	800b738 <memcpy>
 800b504:	4621      	mov	r1, r4
 800b506:	9802      	ldr	r0, [sp, #8]
 800b508:	f000 f964 	bl	800b7d4 <_Bfree>
 800b50c:	464c      	mov	r4, r9
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	6122      	str	r2, [r4, #16]
 800b514:	2201      	movs	r2, #1
 800b516:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b51a:	615a      	str	r2, [r3, #20]
 800b51c:	e7bd      	b.n	800b49a <__gethex+0x3b6>
 800b51e:	6922      	ldr	r2, [r4, #16]
 800b520:	455a      	cmp	r2, fp
 800b522:	dd0b      	ble.n	800b53c <__gethex+0x458>
 800b524:	2101      	movs	r1, #1
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff fd74 	bl	800b014 <rshift>
 800b52c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b530:	3501      	adds	r5, #1
 800b532:	42ab      	cmp	r3, r5
 800b534:	f6ff aed5 	blt.w	800b2e2 <__gethex+0x1fe>
 800b538:	2701      	movs	r7, #1
 800b53a:	e7c2      	b.n	800b4c2 <__gethex+0x3de>
 800b53c:	f016 061f 	ands.w	r6, r6, #31
 800b540:	d0fa      	beq.n	800b538 <__gethex+0x454>
 800b542:	449a      	add	sl, r3
 800b544:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b548:	f000 f9fa 	bl	800b940 <__hi0bits>
 800b54c:	f1c6 0620 	rsb	r6, r6, #32
 800b550:	42b0      	cmp	r0, r6
 800b552:	dbe7      	blt.n	800b524 <__gethex+0x440>
 800b554:	e7f0      	b.n	800b538 <__gethex+0x454>
 800b556:	bf00      	nop
 800b558:	0800d454 	.word	0x0800d454

0800b55c <L_shift>:
 800b55c:	f1c2 0208 	rsb	r2, r2, #8
 800b560:	0092      	lsls	r2, r2, #2
 800b562:	b570      	push	{r4, r5, r6, lr}
 800b564:	f1c2 0620 	rsb	r6, r2, #32
 800b568:	6843      	ldr	r3, [r0, #4]
 800b56a:	6804      	ldr	r4, [r0, #0]
 800b56c:	fa03 f506 	lsl.w	r5, r3, r6
 800b570:	432c      	orrs	r4, r5
 800b572:	40d3      	lsrs	r3, r2
 800b574:	6004      	str	r4, [r0, #0]
 800b576:	f840 3f04 	str.w	r3, [r0, #4]!
 800b57a:	4288      	cmp	r0, r1
 800b57c:	d3f4      	bcc.n	800b568 <L_shift+0xc>
 800b57e:	bd70      	pop	{r4, r5, r6, pc}

0800b580 <__match>:
 800b580:	b530      	push	{r4, r5, lr}
 800b582:	6803      	ldr	r3, [r0, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b58a:	b914      	cbnz	r4, 800b592 <__match+0x12>
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	2001      	movs	r0, #1
 800b590:	bd30      	pop	{r4, r5, pc}
 800b592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b596:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b59a:	2d19      	cmp	r5, #25
 800b59c:	bf98      	it	ls
 800b59e:	3220      	addls	r2, #32
 800b5a0:	42a2      	cmp	r2, r4
 800b5a2:	d0f0      	beq.n	800b586 <__match+0x6>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e7f3      	b.n	800b590 <__match+0x10>

0800b5a8 <__hexnan>:
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	680b      	ldr	r3, [r1, #0]
 800b5b0:	4682      	mov	sl, r0
 800b5b2:	115e      	asrs	r6, r3, #5
 800b5b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5b8:	f013 031f 	ands.w	r3, r3, #31
 800b5bc:	bf18      	it	ne
 800b5be:	3604      	addne	r6, #4
 800b5c0:	1f37      	subs	r7, r6, #4
 800b5c2:	4690      	mov	r8, r2
 800b5c4:	46b9      	mov	r9, r7
 800b5c6:	463c      	mov	r4, r7
 800b5c8:	46ab      	mov	fp, r5
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	6801      	ldr	r1, [r0, #0]
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5d4:	9502      	str	r5, [sp, #8]
 800b5d6:	784a      	ldrb	r2, [r1, #1]
 800b5d8:	1c4b      	adds	r3, r1, #1
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	b342      	cbz	r2, 800b630 <__hexnan+0x88>
 800b5de:	4610      	mov	r0, r2
 800b5e0:	9105      	str	r1, [sp, #20]
 800b5e2:	9204      	str	r2, [sp, #16]
 800b5e4:	f7ff fd69 	bl	800b0ba <__hexdig_fun>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d14f      	bne.n	800b68c <__hexnan+0xe4>
 800b5ec:	9a04      	ldr	r2, [sp, #16]
 800b5ee:	9905      	ldr	r1, [sp, #20]
 800b5f0:	2a20      	cmp	r2, #32
 800b5f2:	d818      	bhi.n	800b626 <__hexnan+0x7e>
 800b5f4:	9b02      	ldr	r3, [sp, #8]
 800b5f6:	459b      	cmp	fp, r3
 800b5f8:	dd13      	ble.n	800b622 <__hexnan+0x7a>
 800b5fa:	454c      	cmp	r4, r9
 800b5fc:	d206      	bcs.n	800b60c <__hexnan+0x64>
 800b5fe:	2d07      	cmp	r5, #7
 800b600:	dc04      	bgt.n	800b60c <__hexnan+0x64>
 800b602:	462a      	mov	r2, r5
 800b604:	4649      	mov	r1, r9
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff ffa8 	bl	800b55c <L_shift>
 800b60c:	4544      	cmp	r4, r8
 800b60e:	d950      	bls.n	800b6b2 <__hexnan+0x10a>
 800b610:	2300      	movs	r3, #0
 800b612:	f1a4 0904 	sub.w	r9, r4, #4
 800b616:	f844 3c04 	str.w	r3, [r4, #-4]
 800b61a:	461d      	mov	r5, r3
 800b61c:	464c      	mov	r4, r9
 800b61e:	f8cd b008 	str.w	fp, [sp, #8]
 800b622:	9903      	ldr	r1, [sp, #12]
 800b624:	e7d7      	b.n	800b5d6 <__hexnan+0x2e>
 800b626:	2a29      	cmp	r2, #41	; 0x29
 800b628:	d156      	bne.n	800b6d8 <__hexnan+0x130>
 800b62a:	3102      	adds	r1, #2
 800b62c:	f8ca 1000 	str.w	r1, [sl]
 800b630:	f1bb 0f00 	cmp.w	fp, #0
 800b634:	d050      	beq.n	800b6d8 <__hexnan+0x130>
 800b636:	454c      	cmp	r4, r9
 800b638:	d206      	bcs.n	800b648 <__hexnan+0xa0>
 800b63a:	2d07      	cmp	r5, #7
 800b63c:	dc04      	bgt.n	800b648 <__hexnan+0xa0>
 800b63e:	462a      	mov	r2, r5
 800b640:	4649      	mov	r1, r9
 800b642:	4620      	mov	r0, r4
 800b644:	f7ff ff8a 	bl	800b55c <L_shift>
 800b648:	4544      	cmp	r4, r8
 800b64a:	d934      	bls.n	800b6b6 <__hexnan+0x10e>
 800b64c:	4623      	mov	r3, r4
 800b64e:	f1a8 0204 	sub.w	r2, r8, #4
 800b652:	f853 1b04 	ldr.w	r1, [r3], #4
 800b656:	429f      	cmp	r7, r3
 800b658:	f842 1f04 	str.w	r1, [r2, #4]!
 800b65c:	d2f9      	bcs.n	800b652 <__hexnan+0xaa>
 800b65e:	1b3b      	subs	r3, r7, r4
 800b660:	f023 0303 	bic.w	r3, r3, #3
 800b664:	3304      	adds	r3, #4
 800b666:	3401      	adds	r4, #1
 800b668:	3e03      	subs	r6, #3
 800b66a:	42b4      	cmp	r4, r6
 800b66c:	bf88      	it	hi
 800b66e:	2304      	movhi	r3, #4
 800b670:	2200      	movs	r2, #0
 800b672:	4443      	add	r3, r8
 800b674:	f843 2b04 	str.w	r2, [r3], #4
 800b678:	429f      	cmp	r7, r3
 800b67a:	d2fb      	bcs.n	800b674 <__hexnan+0xcc>
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	b91b      	cbnz	r3, 800b688 <__hexnan+0xe0>
 800b680:	4547      	cmp	r7, r8
 800b682:	d127      	bne.n	800b6d4 <__hexnan+0x12c>
 800b684:	2301      	movs	r3, #1
 800b686:	603b      	str	r3, [r7, #0]
 800b688:	2005      	movs	r0, #5
 800b68a:	e026      	b.n	800b6da <__hexnan+0x132>
 800b68c:	3501      	adds	r5, #1
 800b68e:	2d08      	cmp	r5, #8
 800b690:	f10b 0b01 	add.w	fp, fp, #1
 800b694:	dd06      	ble.n	800b6a4 <__hexnan+0xfc>
 800b696:	4544      	cmp	r4, r8
 800b698:	d9c3      	bls.n	800b622 <__hexnan+0x7a>
 800b69a:	2300      	movs	r3, #0
 800b69c:	2501      	movs	r5, #1
 800b69e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6a2:	3c04      	subs	r4, #4
 800b6a4:	6822      	ldr	r2, [r4, #0]
 800b6a6:	f000 000f 	and.w	r0, r0, #15
 800b6aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6ae:	6022      	str	r2, [r4, #0]
 800b6b0:	e7b7      	b.n	800b622 <__hexnan+0x7a>
 800b6b2:	2508      	movs	r5, #8
 800b6b4:	e7b5      	b.n	800b622 <__hexnan+0x7a>
 800b6b6:	9b01      	ldr	r3, [sp, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0df      	beq.n	800b67c <__hexnan+0xd4>
 800b6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c0:	f1c3 0320 	rsb	r3, r3, #32
 800b6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6cc:	401a      	ands	r2, r3
 800b6ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6d2:	e7d3      	b.n	800b67c <__hexnan+0xd4>
 800b6d4:	3f04      	subs	r7, #4
 800b6d6:	e7d1      	b.n	800b67c <__hexnan+0xd4>
 800b6d8:	2004      	movs	r0, #4
 800b6da:	b007      	add	sp, #28
 800b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6e0 <_localeconv_r>:
 800b6e0:	4800      	ldr	r0, [pc, #0]	; (800b6e4 <_localeconv_r+0x4>)
 800b6e2:	4770      	bx	lr
 800b6e4:	20000168 	.word	0x20000168

0800b6e8 <malloc>:
 800b6e8:	4b02      	ldr	r3, [pc, #8]	; (800b6f4 <malloc+0xc>)
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	f000 bd43 	b.w	800c178 <_malloc_r>
 800b6f2:	bf00      	nop
 800b6f4:	20000010 	.word	0x20000010

0800b6f8 <__ascii_mbtowc>:
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	b901      	cbnz	r1, 800b6fe <__ascii_mbtowc+0x6>
 800b6fc:	a901      	add	r1, sp, #4
 800b6fe:	b142      	cbz	r2, 800b712 <__ascii_mbtowc+0x1a>
 800b700:	b14b      	cbz	r3, 800b716 <__ascii_mbtowc+0x1e>
 800b702:	7813      	ldrb	r3, [r2, #0]
 800b704:	600b      	str	r3, [r1, #0]
 800b706:	7812      	ldrb	r2, [r2, #0]
 800b708:	1e10      	subs	r0, r2, #0
 800b70a:	bf18      	it	ne
 800b70c:	2001      	movne	r0, #1
 800b70e:	b002      	add	sp, #8
 800b710:	4770      	bx	lr
 800b712:	4610      	mov	r0, r2
 800b714:	e7fb      	b.n	800b70e <__ascii_mbtowc+0x16>
 800b716:	f06f 0001 	mvn.w	r0, #1
 800b71a:	e7f8      	b.n	800b70e <__ascii_mbtowc+0x16>

0800b71c <memchr>:
 800b71c:	4603      	mov	r3, r0
 800b71e:	b510      	push	{r4, lr}
 800b720:	b2c9      	uxtb	r1, r1
 800b722:	4402      	add	r2, r0
 800b724:	4293      	cmp	r3, r2
 800b726:	4618      	mov	r0, r3
 800b728:	d101      	bne.n	800b72e <memchr+0x12>
 800b72a:	2000      	movs	r0, #0
 800b72c:	e003      	b.n	800b736 <memchr+0x1a>
 800b72e:	7804      	ldrb	r4, [r0, #0]
 800b730:	3301      	adds	r3, #1
 800b732:	428c      	cmp	r4, r1
 800b734:	d1f6      	bne.n	800b724 <memchr+0x8>
 800b736:	bd10      	pop	{r4, pc}

0800b738 <memcpy>:
 800b738:	440a      	add	r2, r1
 800b73a:	4291      	cmp	r1, r2
 800b73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b740:	d100      	bne.n	800b744 <memcpy+0xc>
 800b742:	4770      	bx	lr
 800b744:	b510      	push	{r4, lr}
 800b746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b74a:	4291      	cmp	r1, r2
 800b74c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b750:	d1f9      	bne.n	800b746 <memcpy+0xe>
 800b752:	bd10      	pop	{r4, pc}

0800b754 <_Balloc>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	b976      	cbnz	r6, 800b77c <_Balloc+0x28>
 800b75e:	2010      	movs	r0, #16
 800b760:	f7ff ffc2 	bl	800b6e8 <malloc>
 800b764:	4602      	mov	r2, r0
 800b766:	6260      	str	r0, [r4, #36]	; 0x24
 800b768:	b920      	cbnz	r0, 800b774 <_Balloc+0x20>
 800b76a:	2166      	movs	r1, #102	; 0x66
 800b76c:	4b17      	ldr	r3, [pc, #92]	; (800b7cc <_Balloc+0x78>)
 800b76e:	4818      	ldr	r0, [pc, #96]	; (800b7d0 <_Balloc+0x7c>)
 800b770:	f000 feee 	bl	800c550 <__assert_func>
 800b774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b778:	6006      	str	r6, [r0, #0]
 800b77a:	60c6      	str	r6, [r0, #12]
 800b77c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b77e:	68f3      	ldr	r3, [r6, #12]
 800b780:	b183      	cbz	r3, 800b7a4 <_Balloc+0x50>
 800b782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b78a:	b9b8      	cbnz	r0, 800b7bc <_Balloc+0x68>
 800b78c:	2101      	movs	r1, #1
 800b78e:	fa01 f605 	lsl.w	r6, r1, r5
 800b792:	1d72      	adds	r2, r6, #5
 800b794:	4620      	mov	r0, r4
 800b796:	0092      	lsls	r2, r2, #2
 800b798:	f000 fc94 	bl	800c0c4 <_calloc_r>
 800b79c:	b160      	cbz	r0, 800b7b8 <_Balloc+0x64>
 800b79e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7a2:	e00e      	b.n	800b7c2 <_Balloc+0x6e>
 800b7a4:	2221      	movs	r2, #33	; 0x21
 800b7a6:	2104      	movs	r1, #4
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 fc8b 	bl	800c0c4 <_calloc_r>
 800b7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b0:	60f0      	str	r0, [r6, #12]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e4      	bne.n	800b782 <_Balloc+0x2e>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	6802      	ldr	r2, [r0, #0]
 800b7be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7c8:	e7f7      	b.n	800b7ba <_Balloc+0x66>
 800b7ca:	bf00      	nop
 800b7cc:	0800d3de 	.word	0x0800d3de
 800b7d0:	0800d4e4 	.word	0x0800d4e4

0800b7d4 <_Bfree>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7d8:	4605      	mov	r5, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	b976      	cbnz	r6, 800b7fc <_Bfree+0x28>
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f7ff ff82 	bl	800b6e8 <malloc>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	6268      	str	r0, [r5, #36]	; 0x24
 800b7e8:	b920      	cbnz	r0, 800b7f4 <_Bfree+0x20>
 800b7ea:	218a      	movs	r1, #138	; 0x8a
 800b7ec:	4b08      	ldr	r3, [pc, #32]	; (800b810 <_Bfree+0x3c>)
 800b7ee:	4809      	ldr	r0, [pc, #36]	; (800b814 <_Bfree+0x40>)
 800b7f0:	f000 feae 	bl	800c550 <__assert_func>
 800b7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f8:	6006      	str	r6, [r0, #0]
 800b7fa:	60c6      	str	r6, [r0, #12]
 800b7fc:	b13c      	cbz	r4, 800b80e <_Bfree+0x3a>
 800b7fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b800:	6862      	ldr	r2, [r4, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b808:	6021      	str	r1, [r4, #0]
 800b80a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	0800d3de 	.word	0x0800d3de
 800b814:	0800d4e4 	.word	0x0800d4e4

0800b818 <__multadd>:
 800b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	4698      	mov	r8, r3
 800b81e:	460c      	mov	r4, r1
 800b820:	2300      	movs	r3, #0
 800b822:	690e      	ldr	r6, [r1, #16]
 800b824:	4607      	mov	r7, r0
 800b826:	f101 0014 	add.w	r0, r1, #20
 800b82a:	6805      	ldr	r5, [r0, #0]
 800b82c:	3301      	adds	r3, #1
 800b82e:	b2a9      	uxth	r1, r5
 800b830:	fb02 8101 	mla	r1, r2, r1, r8
 800b834:	0c2d      	lsrs	r5, r5, #16
 800b836:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b83a:	fb02 c505 	mla	r5, r2, r5, ip
 800b83e:	b289      	uxth	r1, r1
 800b840:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b844:	429e      	cmp	r6, r3
 800b846:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b84a:	f840 1b04 	str.w	r1, [r0], #4
 800b84e:	dcec      	bgt.n	800b82a <__multadd+0x12>
 800b850:	f1b8 0f00 	cmp.w	r8, #0
 800b854:	d022      	beq.n	800b89c <__multadd+0x84>
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	42b3      	cmp	r3, r6
 800b85a:	dc19      	bgt.n	800b890 <__multadd+0x78>
 800b85c:	6861      	ldr	r1, [r4, #4]
 800b85e:	4638      	mov	r0, r7
 800b860:	3101      	adds	r1, #1
 800b862:	f7ff ff77 	bl	800b754 <_Balloc>
 800b866:	4605      	mov	r5, r0
 800b868:	b928      	cbnz	r0, 800b876 <__multadd+0x5e>
 800b86a:	4602      	mov	r2, r0
 800b86c:	21b5      	movs	r1, #181	; 0xb5
 800b86e:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <__multadd+0x8c>)
 800b870:	480d      	ldr	r0, [pc, #52]	; (800b8a8 <__multadd+0x90>)
 800b872:	f000 fe6d 	bl	800c550 <__assert_func>
 800b876:	6922      	ldr	r2, [r4, #16]
 800b878:	f104 010c 	add.w	r1, r4, #12
 800b87c:	3202      	adds	r2, #2
 800b87e:	0092      	lsls	r2, r2, #2
 800b880:	300c      	adds	r0, #12
 800b882:	f7ff ff59 	bl	800b738 <memcpy>
 800b886:	4621      	mov	r1, r4
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff ffa3 	bl	800b7d4 <_Bfree>
 800b88e:	462c      	mov	r4, r5
 800b890:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b894:	3601      	adds	r6, #1
 800b896:	f8c3 8014 	str.w	r8, [r3, #20]
 800b89a:	6126      	str	r6, [r4, #16]
 800b89c:	4620      	mov	r0, r4
 800b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a2:	bf00      	nop
 800b8a4:	0800d454 	.word	0x0800d454
 800b8a8:	0800d4e4 	.word	0x0800d4e4

0800b8ac <__s2b>:
 800b8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	4615      	mov	r5, r2
 800b8b2:	2209      	movs	r2, #9
 800b8b4:	461f      	mov	r7, r3
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8be:	4606      	mov	r6, r0
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	db09      	blt.n	800b8dc <__s2b+0x30>
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7ff ff43 	bl	800b754 <_Balloc>
 800b8ce:	b940      	cbnz	r0, 800b8e2 <__s2b+0x36>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	21ce      	movs	r1, #206	; 0xce
 800b8d4:	4b18      	ldr	r3, [pc, #96]	; (800b938 <__s2b+0x8c>)
 800b8d6:	4819      	ldr	r0, [pc, #100]	; (800b93c <__s2b+0x90>)
 800b8d8:	f000 fe3a 	bl	800c550 <__assert_func>
 800b8dc:	0052      	lsls	r2, r2, #1
 800b8de:	3101      	adds	r1, #1
 800b8e0:	e7f0      	b.n	800b8c4 <__s2b+0x18>
 800b8e2:	9b08      	ldr	r3, [sp, #32]
 800b8e4:	2d09      	cmp	r5, #9
 800b8e6:	6143      	str	r3, [r0, #20]
 800b8e8:	f04f 0301 	mov.w	r3, #1
 800b8ec:	6103      	str	r3, [r0, #16]
 800b8ee:	dd16      	ble.n	800b91e <__s2b+0x72>
 800b8f0:	f104 0909 	add.w	r9, r4, #9
 800b8f4:	46c8      	mov	r8, r9
 800b8f6:	442c      	add	r4, r5
 800b8f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8fc:	4601      	mov	r1, r0
 800b8fe:	220a      	movs	r2, #10
 800b900:	4630      	mov	r0, r6
 800b902:	3b30      	subs	r3, #48	; 0x30
 800b904:	f7ff ff88 	bl	800b818 <__multadd>
 800b908:	45a0      	cmp	r8, r4
 800b90a:	d1f5      	bne.n	800b8f8 <__s2b+0x4c>
 800b90c:	f1a5 0408 	sub.w	r4, r5, #8
 800b910:	444c      	add	r4, r9
 800b912:	1b2d      	subs	r5, r5, r4
 800b914:	1963      	adds	r3, r4, r5
 800b916:	42bb      	cmp	r3, r7
 800b918:	db04      	blt.n	800b924 <__s2b+0x78>
 800b91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91e:	2509      	movs	r5, #9
 800b920:	340a      	adds	r4, #10
 800b922:	e7f6      	b.n	800b912 <__s2b+0x66>
 800b924:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b928:	4601      	mov	r1, r0
 800b92a:	220a      	movs	r2, #10
 800b92c:	4630      	mov	r0, r6
 800b92e:	3b30      	subs	r3, #48	; 0x30
 800b930:	f7ff ff72 	bl	800b818 <__multadd>
 800b934:	e7ee      	b.n	800b914 <__s2b+0x68>
 800b936:	bf00      	nop
 800b938:	0800d454 	.word	0x0800d454
 800b93c:	0800d4e4 	.word	0x0800d4e4

0800b940 <__hi0bits>:
 800b940:	0c02      	lsrs	r2, r0, #16
 800b942:	0412      	lsls	r2, r2, #16
 800b944:	4603      	mov	r3, r0
 800b946:	b9ca      	cbnz	r2, 800b97c <__hi0bits+0x3c>
 800b948:	0403      	lsls	r3, r0, #16
 800b94a:	2010      	movs	r0, #16
 800b94c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b950:	bf04      	itt	eq
 800b952:	021b      	lsleq	r3, r3, #8
 800b954:	3008      	addeq	r0, #8
 800b956:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b95a:	bf04      	itt	eq
 800b95c:	011b      	lsleq	r3, r3, #4
 800b95e:	3004      	addeq	r0, #4
 800b960:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b964:	bf04      	itt	eq
 800b966:	009b      	lsleq	r3, r3, #2
 800b968:	3002      	addeq	r0, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	db05      	blt.n	800b97a <__hi0bits+0x3a>
 800b96e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b972:	f100 0001 	add.w	r0, r0, #1
 800b976:	bf08      	it	eq
 800b978:	2020      	moveq	r0, #32
 800b97a:	4770      	bx	lr
 800b97c:	2000      	movs	r0, #0
 800b97e:	e7e5      	b.n	800b94c <__hi0bits+0xc>

0800b980 <__lo0bits>:
 800b980:	6803      	ldr	r3, [r0, #0]
 800b982:	4602      	mov	r2, r0
 800b984:	f013 0007 	ands.w	r0, r3, #7
 800b988:	d00b      	beq.n	800b9a2 <__lo0bits+0x22>
 800b98a:	07d9      	lsls	r1, r3, #31
 800b98c:	d422      	bmi.n	800b9d4 <__lo0bits+0x54>
 800b98e:	0798      	lsls	r0, r3, #30
 800b990:	bf49      	itett	mi
 800b992:	085b      	lsrmi	r3, r3, #1
 800b994:	089b      	lsrpl	r3, r3, #2
 800b996:	2001      	movmi	r0, #1
 800b998:	6013      	strmi	r3, [r2, #0]
 800b99a:	bf5c      	itt	pl
 800b99c:	2002      	movpl	r0, #2
 800b99e:	6013      	strpl	r3, [r2, #0]
 800b9a0:	4770      	bx	lr
 800b9a2:	b299      	uxth	r1, r3
 800b9a4:	b909      	cbnz	r1, 800b9aa <__lo0bits+0x2a>
 800b9a6:	2010      	movs	r0, #16
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b9ae:	bf04      	itt	eq
 800b9b0:	0a1b      	lsreq	r3, r3, #8
 800b9b2:	3008      	addeq	r0, #8
 800b9b4:	0719      	lsls	r1, r3, #28
 800b9b6:	bf04      	itt	eq
 800b9b8:	091b      	lsreq	r3, r3, #4
 800b9ba:	3004      	addeq	r0, #4
 800b9bc:	0799      	lsls	r1, r3, #30
 800b9be:	bf04      	itt	eq
 800b9c0:	089b      	lsreq	r3, r3, #2
 800b9c2:	3002      	addeq	r0, #2
 800b9c4:	07d9      	lsls	r1, r3, #31
 800b9c6:	d403      	bmi.n	800b9d0 <__lo0bits+0x50>
 800b9c8:	085b      	lsrs	r3, r3, #1
 800b9ca:	f100 0001 	add.w	r0, r0, #1
 800b9ce:	d003      	beq.n	800b9d8 <__lo0bits+0x58>
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	4770      	bx	lr
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	4770      	bx	lr
 800b9d8:	2020      	movs	r0, #32
 800b9da:	4770      	bx	lr

0800b9dc <__i2b>:
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	460c      	mov	r4, r1
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	f7ff feb7 	bl	800b754 <_Balloc>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	b928      	cbnz	r0, 800b9f6 <__i2b+0x1a>
 800b9ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9ee:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <__i2b+0x24>)
 800b9f0:	4804      	ldr	r0, [pc, #16]	; (800ba04 <__i2b+0x28>)
 800b9f2:	f000 fdad 	bl	800c550 <__assert_func>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	6144      	str	r4, [r0, #20]
 800b9fa:	6103      	str	r3, [r0, #16]
 800b9fc:	bd10      	pop	{r4, pc}
 800b9fe:	bf00      	nop
 800ba00:	0800d454 	.word	0x0800d454
 800ba04:	0800d4e4 	.word	0x0800d4e4

0800ba08 <__multiply>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	690a      	ldr	r2, [r1, #16]
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	460d      	mov	r5, r1
 800ba14:	429a      	cmp	r2, r3
 800ba16:	bfbe      	ittt	lt
 800ba18:	460b      	movlt	r3, r1
 800ba1a:	4625      	movlt	r5, r4
 800ba1c:	461c      	movlt	r4, r3
 800ba1e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ba22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ba26:	68ab      	ldr	r3, [r5, #8]
 800ba28:	6869      	ldr	r1, [r5, #4]
 800ba2a:	eb0a 0709 	add.w	r7, sl, r9
 800ba2e:	42bb      	cmp	r3, r7
 800ba30:	b085      	sub	sp, #20
 800ba32:	bfb8      	it	lt
 800ba34:	3101      	addlt	r1, #1
 800ba36:	f7ff fe8d 	bl	800b754 <_Balloc>
 800ba3a:	b930      	cbnz	r0, 800ba4a <__multiply+0x42>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	f240 115d 	movw	r1, #349	; 0x15d
 800ba42:	4b41      	ldr	r3, [pc, #260]	; (800bb48 <__multiply+0x140>)
 800ba44:	4841      	ldr	r0, [pc, #260]	; (800bb4c <__multiply+0x144>)
 800ba46:	f000 fd83 	bl	800c550 <__assert_func>
 800ba4a:	f100 0614 	add.w	r6, r0, #20
 800ba4e:	4633      	mov	r3, r6
 800ba50:	2200      	movs	r2, #0
 800ba52:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ba56:	4543      	cmp	r3, r8
 800ba58:	d31e      	bcc.n	800ba98 <__multiply+0x90>
 800ba5a:	f105 0c14 	add.w	ip, r5, #20
 800ba5e:	f104 0314 	add.w	r3, r4, #20
 800ba62:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba66:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ba6a:	9202      	str	r2, [sp, #8]
 800ba6c:	ebac 0205 	sub.w	r2, ip, r5
 800ba70:	3a15      	subs	r2, #21
 800ba72:	f022 0203 	bic.w	r2, r2, #3
 800ba76:	3204      	adds	r2, #4
 800ba78:	f105 0115 	add.w	r1, r5, #21
 800ba7c:	458c      	cmp	ip, r1
 800ba7e:	bf38      	it	cc
 800ba80:	2204      	movcc	r2, #4
 800ba82:	9201      	str	r2, [sp, #4]
 800ba84:	9a02      	ldr	r2, [sp, #8]
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d808      	bhi.n	800ba9e <__multiply+0x96>
 800ba8c:	2f00      	cmp	r7, #0
 800ba8e:	dc55      	bgt.n	800bb3c <__multiply+0x134>
 800ba90:	6107      	str	r7, [r0, #16]
 800ba92:	b005      	add	sp, #20
 800ba94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba98:	f843 2b04 	str.w	r2, [r3], #4
 800ba9c:	e7db      	b.n	800ba56 <__multiply+0x4e>
 800ba9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	d020      	beq.n	800baea <__multiply+0xe2>
 800baa8:	46b1      	mov	r9, r6
 800baaa:	2200      	movs	r2, #0
 800baac:	f105 0e14 	add.w	lr, r5, #20
 800bab0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bab4:	f8d9 b000 	ldr.w	fp, [r9]
 800bab8:	b2a1      	uxth	r1, r4
 800baba:	fa1f fb8b 	uxth.w	fp, fp
 800babe:	fb0a b101 	mla	r1, sl, r1, fp
 800bac2:	4411      	add	r1, r2
 800bac4:	f8d9 2000 	ldr.w	r2, [r9]
 800bac8:	0c24      	lsrs	r4, r4, #16
 800baca:	0c12      	lsrs	r2, r2, #16
 800bacc:	fb0a 2404 	mla	r4, sl, r4, r2
 800bad0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bad4:	b289      	uxth	r1, r1
 800bad6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bada:	45f4      	cmp	ip, lr
 800badc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bae0:	f849 1b04 	str.w	r1, [r9], #4
 800bae4:	d8e4      	bhi.n	800bab0 <__multiply+0xa8>
 800bae6:	9901      	ldr	r1, [sp, #4]
 800bae8:	5072      	str	r2, [r6, r1]
 800baea:	9a03      	ldr	r2, [sp, #12]
 800baec:	3304      	adds	r3, #4
 800baee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	d01f      	beq.n	800bb38 <__multiply+0x130>
 800baf8:	46b6      	mov	lr, r6
 800bafa:	f04f 0a00 	mov.w	sl, #0
 800bafe:	6834      	ldr	r4, [r6, #0]
 800bb00:	f105 0114 	add.w	r1, r5, #20
 800bb04:	880a      	ldrh	r2, [r1, #0]
 800bb06:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bb0a:	b2a4      	uxth	r4, r4
 800bb0c:	fb09 b202 	mla	r2, r9, r2, fp
 800bb10:	4492      	add	sl, r2
 800bb12:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bb16:	f84e 4b04 	str.w	r4, [lr], #4
 800bb1a:	f851 4b04 	ldr.w	r4, [r1], #4
 800bb1e:	f8be 2000 	ldrh.w	r2, [lr]
 800bb22:	0c24      	lsrs	r4, r4, #16
 800bb24:	fb09 2404 	mla	r4, r9, r4, r2
 800bb28:	458c      	cmp	ip, r1
 800bb2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bb2e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb32:	d8e7      	bhi.n	800bb04 <__multiply+0xfc>
 800bb34:	9a01      	ldr	r2, [sp, #4]
 800bb36:	50b4      	str	r4, [r6, r2]
 800bb38:	3604      	adds	r6, #4
 800bb3a:	e7a3      	b.n	800ba84 <__multiply+0x7c>
 800bb3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1a5      	bne.n	800ba90 <__multiply+0x88>
 800bb44:	3f01      	subs	r7, #1
 800bb46:	e7a1      	b.n	800ba8c <__multiply+0x84>
 800bb48:	0800d454 	.word	0x0800d454
 800bb4c:	0800d4e4 	.word	0x0800d4e4

0800bb50 <__pow5mult>:
 800bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb54:	4615      	mov	r5, r2
 800bb56:	f012 0203 	ands.w	r2, r2, #3
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	d007      	beq.n	800bb70 <__pow5mult+0x20>
 800bb60:	4c25      	ldr	r4, [pc, #148]	; (800bbf8 <__pow5mult+0xa8>)
 800bb62:	3a01      	subs	r2, #1
 800bb64:	2300      	movs	r3, #0
 800bb66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb6a:	f7ff fe55 	bl	800b818 <__multadd>
 800bb6e:	4607      	mov	r7, r0
 800bb70:	10ad      	asrs	r5, r5, #2
 800bb72:	d03d      	beq.n	800bbf0 <__pow5mult+0xa0>
 800bb74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb76:	b97c      	cbnz	r4, 800bb98 <__pow5mult+0x48>
 800bb78:	2010      	movs	r0, #16
 800bb7a:	f7ff fdb5 	bl	800b6e8 <malloc>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	6270      	str	r0, [r6, #36]	; 0x24
 800bb82:	b928      	cbnz	r0, 800bb90 <__pow5mult+0x40>
 800bb84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb88:	4b1c      	ldr	r3, [pc, #112]	; (800bbfc <__pow5mult+0xac>)
 800bb8a:	481d      	ldr	r0, [pc, #116]	; (800bc00 <__pow5mult+0xb0>)
 800bb8c:	f000 fce0 	bl	800c550 <__assert_func>
 800bb90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb94:	6004      	str	r4, [r0, #0]
 800bb96:	60c4      	str	r4, [r0, #12]
 800bb98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bba0:	b94c      	cbnz	r4, 800bbb6 <__pow5mult+0x66>
 800bba2:	f240 2171 	movw	r1, #625	; 0x271
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7ff ff18 	bl	800b9dc <__i2b>
 800bbac:	2300      	movs	r3, #0
 800bbae:	4604      	mov	r4, r0
 800bbb0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbb4:	6003      	str	r3, [r0, #0]
 800bbb6:	f04f 0900 	mov.w	r9, #0
 800bbba:	07eb      	lsls	r3, r5, #31
 800bbbc:	d50a      	bpl.n	800bbd4 <__pow5mult+0x84>
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7ff ff20 	bl	800ba08 <__multiply>
 800bbc8:	4680      	mov	r8, r0
 800bbca:	4639      	mov	r1, r7
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7ff fe01 	bl	800b7d4 <_Bfree>
 800bbd2:	4647      	mov	r7, r8
 800bbd4:	106d      	asrs	r5, r5, #1
 800bbd6:	d00b      	beq.n	800bbf0 <__pow5mult+0xa0>
 800bbd8:	6820      	ldr	r0, [r4, #0]
 800bbda:	b938      	cbnz	r0, 800bbec <__pow5mult+0x9c>
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7ff ff11 	bl	800ba08 <__multiply>
 800bbe6:	6020      	str	r0, [r4, #0]
 800bbe8:	f8c0 9000 	str.w	r9, [r0]
 800bbec:	4604      	mov	r4, r0
 800bbee:	e7e4      	b.n	800bbba <__pow5mult+0x6a>
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0800d638 	.word	0x0800d638
 800bbfc:	0800d3de 	.word	0x0800d3de
 800bc00:	0800d4e4 	.word	0x0800d4e4

0800bc04 <__lshift>:
 800bc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	4691      	mov	r9, r2
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	6849      	ldr	r1, [r1, #4]
 800bc12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc16:	68a3      	ldr	r3, [r4, #8]
 800bc18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc1c:	f108 0601 	add.w	r6, r8, #1
 800bc20:	42b3      	cmp	r3, r6
 800bc22:	db0b      	blt.n	800bc3c <__lshift+0x38>
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff fd95 	bl	800b754 <_Balloc>
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b948      	cbnz	r0, 800bc42 <__lshift+0x3e>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc34:	4b27      	ldr	r3, [pc, #156]	; (800bcd4 <__lshift+0xd0>)
 800bc36:	4828      	ldr	r0, [pc, #160]	; (800bcd8 <__lshift+0xd4>)
 800bc38:	f000 fc8a 	bl	800c550 <__assert_func>
 800bc3c:	3101      	adds	r1, #1
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	e7ee      	b.n	800bc20 <__lshift+0x1c>
 800bc42:	2300      	movs	r3, #0
 800bc44:	f100 0114 	add.w	r1, r0, #20
 800bc48:	f100 0210 	add.w	r2, r0, #16
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	4553      	cmp	r3, sl
 800bc50:	db33      	blt.n	800bcba <__lshift+0xb6>
 800bc52:	6920      	ldr	r0, [r4, #16]
 800bc54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc58:	f104 0314 	add.w	r3, r4, #20
 800bc5c:	f019 091f 	ands.w	r9, r9, #31
 800bc60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc68:	d02b      	beq.n	800bcc2 <__lshift+0xbe>
 800bc6a:	468a      	mov	sl, r1
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f1c9 0e20 	rsb	lr, r9, #32
 800bc72:	6818      	ldr	r0, [r3, #0]
 800bc74:	fa00 f009 	lsl.w	r0, r0, r9
 800bc78:	4302      	orrs	r2, r0
 800bc7a:	f84a 2b04 	str.w	r2, [sl], #4
 800bc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc82:	459c      	cmp	ip, r3
 800bc84:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc88:	d8f3      	bhi.n	800bc72 <__lshift+0x6e>
 800bc8a:	ebac 0304 	sub.w	r3, ip, r4
 800bc8e:	3b15      	subs	r3, #21
 800bc90:	f023 0303 	bic.w	r3, r3, #3
 800bc94:	3304      	adds	r3, #4
 800bc96:	f104 0015 	add.w	r0, r4, #21
 800bc9a:	4584      	cmp	ip, r0
 800bc9c:	bf38      	it	cc
 800bc9e:	2304      	movcc	r3, #4
 800bca0:	50ca      	str	r2, [r1, r3]
 800bca2:	b10a      	cbz	r2, 800bca8 <__lshift+0xa4>
 800bca4:	f108 0602 	add.w	r6, r8, #2
 800bca8:	3e01      	subs	r6, #1
 800bcaa:	4638      	mov	r0, r7
 800bcac:	4621      	mov	r1, r4
 800bcae:	612e      	str	r6, [r5, #16]
 800bcb0:	f7ff fd90 	bl	800b7d4 <_Bfree>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	e7c5      	b.n	800bc4e <__lshift+0x4a>
 800bcc2:	3904      	subs	r1, #4
 800bcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc8:	459c      	cmp	ip, r3
 800bcca:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcce:	d8f9      	bhi.n	800bcc4 <__lshift+0xc0>
 800bcd0:	e7ea      	b.n	800bca8 <__lshift+0xa4>
 800bcd2:	bf00      	nop
 800bcd4:	0800d454 	.word	0x0800d454
 800bcd8:	0800d4e4 	.word	0x0800d4e4

0800bcdc <__mcmp>:
 800bcdc:	4603      	mov	r3, r0
 800bcde:	690a      	ldr	r2, [r1, #16]
 800bce0:	6900      	ldr	r0, [r0, #16]
 800bce2:	b530      	push	{r4, r5, lr}
 800bce4:	1a80      	subs	r0, r0, r2
 800bce6:	d10d      	bne.n	800bd04 <__mcmp+0x28>
 800bce8:	3314      	adds	r3, #20
 800bcea:	3114      	adds	r1, #20
 800bcec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcfc:	4295      	cmp	r5, r2
 800bcfe:	d002      	beq.n	800bd06 <__mcmp+0x2a>
 800bd00:	d304      	bcc.n	800bd0c <__mcmp+0x30>
 800bd02:	2001      	movs	r0, #1
 800bd04:	bd30      	pop	{r4, r5, pc}
 800bd06:	42a3      	cmp	r3, r4
 800bd08:	d3f4      	bcc.n	800bcf4 <__mcmp+0x18>
 800bd0a:	e7fb      	b.n	800bd04 <__mcmp+0x28>
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	e7f8      	b.n	800bd04 <__mcmp+0x28>
	...

0800bd14 <__mdiff>:
 800bd14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	460c      	mov	r4, r1
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4692      	mov	sl, r2
 800bd22:	f7ff ffdb 	bl	800bcdc <__mcmp>
 800bd26:	1e05      	subs	r5, r0, #0
 800bd28:	d111      	bne.n	800bd4e <__mdiff+0x3a>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff fd11 	bl	800b754 <_Balloc>
 800bd32:	4602      	mov	r2, r0
 800bd34:	b928      	cbnz	r0, 800bd42 <__mdiff+0x2e>
 800bd36:	f240 2132 	movw	r1, #562	; 0x232
 800bd3a:	4b3c      	ldr	r3, [pc, #240]	; (800be2c <__mdiff+0x118>)
 800bd3c:	483c      	ldr	r0, [pc, #240]	; (800be30 <__mdiff+0x11c>)
 800bd3e:	f000 fc07 	bl	800c550 <__assert_func>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd48:	4610      	mov	r0, r2
 800bd4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4e:	bfa4      	itt	ge
 800bd50:	4653      	movge	r3, sl
 800bd52:	46a2      	movge	sl, r4
 800bd54:	4630      	mov	r0, r6
 800bd56:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bd5a:	bfa6      	itte	ge
 800bd5c:	461c      	movge	r4, r3
 800bd5e:	2500      	movge	r5, #0
 800bd60:	2501      	movlt	r5, #1
 800bd62:	f7ff fcf7 	bl	800b754 <_Balloc>
 800bd66:	4602      	mov	r2, r0
 800bd68:	b918      	cbnz	r0, 800bd72 <__mdiff+0x5e>
 800bd6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd6e:	4b2f      	ldr	r3, [pc, #188]	; (800be2c <__mdiff+0x118>)
 800bd70:	e7e4      	b.n	800bd3c <__mdiff+0x28>
 800bd72:	f100 0814 	add.w	r8, r0, #20
 800bd76:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bd7a:	60c5      	str	r5, [r0, #12]
 800bd7c:	f04f 0c00 	mov.w	ip, #0
 800bd80:	f10a 0514 	add.w	r5, sl, #20
 800bd84:	f10a 0010 	add.w	r0, sl, #16
 800bd88:	46c2      	mov	sl, r8
 800bd8a:	6926      	ldr	r6, [r4, #16]
 800bd8c:	f104 0914 	add.w	r9, r4, #20
 800bd90:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bd94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd98:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bd9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bda0:	fa1f f18b 	uxth.w	r1, fp
 800bda4:	4461      	add	r1, ip
 800bda6:	fa1f fc83 	uxth.w	ip, r3
 800bdaa:	0c1b      	lsrs	r3, r3, #16
 800bdac:	eba1 010c 	sub.w	r1, r1, ip
 800bdb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdb4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bdb8:	b289      	uxth	r1, r1
 800bdba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bdbe:	454e      	cmp	r6, r9
 800bdc0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bdc4:	f84a 3b04 	str.w	r3, [sl], #4
 800bdc8:	d8e6      	bhi.n	800bd98 <__mdiff+0x84>
 800bdca:	1b33      	subs	r3, r6, r4
 800bdcc:	3b15      	subs	r3, #21
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	3415      	adds	r4, #21
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	42a6      	cmp	r6, r4
 800bdd8:	bf38      	it	cc
 800bdda:	2304      	movcc	r3, #4
 800bddc:	441d      	add	r5, r3
 800bdde:	4443      	add	r3, r8
 800bde0:	461e      	mov	r6, r3
 800bde2:	462c      	mov	r4, r5
 800bde4:	4574      	cmp	r4, lr
 800bde6:	d30e      	bcc.n	800be06 <__mdiff+0xf2>
 800bde8:	f10e 0103 	add.w	r1, lr, #3
 800bdec:	1b49      	subs	r1, r1, r5
 800bdee:	f021 0103 	bic.w	r1, r1, #3
 800bdf2:	3d03      	subs	r5, #3
 800bdf4:	45ae      	cmp	lr, r5
 800bdf6:	bf38      	it	cc
 800bdf8:	2100      	movcc	r1, #0
 800bdfa:	4419      	add	r1, r3
 800bdfc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800be00:	b18b      	cbz	r3, 800be26 <__mdiff+0x112>
 800be02:	6117      	str	r7, [r2, #16]
 800be04:	e7a0      	b.n	800bd48 <__mdiff+0x34>
 800be06:	f854 8b04 	ldr.w	r8, [r4], #4
 800be0a:	fa1f f188 	uxth.w	r1, r8
 800be0e:	4461      	add	r1, ip
 800be10:	1408      	asrs	r0, r1, #16
 800be12:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800be16:	b289      	uxth	r1, r1
 800be18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be20:	f846 1b04 	str.w	r1, [r6], #4
 800be24:	e7de      	b.n	800bde4 <__mdiff+0xd0>
 800be26:	3f01      	subs	r7, #1
 800be28:	e7e8      	b.n	800bdfc <__mdiff+0xe8>
 800be2a:	bf00      	nop
 800be2c:	0800d454 	.word	0x0800d454
 800be30:	0800d4e4 	.word	0x0800d4e4

0800be34 <__ulp>:
 800be34:	4b11      	ldr	r3, [pc, #68]	; (800be7c <__ulp+0x48>)
 800be36:	400b      	ands	r3, r1
 800be38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd02      	ble.n	800be46 <__ulp+0x12>
 800be40:	2000      	movs	r0, #0
 800be42:	4619      	mov	r1, r3
 800be44:	4770      	bx	lr
 800be46:	425b      	negs	r3, r3
 800be48:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800be4c:	f04f 0000 	mov.w	r0, #0
 800be50:	f04f 0100 	mov.w	r1, #0
 800be54:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be58:	da04      	bge.n	800be64 <__ulp+0x30>
 800be5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be5e:	fa43 f102 	asr.w	r1, r3, r2
 800be62:	4770      	bx	lr
 800be64:	f1a2 0314 	sub.w	r3, r2, #20
 800be68:	2b1e      	cmp	r3, #30
 800be6a:	bfd6      	itet	le
 800be6c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800be70:	2301      	movgt	r3, #1
 800be72:	fa22 f303 	lsrle.w	r3, r2, r3
 800be76:	4618      	mov	r0, r3
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	7ff00000 	.word	0x7ff00000

0800be80 <__b2d>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	6907      	ldr	r7, [r0, #16]
 800be86:	f100 0914 	add.w	r9, r0, #20
 800be8a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800be8e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800be92:	f1a7 0804 	sub.w	r8, r7, #4
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff fd52 	bl	800b940 <__hi0bits>
 800be9c:	f1c0 0320 	rsb	r3, r0, #32
 800bea0:	280a      	cmp	r0, #10
 800bea2:	600b      	str	r3, [r1, #0]
 800bea4:	491f      	ldr	r1, [pc, #124]	; (800bf24 <__b2d+0xa4>)
 800bea6:	dc17      	bgt.n	800bed8 <__b2d+0x58>
 800bea8:	45c1      	cmp	r9, r8
 800beaa:	bf28      	it	cs
 800beac:	2200      	movcs	r2, #0
 800beae:	f1c0 0c0b 	rsb	ip, r0, #11
 800beb2:	fa26 f30c 	lsr.w	r3, r6, ip
 800beb6:	bf38      	it	cc
 800beb8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bebc:	ea43 0501 	orr.w	r5, r3, r1
 800bec0:	f100 0315 	add.w	r3, r0, #21
 800bec4:	fa06 f303 	lsl.w	r3, r6, r3
 800bec8:	fa22 f20c 	lsr.w	r2, r2, ip
 800becc:	ea43 0402 	orr.w	r4, r3, r2
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed8:	45c1      	cmp	r9, r8
 800beda:	bf2e      	itee	cs
 800bedc:	2200      	movcs	r2, #0
 800bede:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bee2:	f1a7 0808 	subcc.w	r8, r7, #8
 800bee6:	f1b0 030b 	subs.w	r3, r0, #11
 800beea:	d016      	beq.n	800bf1a <__b2d+0x9a>
 800beec:	f1c3 0720 	rsb	r7, r3, #32
 800bef0:	fa22 f107 	lsr.w	r1, r2, r7
 800bef4:	45c8      	cmp	r8, r9
 800bef6:	fa06 f603 	lsl.w	r6, r6, r3
 800befa:	ea46 0601 	orr.w	r6, r6, r1
 800befe:	bf94      	ite	ls
 800bf00:	2100      	movls	r1, #0
 800bf02:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bf06:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bf0a:	fa02 f003 	lsl.w	r0, r2, r3
 800bf0e:	40f9      	lsrs	r1, r7
 800bf10:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bf14:	ea40 0401 	orr.w	r4, r0, r1
 800bf18:	e7da      	b.n	800bed0 <__b2d+0x50>
 800bf1a:	4614      	mov	r4, r2
 800bf1c:	ea46 0501 	orr.w	r5, r6, r1
 800bf20:	e7d6      	b.n	800bed0 <__b2d+0x50>
 800bf22:	bf00      	nop
 800bf24:	3ff00000 	.word	0x3ff00000

0800bf28 <__d2b>:
 800bf28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bf32:	4690      	mov	r8, r2
 800bf34:	461d      	mov	r5, r3
 800bf36:	f7ff fc0d 	bl	800b754 <_Balloc>
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	b930      	cbnz	r0, 800bf4c <__d2b+0x24>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	f240 310a 	movw	r1, #778	; 0x30a
 800bf44:	4b24      	ldr	r3, [pc, #144]	; (800bfd8 <__d2b+0xb0>)
 800bf46:	4825      	ldr	r0, [pc, #148]	; (800bfdc <__d2b+0xb4>)
 800bf48:	f000 fb02 	bl	800c550 <__assert_func>
 800bf4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bf50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bf54:	bb2d      	cbnz	r5, 800bfa2 <__d2b+0x7a>
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	f1b8 0300 	subs.w	r3, r8, #0
 800bf5c:	d026      	beq.n	800bfac <__d2b+0x84>
 800bf5e:	4668      	mov	r0, sp
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	f7ff fd0d 	bl	800b980 <__lo0bits>
 800bf66:	9900      	ldr	r1, [sp, #0]
 800bf68:	b1f0      	cbz	r0, 800bfa8 <__d2b+0x80>
 800bf6a:	9a01      	ldr	r2, [sp, #4]
 800bf6c:	f1c0 0320 	rsb	r3, r0, #32
 800bf70:	fa02 f303 	lsl.w	r3, r2, r3
 800bf74:	430b      	orrs	r3, r1
 800bf76:	40c2      	lsrs	r2, r0
 800bf78:	6163      	str	r3, [r4, #20]
 800bf7a:	9201      	str	r2, [sp, #4]
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bf14      	ite	ne
 800bf82:	2102      	movne	r1, #2
 800bf84:	2101      	moveq	r1, #1
 800bf86:	61a3      	str	r3, [r4, #24]
 800bf88:	6121      	str	r1, [r4, #16]
 800bf8a:	b1c5      	cbz	r5, 800bfbe <__d2b+0x96>
 800bf8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf90:	4405      	add	r5, r0
 800bf92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf96:	603d      	str	r5, [r7, #0]
 800bf98:	6030      	str	r0, [r6, #0]
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	b002      	add	sp, #8
 800bf9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfa6:	e7d6      	b.n	800bf56 <__d2b+0x2e>
 800bfa8:	6161      	str	r1, [r4, #20]
 800bfaa:	e7e7      	b.n	800bf7c <__d2b+0x54>
 800bfac:	a801      	add	r0, sp, #4
 800bfae:	f7ff fce7 	bl	800b980 <__lo0bits>
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	9b01      	ldr	r3, [sp, #4]
 800bfb6:	6121      	str	r1, [r4, #16]
 800bfb8:	6163      	str	r3, [r4, #20]
 800bfba:	3020      	adds	r0, #32
 800bfbc:	e7e5      	b.n	800bf8a <__d2b+0x62>
 800bfbe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bfc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfc6:	6038      	str	r0, [r7, #0]
 800bfc8:	6918      	ldr	r0, [r3, #16]
 800bfca:	f7ff fcb9 	bl	800b940 <__hi0bits>
 800bfce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bfd2:	6031      	str	r1, [r6, #0]
 800bfd4:	e7e1      	b.n	800bf9a <__d2b+0x72>
 800bfd6:	bf00      	nop
 800bfd8:	0800d454 	.word	0x0800d454
 800bfdc:	0800d4e4 	.word	0x0800d4e4

0800bfe0 <__ratio>:
 800bfe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	4688      	mov	r8, r1
 800bfe6:	4669      	mov	r1, sp
 800bfe8:	4681      	mov	r9, r0
 800bfea:	f7ff ff49 	bl	800be80 <__b2d>
 800bfee:	460f      	mov	r7, r1
 800bff0:	4604      	mov	r4, r0
 800bff2:	460d      	mov	r5, r1
 800bff4:	4640      	mov	r0, r8
 800bff6:	a901      	add	r1, sp, #4
 800bff8:	f7ff ff42 	bl	800be80 <__b2d>
 800bffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c000:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c004:	468b      	mov	fp, r1
 800c006:	eba3 0c02 	sub.w	ip, r3, r2
 800c00a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c00e:	1a9b      	subs	r3, r3, r2
 800c010:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c014:	2b00      	cmp	r3, #0
 800c016:	bfd5      	itete	le
 800c018:	460a      	movle	r2, r1
 800c01a:	462a      	movgt	r2, r5
 800c01c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c020:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c024:	bfd8      	it	le
 800c026:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c02a:	465b      	mov	r3, fp
 800c02c:	4602      	mov	r2, r0
 800c02e:	4639      	mov	r1, r7
 800c030:	4620      	mov	r0, r4
 800c032:	f7f4 fb7b 	bl	800072c <__aeabi_ddiv>
 800c036:	b003      	add	sp, #12
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c03c <__copybits>:
 800c03c:	3901      	subs	r1, #1
 800c03e:	b570      	push	{r4, r5, r6, lr}
 800c040:	1149      	asrs	r1, r1, #5
 800c042:	6914      	ldr	r4, [r2, #16]
 800c044:	3101      	adds	r1, #1
 800c046:	f102 0314 	add.w	r3, r2, #20
 800c04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c04e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c052:	1f05      	subs	r5, r0, #4
 800c054:	42a3      	cmp	r3, r4
 800c056:	d30c      	bcc.n	800c072 <__copybits+0x36>
 800c058:	1aa3      	subs	r3, r4, r2
 800c05a:	3b11      	subs	r3, #17
 800c05c:	f023 0303 	bic.w	r3, r3, #3
 800c060:	3211      	adds	r2, #17
 800c062:	42a2      	cmp	r2, r4
 800c064:	bf88      	it	hi
 800c066:	2300      	movhi	r3, #0
 800c068:	4418      	add	r0, r3
 800c06a:	2300      	movs	r3, #0
 800c06c:	4288      	cmp	r0, r1
 800c06e:	d305      	bcc.n	800c07c <__copybits+0x40>
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	f853 6b04 	ldr.w	r6, [r3], #4
 800c076:	f845 6f04 	str.w	r6, [r5, #4]!
 800c07a:	e7eb      	b.n	800c054 <__copybits+0x18>
 800c07c:	f840 3b04 	str.w	r3, [r0], #4
 800c080:	e7f4      	b.n	800c06c <__copybits+0x30>

0800c082 <__any_on>:
 800c082:	f100 0214 	add.w	r2, r0, #20
 800c086:	6900      	ldr	r0, [r0, #16]
 800c088:	114b      	asrs	r3, r1, #5
 800c08a:	4298      	cmp	r0, r3
 800c08c:	b510      	push	{r4, lr}
 800c08e:	db11      	blt.n	800c0b4 <__any_on+0x32>
 800c090:	dd0a      	ble.n	800c0a8 <__any_on+0x26>
 800c092:	f011 011f 	ands.w	r1, r1, #31
 800c096:	d007      	beq.n	800c0a8 <__any_on+0x26>
 800c098:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c09c:	fa24 f001 	lsr.w	r0, r4, r1
 800c0a0:	fa00 f101 	lsl.w	r1, r0, r1
 800c0a4:	428c      	cmp	r4, r1
 800c0a6:	d10b      	bne.n	800c0c0 <__any_on+0x3e>
 800c0a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d803      	bhi.n	800c0b8 <__any_on+0x36>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	bd10      	pop	{r4, pc}
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	e7f7      	b.n	800c0a8 <__any_on+0x26>
 800c0b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d0f5      	beq.n	800c0ac <__any_on+0x2a>
 800c0c0:	2001      	movs	r0, #1
 800c0c2:	e7f6      	b.n	800c0b2 <__any_on+0x30>

0800c0c4 <_calloc_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	fb02 f501 	mul.w	r5, r2, r1
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f000 f854 	bl	800c178 <_malloc_r>
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	b118      	cbz	r0, 800c0dc <_calloc_r+0x18>
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	f7fc fbde 	bl	8008898 <memset>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	bd38      	pop	{r3, r4, r5, pc}

0800c0e0 <_free_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	d043      	beq.n	800c170 <_free_r+0x90>
 800c0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ec:	1f0c      	subs	r4, r1, #4
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	bfb8      	it	lt
 800c0f2:	18e4      	addlt	r4, r4, r3
 800c0f4:	f000 fa76 	bl	800c5e4 <__malloc_lock>
 800c0f8:	4a1e      	ldr	r2, [pc, #120]	; (800c174 <_free_r+0x94>)
 800c0fa:	6813      	ldr	r3, [r2, #0]
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	b933      	cbnz	r3, 800c10e <_free_r+0x2e>
 800c100:	6063      	str	r3, [r4, #4]
 800c102:	6014      	str	r4, [r2, #0]
 800c104:	4628      	mov	r0, r5
 800c106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c10a:	f000 ba71 	b.w	800c5f0 <__malloc_unlock>
 800c10e:	42a3      	cmp	r3, r4
 800c110:	d90a      	bls.n	800c128 <_free_r+0x48>
 800c112:	6821      	ldr	r1, [r4, #0]
 800c114:	1862      	adds	r2, r4, r1
 800c116:	4293      	cmp	r3, r2
 800c118:	bf01      	itttt	eq
 800c11a:	681a      	ldreq	r2, [r3, #0]
 800c11c:	685b      	ldreq	r3, [r3, #4]
 800c11e:	1852      	addeq	r2, r2, r1
 800c120:	6022      	streq	r2, [r4, #0]
 800c122:	6063      	str	r3, [r4, #4]
 800c124:	6004      	str	r4, [r0, #0]
 800c126:	e7ed      	b.n	800c104 <_free_r+0x24>
 800c128:	461a      	mov	r2, r3
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	b10b      	cbz	r3, 800c132 <_free_r+0x52>
 800c12e:	42a3      	cmp	r3, r4
 800c130:	d9fa      	bls.n	800c128 <_free_r+0x48>
 800c132:	6811      	ldr	r1, [r2, #0]
 800c134:	1850      	adds	r0, r2, r1
 800c136:	42a0      	cmp	r0, r4
 800c138:	d10b      	bne.n	800c152 <_free_r+0x72>
 800c13a:	6820      	ldr	r0, [r4, #0]
 800c13c:	4401      	add	r1, r0
 800c13e:	1850      	adds	r0, r2, r1
 800c140:	4283      	cmp	r3, r0
 800c142:	6011      	str	r1, [r2, #0]
 800c144:	d1de      	bne.n	800c104 <_free_r+0x24>
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	4401      	add	r1, r0
 800c14c:	6011      	str	r1, [r2, #0]
 800c14e:	6053      	str	r3, [r2, #4]
 800c150:	e7d8      	b.n	800c104 <_free_r+0x24>
 800c152:	d902      	bls.n	800c15a <_free_r+0x7a>
 800c154:	230c      	movs	r3, #12
 800c156:	602b      	str	r3, [r5, #0]
 800c158:	e7d4      	b.n	800c104 <_free_r+0x24>
 800c15a:	6820      	ldr	r0, [r4, #0]
 800c15c:	1821      	adds	r1, r4, r0
 800c15e:	428b      	cmp	r3, r1
 800c160:	bf01      	itttt	eq
 800c162:	6819      	ldreq	r1, [r3, #0]
 800c164:	685b      	ldreq	r3, [r3, #4]
 800c166:	1809      	addeq	r1, r1, r0
 800c168:	6021      	streq	r1, [r4, #0]
 800c16a:	6063      	str	r3, [r4, #4]
 800c16c:	6054      	str	r4, [r2, #4]
 800c16e:	e7c9      	b.n	800c104 <_free_r+0x24>
 800c170:	bd38      	pop	{r3, r4, r5, pc}
 800c172:	bf00      	nop
 800c174:	20000204 	.word	0x20000204

0800c178 <_malloc_r>:
 800c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17a:	1ccd      	adds	r5, r1, #3
 800c17c:	f025 0503 	bic.w	r5, r5, #3
 800c180:	3508      	adds	r5, #8
 800c182:	2d0c      	cmp	r5, #12
 800c184:	bf38      	it	cc
 800c186:	250c      	movcc	r5, #12
 800c188:	2d00      	cmp	r5, #0
 800c18a:	4606      	mov	r6, r0
 800c18c:	db01      	blt.n	800c192 <_malloc_r+0x1a>
 800c18e:	42a9      	cmp	r1, r5
 800c190:	d903      	bls.n	800c19a <_malloc_r+0x22>
 800c192:	230c      	movs	r3, #12
 800c194:	6033      	str	r3, [r6, #0]
 800c196:	2000      	movs	r0, #0
 800c198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c19a:	f000 fa23 	bl	800c5e4 <__malloc_lock>
 800c19e:	4921      	ldr	r1, [pc, #132]	; (800c224 <_malloc_r+0xac>)
 800c1a0:	680a      	ldr	r2, [r1, #0]
 800c1a2:	4614      	mov	r4, r2
 800c1a4:	b99c      	cbnz	r4, 800c1ce <_malloc_r+0x56>
 800c1a6:	4f20      	ldr	r7, [pc, #128]	; (800c228 <_malloc_r+0xb0>)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	b923      	cbnz	r3, 800c1b6 <_malloc_r+0x3e>
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f000 f99e 	bl	800c4f0 <_sbrk_r>
 800c1b4:	6038      	str	r0, [r7, #0]
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f000 f999 	bl	800c4f0 <_sbrk_r>
 800c1be:	1c43      	adds	r3, r0, #1
 800c1c0:	d123      	bne.n	800c20a <_malloc_r+0x92>
 800c1c2:	230c      	movs	r3, #12
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	6033      	str	r3, [r6, #0]
 800c1c8:	f000 fa12 	bl	800c5f0 <__malloc_unlock>
 800c1cc:	e7e3      	b.n	800c196 <_malloc_r+0x1e>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	1b5b      	subs	r3, r3, r5
 800c1d2:	d417      	bmi.n	800c204 <_malloc_r+0x8c>
 800c1d4:	2b0b      	cmp	r3, #11
 800c1d6:	d903      	bls.n	800c1e0 <_malloc_r+0x68>
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	441c      	add	r4, r3
 800c1dc:	6025      	str	r5, [r4, #0]
 800c1de:	e004      	b.n	800c1ea <_malloc_r+0x72>
 800c1e0:	6863      	ldr	r3, [r4, #4]
 800c1e2:	42a2      	cmp	r2, r4
 800c1e4:	bf0c      	ite	eq
 800c1e6:	600b      	streq	r3, [r1, #0]
 800c1e8:	6053      	strne	r3, [r2, #4]
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f000 fa00 	bl	800c5f0 <__malloc_unlock>
 800c1f0:	f104 000b 	add.w	r0, r4, #11
 800c1f4:	1d23      	adds	r3, r4, #4
 800c1f6:	f020 0007 	bic.w	r0, r0, #7
 800c1fa:	1ac2      	subs	r2, r0, r3
 800c1fc:	d0cc      	beq.n	800c198 <_malloc_r+0x20>
 800c1fe:	1a1b      	subs	r3, r3, r0
 800c200:	50a3      	str	r3, [r4, r2]
 800c202:	e7c9      	b.n	800c198 <_malloc_r+0x20>
 800c204:	4622      	mov	r2, r4
 800c206:	6864      	ldr	r4, [r4, #4]
 800c208:	e7cc      	b.n	800c1a4 <_malloc_r+0x2c>
 800c20a:	1cc4      	adds	r4, r0, #3
 800c20c:	f024 0403 	bic.w	r4, r4, #3
 800c210:	42a0      	cmp	r0, r4
 800c212:	d0e3      	beq.n	800c1dc <_malloc_r+0x64>
 800c214:	1a21      	subs	r1, r4, r0
 800c216:	4630      	mov	r0, r6
 800c218:	f000 f96a 	bl	800c4f0 <_sbrk_r>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d1dd      	bne.n	800c1dc <_malloc_r+0x64>
 800c220:	e7cf      	b.n	800c1c2 <_malloc_r+0x4a>
 800c222:	bf00      	nop
 800c224:	20000204 	.word	0x20000204
 800c228:	20000208 	.word	0x20000208

0800c22c <__ssputs_r>:
 800c22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c230:	688e      	ldr	r6, [r1, #8]
 800c232:	4682      	mov	sl, r0
 800c234:	429e      	cmp	r6, r3
 800c236:	460c      	mov	r4, r1
 800c238:	4690      	mov	r8, r2
 800c23a:	461f      	mov	r7, r3
 800c23c:	d838      	bhi.n	800c2b0 <__ssputs_r+0x84>
 800c23e:	898a      	ldrh	r2, [r1, #12]
 800c240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c244:	d032      	beq.n	800c2ac <__ssputs_r+0x80>
 800c246:	6825      	ldr	r5, [r4, #0]
 800c248:	6909      	ldr	r1, [r1, #16]
 800c24a:	3301      	adds	r3, #1
 800c24c:	eba5 0901 	sub.w	r9, r5, r1
 800c250:	6965      	ldr	r5, [r4, #20]
 800c252:	444b      	add	r3, r9
 800c254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c25c:	106d      	asrs	r5, r5, #1
 800c25e:	429d      	cmp	r5, r3
 800c260:	bf38      	it	cc
 800c262:	461d      	movcc	r5, r3
 800c264:	0553      	lsls	r3, r2, #21
 800c266:	d531      	bpl.n	800c2cc <__ssputs_r+0xa0>
 800c268:	4629      	mov	r1, r5
 800c26a:	f7ff ff85 	bl	800c178 <_malloc_r>
 800c26e:	4606      	mov	r6, r0
 800c270:	b950      	cbnz	r0, 800c288 <__ssputs_r+0x5c>
 800c272:	230c      	movs	r3, #12
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	f8ca 3000 	str.w	r3, [sl]
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c282:	81a3      	strh	r3, [r4, #12]
 800c284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c288:	464a      	mov	r2, r9
 800c28a:	6921      	ldr	r1, [r4, #16]
 800c28c:	f7ff fa54 	bl	800b738 <memcpy>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	6126      	str	r6, [r4, #16]
 800c29e:	444e      	add	r6, r9
 800c2a0:	6026      	str	r6, [r4, #0]
 800c2a2:	463e      	mov	r6, r7
 800c2a4:	6165      	str	r5, [r4, #20]
 800c2a6:	eba5 0509 	sub.w	r5, r5, r9
 800c2aa:	60a5      	str	r5, [r4, #8]
 800c2ac:	42be      	cmp	r6, r7
 800c2ae:	d900      	bls.n	800c2b2 <__ssputs_r+0x86>
 800c2b0:	463e      	mov	r6, r7
 800c2b2:	4632      	mov	r2, r6
 800c2b4:	4641      	mov	r1, r8
 800c2b6:	6820      	ldr	r0, [r4, #0]
 800c2b8:	f000 f97a 	bl	800c5b0 <memmove>
 800c2bc:	68a3      	ldr	r3, [r4, #8]
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	1b9b      	subs	r3, r3, r6
 800c2c2:	4432      	add	r2, r6
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	60a3      	str	r3, [r4, #8]
 800c2c8:	6022      	str	r2, [r4, #0]
 800c2ca:	e7db      	b.n	800c284 <__ssputs_r+0x58>
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	f000 f995 	bl	800c5fc <_realloc_r>
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d1e1      	bne.n	800c29c <__ssputs_r+0x70>
 800c2d8:	4650      	mov	r0, sl
 800c2da:	6921      	ldr	r1, [r4, #16]
 800c2dc:	f7ff ff00 	bl	800c0e0 <_free_r>
 800c2e0:	e7c7      	b.n	800c272 <__ssputs_r+0x46>
	...

0800c2e4 <_svfiprintf_r>:
 800c2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e8:	4698      	mov	r8, r3
 800c2ea:	898b      	ldrh	r3, [r1, #12]
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	061b      	lsls	r3, r3, #24
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	4614      	mov	r4, r2
 800c2f4:	b09d      	sub	sp, #116	; 0x74
 800c2f6:	d50e      	bpl.n	800c316 <_svfiprintf_r+0x32>
 800c2f8:	690b      	ldr	r3, [r1, #16]
 800c2fa:	b963      	cbnz	r3, 800c316 <_svfiprintf_r+0x32>
 800c2fc:	2140      	movs	r1, #64	; 0x40
 800c2fe:	f7ff ff3b 	bl	800c178 <_malloc_r>
 800c302:	6028      	str	r0, [r5, #0]
 800c304:	6128      	str	r0, [r5, #16]
 800c306:	b920      	cbnz	r0, 800c312 <_svfiprintf_r+0x2e>
 800c308:	230c      	movs	r3, #12
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	f04f 30ff 	mov.w	r0, #4294967295
 800c310:	e0d1      	b.n	800c4b6 <_svfiprintf_r+0x1d2>
 800c312:	2340      	movs	r3, #64	; 0x40
 800c314:	616b      	str	r3, [r5, #20]
 800c316:	2300      	movs	r3, #0
 800c318:	9309      	str	r3, [sp, #36]	; 0x24
 800c31a:	2320      	movs	r3, #32
 800c31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c320:	2330      	movs	r3, #48	; 0x30
 800c322:	f04f 0901 	mov.w	r9, #1
 800c326:	f8cd 800c 	str.w	r8, [sp, #12]
 800c32a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c4d0 <_svfiprintf_r+0x1ec>
 800c32e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c332:	4623      	mov	r3, r4
 800c334:	469a      	mov	sl, r3
 800c336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c33a:	b10a      	cbz	r2, 800c340 <_svfiprintf_r+0x5c>
 800c33c:	2a25      	cmp	r2, #37	; 0x25
 800c33e:	d1f9      	bne.n	800c334 <_svfiprintf_r+0x50>
 800c340:	ebba 0b04 	subs.w	fp, sl, r4
 800c344:	d00b      	beq.n	800c35e <_svfiprintf_r+0x7a>
 800c346:	465b      	mov	r3, fp
 800c348:	4622      	mov	r2, r4
 800c34a:	4629      	mov	r1, r5
 800c34c:	4638      	mov	r0, r7
 800c34e:	f7ff ff6d 	bl	800c22c <__ssputs_r>
 800c352:	3001      	adds	r0, #1
 800c354:	f000 80aa 	beq.w	800c4ac <_svfiprintf_r+0x1c8>
 800c358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c35a:	445a      	add	r2, fp
 800c35c:	9209      	str	r2, [sp, #36]	; 0x24
 800c35e:	f89a 3000 	ldrb.w	r3, [sl]
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 80a2 	beq.w	800c4ac <_svfiprintf_r+0x1c8>
 800c368:	2300      	movs	r3, #0
 800c36a:	f04f 32ff 	mov.w	r2, #4294967295
 800c36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c372:	f10a 0a01 	add.w	sl, sl, #1
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	9307      	str	r3, [sp, #28]
 800c37a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c37e:	931a      	str	r3, [sp, #104]	; 0x68
 800c380:	4654      	mov	r4, sl
 800c382:	2205      	movs	r2, #5
 800c384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c388:	4851      	ldr	r0, [pc, #324]	; (800c4d0 <_svfiprintf_r+0x1ec>)
 800c38a:	f7ff f9c7 	bl	800b71c <memchr>
 800c38e:	9a04      	ldr	r2, [sp, #16]
 800c390:	b9d8      	cbnz	r0, 800c3ca <_svfiprintf_r+0xe6>
 800c392:	06d0      	lsls	r0, r2, #27
 800c394:	bf44      	itt	mi
 800c396:	2320      	movmi	r3, #32
 800c398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c39c:	0711      	lsls	r1, r2, #28
 800c39e:	bf44      	itt	mi
 800c3a0:	232b      	movmi	r3, #43	; 0x2b
 800c3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ac:	d015      	beq.n	800c3da <_svfiprintf_r+0xf6>
 800c3ae:	4654      	mov	r4, sl
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	f04f 0c0a 	mov.w	ip, #10
 800c3b6:	9a07      	ldr	r2, [sp, #28]
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3be:	3b30      	subs	r3, #48	; 0x30
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	d94e      	bls.n	800c462 <_svfiprintf_r+0x17e>
 800c3c4:	b1b0      	cbz	r0, 800c3f4 <_svfiprintf_r+0x110>
 800c3c6:	9207      	str	r2, [sp, #28]
 800c3c8:	e014      	b.n	800c3f4 <_svfiprintf_r+0x110>
 800c3ca:	eba0 0308 	sub.w	r3, r0, r8
 800c3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	46a2      	mov	sl, r4
 800c3d6:	9304      	str	r3, [sp, #16]
 800c3d8:	e7d2      	b.n	800c380 <_svfiprintf_r+0x9c>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	1d19      	adds	r1, r3, #4
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	9103      	str	r1, [sp, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bfbb      	ittet	lt
 800c3e6:	425b      	neglt	r3, r3
 800c3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ec:	9307      	strge	r3, [sp, #28]
 800c3ee:	9307      	strlt	r3, [sp, #28]
 800c3f0:	bfb8      	it	lt
 800c3f2:	9204      	strlt	r2, [sp, #16]
 800c3f4:	7823      	ldrb	r3, [r4, #0]
 800c3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c3f8:	d10c      	bne.n	800c414 <_svfiprintf_r+0x130>
 800c3fa:	7863      	ldrb	r3, [r4, #1]
 800c3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c3fe:	d135      	bne.n	800c46c <_svfiprintf_r+0x188>
 800c400:	9b03      	ldr	r3, [sp, #12]
 800c402:	3402      	adds	r4, #2
 800c404:	1d1a      	adds	r2, r3, #4
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	9203      	str	r2, [sp, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bfb8      	it	lt
 800c40e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c412:	9305      	str	r3, [sp, #20]
 800c414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4e0 <_svfiprintf_r+0x1fc>
 800c418:	2203      	movs	r2, #3
 800c41a:	4650      	mov	r0, sl
 800c41c:	7821      	ldrb	r1, [r4, #0]
 800c41e:	f7ff f97d 	bl	800b71c <memchr>
 800c422:	b140      	cbz	r0, 800c436 <_svfiprintf_r+0x152>
 800c424:	2340      	movs	r3, #64	; 0x40
 800c426:	eba0 000a 	sub.w	r0, r0, sl
 800c42a:	fa03 f000 	lsl.w	r0, r3, r0
 800c42e:	9b04      	ldr	r3, [sp, #16]
 800c430:	3401      	adds	r4, #1
 800c432:	4303      	orrs	r3, r0
 800c434:	9304      	str	r3, [sp, #16]
 800c436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43a:	2206      	movs	r2, #6
 800c43c:	4825      	ldr	r0, [pc, #148]	; (800c4d4 <_svfiprintf_r+0x1f0>)
 800c43e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c442:	f7ff f96b 	bl	800b71c <memchr>
 800c446:	2800      	cmp	r0, #0
 800c448:	d038      	beq.n	800c4bc <_svfiprintf_r+0x1d8>
 800c44a:	4b23      	ldr	r3, [pc, #140]	; (800c4d8 <_svfiprintf_r+0x1f4>)
 800c44c:	bb1b      	cbnz	r3, 800c496 <_svfiprintf_r+0x1b2>
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	3307      	adds	r3, #7
 800c452:	f023 0307 	bic.w	r3, r3, #7
 800c456:	3308      	adds	r3, #8
 800c458:	9303      	str	r3, [sp, #12]
 800c45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c45c:	4433      	add	r3, r6
 800c45e:	9309      	str	r3, [sp, #36]	; 0x24
 800c460:	e767      	b.n	800c332 <_svfiprintf_r+0x4e>
 800c462:	460c      	mov	r4, r1
 800c464:	2001      	movs	r0, #1
 800c466:	fb0c 3202 	mla	r2, ip, r2, r3
 800c46a:	e7a5      	b.n	800c3b8 <_svfiprintf_r+0xd4>
 800c46c:	2300      	movs	r3, #0
 800c46e:	f04f 0c0a 	mov.w	ip, #10
 800c472:	4619      	mov	r1, r3
 800c474:	3401      	adds	r4, #1
 800c476:	9305      	str	r3, [sp, #20]
 800c478:	4620      	mov	r0, r4
 800c47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c47e:	3a30      	subs	r2, #48	; 0x30
 800c480:	2a09      	cmp	r2, #9
 800c482:	d903      	bls.n	800c48c <_svfiprintf_r+0x1a8>
 800c484:	2b00      	cmp	r3, #0
 800c486:	d0c5      	beq.n	800c414 <_svfiprintf_r+0x130>
 800c488:	9105      	str	r1, [sp, #20]
 800c48a:	e7c3      	b.n	800c414 <_svfiprintf_r+0x130>
 800c48c:	4604      	mov	r4, r0
 800c48e:	2301      	movs	r3, #1
 800c490:	fb0c 2101 	mla	r1, ip, r1, r2
 800c494:	e7f0      	b.n	800c478 <_svfiprintf_r+0x194>
 800c496:	ab03      	add	r3, sp, #12
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	462a      	mov	r2, r5
 800c49c:	4638      	mov	r0, r7
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <_svfiprintf_r+0x1f8>)
 800c4a0:	a904      	add	r1, sp, #16
 800c4a2:	f7fc fa9f 	bl	80089e4 <_printf_float>
 800c4a6:	1c42      	adds	r2, r0, #1
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	d1d6      	bne.n	800c45a <_svfiprintf_r+0x176>
 800c4ac:	89ab      	ldrh	r3, [r5, #12]
 800c4ae:	065b      	lsls	r3, r3, #25
 800c4b0:	f53f af2c 	bmi.w	800c30c <_svfiprintf_r+0x28>
 800c4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4b6:	b01d      	add	sp, #116	; 0x74
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	ab03      	add	r3, sp, #12
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	462a      	mov	r2, r5
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <_svfiprintf_r+0x1f8>)
 800c4c6:	a904      	add	r1, sp, #16
 800c4c8:	f7fc fd28 	bl	8008f1c <_printf_i>
 800c4cc:	e7eb      	b.n	800c4a6 <_svfiprintf_r+0x1c2>
 800c4ce:	bf00      	nop
 800c4d0:	0800d644 	.word	0x0800d644
 800c4d4:	0800d64e 	.word	0x0800d64e
 800c4d8:	080089e5 	.word	0x080089e5
 800c4dc:	0800c22d 	.word	0x0800c22d
 800c4e0:	0800d64a 	.word	0x0800d64a

0800c4e4 <nan>:
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	4901      	ldr	r1, [pc, #4]	; (800c4ec <nan+0x8>)
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	7ff80000 	.word	0x7ff80000

0800c4f0 <_sbrk_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	4d05      	ldr	r5, [pc, #20]	; (800c50c <_sbrk_r+0x1c>)
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	4608      	mov	r0, r1
 800c4fa:	602b      	str	r3, [r5, #0]
 800c4fc:	f7f6 fc72 	bl	8002de4 <_sbrk>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_sbrk_r+0x1a>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_sbrk_r+0x1a>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	2000056c 	.word	0x2000056c

0800c510 <strncmp>:
 800c510:	b510      	push	{r4, lr}
 800c512:	b16a      	cbz	r2, 800c530 <strncmp+0x20>
 800c514:	3901      	subs	r1, #1
 800c516:	1884      	adds	r4, r0, r2
 800c518:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c51c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c520:	4293      	cmp	r3, r2
 800c522:	d103      	bne.n	800c52c <strncmp+0x1c>
 800c524:	42a0      	cmp	r0, r4
 800c526:	d001      	beq.n	800c52c <strncmp+0x1c>
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1f5      	bne.n	800c518 <strncmp+0x8>
 800c52c:	1a98      	subs	r0, r3, r2
 800c52e:	bd10      	pop	{r4, pc}
 800c530:	4610      	mov	r0, r2
 800c532:	e7fc      	b.n	800c52e <strncmp+0x1e>

0800c534 <__ascii_wctomb>:
 800c534:	4603      	mov	r3, r0
 800c536:	4608      	mov	r0, r1
 800c538:	b141      	cbz	r1, 800c54c <__ascii_wctomb+0x18>
 800c53a:	2aff      	cmp	r2, #255	; 0xff
 800c53c:	d904      	bls.n	800c548 <__ascii_wctomb+0x14>
 800c53e:	228a      	movs	r2, #138	; 0x8a
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	4770      	bx	lr
 800c548:	2001      	movs	r0, #1
 800c54a:	700a      	strb	r2, [r1, #0]
 800c54c:	4770      	bx	lr
	...

0800c550 <__assert_func>:
 800c550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c552:	4614      	mov	r4, r2
 800c554:	461a      	mov	r2, r3
 800c556:	4b09      	ldr	r3, [pc, #36]	; (800c57c <__assert_func+0x2c>)
 800c558:	4605      	mov	r5, r0
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68d8      	ldr	r0, [r3, #12]
 800c55e:	b14c      	cbz	r4, 800c574 <__assert_func+0x24>
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <__assert_func+0x30>)
 800c562:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c566:	9100      	str	r1, [sp, #0]
 800c568:	462b      	mov	r3, r5
 800c56a:	4906      	ldr	r1, [pc, #24]	; (800c584 <__assert_func+0x34>)
 800c56c:	f000 f80e 	bl	800c58c <fiprintf>
 800c570:	f000 fa82 	bl	800ca78 <abort>
 800c574:	4b04      	ldr	r3, [pc, #16]	; (800c588 <__assert_func+0x38>)
 800c576:	461c      	mov	r4, r3
 800c578:	e7f3      	b.n	800c562 <__assert_func+0x12>
 800c57a:	bf00      	nop
 800c57c:	20000010 	.word	0x20000010
 800c580:	0800d655 	.word	0x0800d655
 800c584:	0800d662 	.word	0x0800d662
 800c588:	0800d690 	.word	0x0800d690

0800c58c <fiprintf>:
 800c58c:	b40e      	push	{r1, r2, r3}
 800c58e:	b503      	push	{r0, r1, lr}
 800c590:	4601      	mov	r1, r0
 800c592:	ab03      	add	r3, sp, #12
 800c594:	4805      	ldr	r0, [pc, #20]	; (800c5ac <fiprintf+0x20>)
 800c596:	f853 2b04 	ldr.w	r2, [r3], #4
 800c59a:	6800      	ldr	r0, [r0, #0]
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	f000 f87b 	bl	800c698 <_vfiprintf_r>
 800c5a2:	b002      	add	sp, #8
 800c5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	4770      	bx	lr
 800c5ac:	20000010 	.word	0x20000010

0800c5b0 <memmove>:
 800c5b0:	4288      	cmp	r0, r1
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	eb01 0402 	add.w	r4, r1, r2
 800c5b8:	d902      	bls.n	800c5c0 <memmove+0x10>
 800c5ba:	4284      	cmp	r4, r0
 800c5bc:	4623      	mov	r3, r4
 800c5be:	d807      	bhi.n	800c5d0 <memmove+0x20>
 800c5c0:	1e43      	subs	r3, r0, #1
 800c5c2:	42a1      	cmp	r1, r4
 800c5c4:	d008      	beq.n	800c5d8 <memmove+0x28>
 800c5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ce:	e7f8      	b.n	800c5c2 <memmove+0x12>
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	4402      	add	r2, r0
 800c5d4:	428a      	cmp	r2, r1
 800c5d6:	d100      	bne.n	800c5da <memmove+0x2a>
 800c5d8:	bd10      	pop	{r4, pc}
 800c5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5e2:	e7f7      	b.n	800c5d4 <memmove+0x24>

0800c5e4 <__malloc_lock>:
 800c5e4:	4801      	ldr	r0, [pc, #4]	; (800c5ec <__malloc_lock+0x8>)
 800c5e6:	f000 bc07 	b.w	800cdf8 <__retarget_lock_acquire_recursive>
 800c5ea:	bf00      	nop
 800c5ec:	20000574 	.word	0x20000574

0800c5f0 <__malloc_unlock>:
 800c5f0:	4801      	ldr	r0, [pc, #4]	; (800c5f8 <__malloc_unlock+0x8>)
 800c5f2:	f000 bc02 	b.w	800cdfa <__retarget_lock_release_recursive>
 800c5f6:	bf00      	nop
 800c5f8:	20000574 	.word	0x20000574

0800c5fc <_realloc_r>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	4607      	mov	r7, r0
 800c600:	4614      	mov	r4, r2
 800c602:	460e      	mov	r6, r1
 800c604:	b921      	cbnz	r1, 800c610 <_realloc_r+0x14>
 800c606:	4611      	mov	r1, r2
 800c608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c60c:	f7ff bdb4 	b.w	800c178 <_malloc_r>
 800c610:	b922      	cbnz	r2, 800c61c <_realloc_r+0x20>
 800c612:	f7ff fd65 	bl	800c0e0 <_free_r>
 800c616:	4625      	mov	r5, r4
 800c618:	4628      	mov	r0, r5
 800c61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c61c:	f000 fc52 	bl	800cec4 <_malloc_usable_size_r>
 800c620:	42a0      	cmp	r0, r4
 800c622:	d20f      	bcs.n	800c644 <_realloc_r+0x48>
 800c624:	4621      	mov	r1, r4
 800c626:	4638      	mov	r0, r7
 800c628:	f7ff fda6 	bl	800c178 <_malloc_r>
 800c62c:	4605      	mov	r5, r0
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0f2      	beq.n	800c618 <_realloc_r+0x1c>
 800c632:	4631      	mov	r1, r6
 800c634:	4622      	mov	r2, r4
 800c636:	f7ff f87f 	bl	800b738 <memcpy>
 800c63a:	4631      	mov	r1, r6
 800c63c:	4638      	mov	r0, r7
 800c63e:	f7ff fd4f 	bl	800c0e0 <_free_r>
 800c642:	e7e9      	b.n	800c618 <_realloc_r+0x1c>
 800c644:	4635      	mov	r5, r6
 800c646:	e7e7      	b.n	800c618 <_realloc_r+0x1c>

0800c648 <__sfputc_r>:
 800c648:	6893      	ldr	r3, [r2, #8]
 800c64a:	b410      	push	{r4}
 800c64c:	3b01      	subs	r3, #1
 800c64e:	2b00      	cmp	r3, #0
 800c650:	6093      	str	r3, [r2, #8]
 800c652:	da07      	bge.n	800c664 <__sfputc_r+0x1c>
 800c654:	6994      	ldr	r4, [r2, #24]
 800c656:	42a3      	cmp	r3, r4
 800c658:	db01      	blt.n	800c65e <__sfputc_r+0x16>
 800c65a:	290a      	cmp	r1, #10
 800c65c:	d102      	bne.n	800c664 <__sfputc_r+0x1c>
 800c65e:	bc10      	pop	{r4}
 800c660:	f000 b94a 	b.w	800c8f8 <__swbuf_r>
 800c664:	6813      	ldr	r3, [r2, #0]
 800c666:	1c58      	adds	r0, r3, #1
 800c668:	6010      	str	r0, [r2, #0]
 800c66a:	7019      	strb	r1, [r3, #0]
 800c66c:	4608      	mov	r0, r1
 800c66e:	bc10      	pop	{r4}
 800c670:	4770      	bx	lr

0800c672 <__sfputs_r>:
 800c672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	4614      	mov	r4, r2
 800c67a:	18d5      	adds	r5, r2, r3
 800c67c:	42ac      	cmp	r4, r5
 800c67e:	d101      	bne.n	800c684 <__sfputs_r+0x12>
 800c680:	2000      	movs	r0, #0
 800c682:	e007      	b.n	800c694 <__sfputs_r+0x22>
 800c684:	463a      	mov	r2, r7
 800c686:	4630      	mov	r0, r6
 800c688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68c:	f7ff ffdc 	bl	800c648 <__sfputc_r>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d1f3      	bne.n	800c67c <__sfputs_r+0xa>
 800c694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c698 <_vfiprintf_r>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	460d      	mov	r5, r1
 800c69e:	4614      	mov	r4, r2
 800c6a0:	4698      	mov	r8, r3
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	b09d      	sub	sp, #116	; 0x74
 800c6a6:	b118      	cbz	r0, 800c6b0 <_vfiprintf_r+0x18>
 800c6a8:	6983      	ldr	r3, [r0, #24]
 800c6aa:	b90b      	cbnz	r3, 800c6b0 <_vfiprintf_r+0x18>
 800c6ac:	f000 fb06 	bl	800ccbc <__sinit>
 800c6b0:	4b89      	ldr	r3, [pc, #548]	; (800c8d8 <_vfiprintf_r+0x240>)
 800c6b2:	429d      	cmp	r5, r3
 800c6b4:	d11b      	bne.n	800c6ee <_vfiprintf_r+0x56>
 800c6b6:	6875      	ldr	r5, [r6, #4]
 800c6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ba:	07d9      	lsls	r1, r3, #31
 800c6bc:	d405      	bmi.n	800c6ca <_vfiprintf_r+0x32>
 800c6be:	89ab      	ldrh	r3, [r5, #12]
 800c6c0:	059a      	lsls	r2, r3, #22
 800c6c2:	d402      	bmi.n	800c6ca <_vfiprintf_r+0x32>
 800c6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c6:	f000 fb97 	bl	800cdf8 <__retarget_lock_acquire_recursive>
 800c6ca:	89ab      	ldrh	r3, [r5, #12]
 800c6cc:	071b      	lsls	r3, r3, #28
 800c6ce:	d501      	bpl.n	800c6d4 <_vfiprintf_r+0x3c>
 800c6d0:	692b      	ldr	r3, [r5, #16]
 800c6d2:	b9eb      	cbnz	r3, 800c710 <_vfiprintf_r+0x78>
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f000 f960 	bl	800c99c <__swsetup_r>
 800c6dc:	b1c0      	cbz	r0, 800c710 <_vfiprintf_r+0x78>
 800c6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6e0:	07dc      	lsls	r4, r3, #31
 800c6e2:	d50e      	bpl.n	800c702 <_vfiprintf_r+0x6a>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	b01d      	add	sp, #116	; 0x74
 800c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	4b7b      	ldr	r3, [pc, #492]	; (800c8dc <_vfiprintf_r+0x244>)
 800c6f0:	429d      	cmp	r5, r3
 800c6f2:	d101      	bne.n	800c6f8 <_vfiprintf_r+0x60>
 800c6f4:	68b5      	ldr	r5, [r6, #8]
 800c6f6:	e7df      	b.n	800c6b8 <_vfiprintf_r+0x20>
 800c6f8:	4b79      	ldr	r3, [pc, #484]	; (800c8e0 <_vfiprintf_r+0x248>)
 800c6fa:	429d      	cmp	r5, r3
 800c6fc:	bf08      	it	eq
 800c6fe:	68f5      	ldreq	r5, [r6, #12]
 800c700:	e7da      	b.n	800c6b8 <_vfiprintf_r+0x20>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	0598      	lsls	r0, r3, #22
 800c706:	d4ed      	bmi.n	800c6e4 <_vfiprintf_r+0x4c>
 800c708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c70a:	f000 fb76 	bl	800cdfa <__retarget_lock_release_recursive>
 800c70e:	e7e9      	b.n	800c6e4 <_vfiprintf_r+0x4c>
 800c710:	2300      	movs	r3, #0
 800c712:	9309      	str	r3, [sp, #36]	; 0x24
 800c714:	2320      	movs	r3, #32
 800c716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c71a:	2330      	movs	r3, #48	; 0x30
 800c71c:	f04f 0901 	mov.w	r9, #1
 800c720:	f8cd 800c 	str.w	r8, [sp, #12]
 800c724:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c8e4 <_vfiprintf_r+0x24c>
 800c728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c72c:	4623      	mov	r3, r4
 800c72e:	469a      	mov	sl, r3
 800c730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c734:	b10a      	cbz	r2, 800c73a <_vfiprintf_r+0xa2>
 800c736:	2a25      	cmp	r2, #37	; 0x25
 800c738:	d1f9      	bne.n	800c72e <_vfiprintf_r+0x96>
 800c73a:	ebba 0b04 	subs.w	fp, sl, r4
 800c73e:	d00b      	beq.n	800c758 <_vfiprintf_r+0xc0>
 800c740:	465b      	mov	r3, fp
 800c742:	4622      	mov	r2, r4
 800c744:	4629      	mov	r1, r5
 800c746:	4630      	mov	r0, r6
 800c748:	f7ff ff93 	bl	800c672 <__sfputs_r>
 800c74c:	3001      	adds	r0, #1
 800c74e:	f000 80aa 	beq.w	800c8a6 <_vfiprintf_r+0x20e>
 800c752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c754:	445a      	add	r2, fp
 800c756:	9209      	str	r2, [sp, #36]	; 0x24
 800c758:	f89a 3000 	ldrb.w	r3, [sl]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 80a2 	beq.w	800c8a6 <_vfiprintf_r+0x20e>
 800c762:	2300      	movs	r3, #0
 800c764:	f04f 32ff 	mov.w	r2, #4294967295
 800c768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c76c:	f10a 0a01 	add.w	sl, sl, #1
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	9307      	str	r3, [sp, #28]
 800c774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c778:	931a      	str	r3, [sp, #104]	; 0x68
 800c77a:	4654      	mov	r4, sl
 800c77c:	2205      	movs	r2, #5
 800c77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c782:	4858      	ldr	r0, [pc, #352]	; (800c8e4 <_vfiprintf_r+0x24c>)
 800c784:	f7fe ffca 	bl	800b71c <memchr>
 800c788:	9a04      	ldr	r2, [sp, #16]
 800c78a:	b9d8      	cbnz	r0, 800c7c4 <_vfiprintf_r+0x12c>
 800c78c:	06d1      	lsls	r1, r2, #27
 800c78e:	bf44      	itt	mi
 800c790:	2320      	movmi	r3, #32
 800c792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c796:	0713      	lsls	r3, r2, #28
 800c798:	bf44      	itt	mi
 800c79a:	232b      	movmi	r3, #43	; 0x2b
 800c79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a6:	d015      	beq.n	800c7d4 <_vfiprintf_r+0x13c>
 800c7a8:	4654      	mov	r4, sl
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	f04f 0c0a 	mov.w	ip, #10
 800c7b0:	9a07      	ldr	r2, [sp, #28]
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b8:	3b30      	subs	r3, #48	; 0x30
 800c7ba:	2b09      	cmp	r3, #9
 800c7bc:	d94e      	bls.n	800c85c <_vfiprintf_r+0x1c4>
 800c7be:	b1b0      	cbz	r0, 800c7ee <_vfiprintf_r+0x156>
 800c7c0:	9207      	str	r2, [sp, #28]
 800c7c2:	e014      	b.n	800c7ee <_vfiprintf_r+0x156>
 800c7c4:	eba0 0308 	sub.w	r3, r0, r8
 800c7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	46a2      	mov	sl, r4
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	e7d2      	b.n	800c77a <_vfiprintf_r+0xe2>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	1d19      	adds	r1, r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	9103      	str	r1, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bfbb      	ittet	lt
 800c7e0:	425b      	neglt	r3, r3
 800c7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e6:	9307      	strge	r3, [sp, #28]
 800c7e8:	9307      	strlt	r3, [sp, #28]
 800c7ea:	bfb8      	it	lt
 800c7ec:	9204      	strlt	r2, [sp, #16]
 800c7ee:	7823      	ldrb	r3, [r4, #0]
 800c7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c7f2:	d10c      	bne.n	800c80e <_vfiprintf_r+0x176>
 800c7f4:	7863      	ldrb	r3, [r4, #1]
 800c7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f8:	d135      	bne.n	800c866 <_vfiprintf_r+0x1ce>
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	3402      	adds	r4, #2
 800c7fe:	1d1a      	adds	r2, r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	9203      	str	r2, [sp, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	bfb8      	it	lt
 800c808:	f04f 33ff 	movlt.w	r3, #4294967295
 800c80c:	9305      	str	r3, [sp, #20]
 800c80e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8f4 <_vfiprintf_r+0x25c>
 800c812:	2203      	movs	r2, #3
 800c814:	4650      	mov	r0, sl
 800c816:	7821      	ldrb	r1, [r4, #0]
 800c818:	f7fe ff80 	bl	800b71c <memchr>
 800c81c:	b140      	cbz	r0, 800c830 <_vfiprintf_r+0x198>
 800c81e:	2340      	movs	r3, #64	; 0x40
 800c820:	eba0 000a 	sub.w	r0, r0, sl
 800c824:	fa03 f000 	lsl.w	r0, r3, r0
 800c828:	9b04      	ldr	r3, [sp, #16]
 800c82a:	3401      	adds	r4, #1
 800c82c:	4303      	orrs	r3, r0
 800c82e:	9304      	str	r3, [sp, #16]
 800c830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c834:	2206      	movs	r2, #6
 800c836:	482c      	ldr	r0, [pc, #176]	; (800c8e8 <_vfiprintf_r+0x250>)
 800c838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c83c:	f7fe ff6e 	bl	800b71c <memchr>
 800c840:	2800      	cmp	r0, #0
 800c842:	d03f      	beq.n	800c8c4 <_vfiprintf_r+0x22c>
 800c844:	4b29      	ldr	r3, [pc, #164]	; (800c8ec <_vfiprintf_r+0x254>)
 800c846:	bb1b      	cbnz	r3, 800c890 <_vfiprintf_r+0x1f8>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	3307      	adds	r3, #7
 800c84c:	f023 0307 	bic.w	r3, r3, #7
 800c850:	3308      	adds	r3, #8
 800c852:	9303      	str	r3, [sp, #12]
 800c854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c856:	443b      	add	r3, r7
 800c858:	9309      	str	r3, [sp, #36]	; 0x24
 800c85a:	e767      	b.n	800c72c <_vfiprintf_r+0x94>
 800c85c:	460c      	mov	r4, r1
 800c85e:	2001      	movs	r0, #1
 800c860:	fb0c 3202 	mla	r2, ip, r2, r3
 800c864:	e7a5      	b.n	800c7b2 <_vfiprintf_r+0x11a>
 800c866:	2300      	movs	r3, #0
 800c868:	f04f 0c0a 	mov.w	ip, #10
 800c86c:	4619      	mov	r1, r3
 800c86e:	3401      	adds	r4, #1
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	4620      	mov	r0, r4
 800c874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c878:	3a30      	subs	r2, #48	; 0x30
 800c87a:	2a09      	cmp	r2, #9
 800c87c:	d903      	bls.n	800c886 <_vfiprintf_r+0x1ee>
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d0c5      	beq.n	800c80e <_vfiprintf_r+0x176>
 800c882:	9105      	str	r1, [sp, #20]
 800c884:	e7c3      	b.n	800c80e <_vfiprintf_r+0x176>
 800c886:	4604      	mov	r4, r0
 800c888:	2301      	movs	r3, #1
 800c88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c88e:	e7f0      	b.n	800c872 <_vfiprintf_r+0x1da>
 800c890:	ab03      	add	r3, sp, #12
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	462a      	mov	r2, r5
 800c896:	4630      	mov	r0, r6
 800c898:	4b15      	ldr	r3, [pc, #84]	; (800c8f0 <_vfiprintf_r+0x258>)
 800c89a:	a904      	add	r1, sp, #16
 800c89c:	f7fc f8a2 	bl	80089e4 <_printf_float>
 800c8a0:	4607      	mov	r7, r0
 800c8a2:	1c78      	adds	r0, r7, #1
 800c8a4:	d1d6      	bne.n	800c854 <_vfiprintf_r+0x1bc>
 800c8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8a8:	07d9      	lsls	r1, r3, #31
 800c8aa:	d405      	bmi.n	800c8b8 <_vfiprintf_r+0x220>
 800c8ac:	89ab      	ldrh	r3, [r5, #12]
 800c8ae:	059a      	lsls	r2, r3, #22
 800c8b0:	d402      	bmi.n	800c8b8 <_vfiprintf_r+0x220>
 800c8b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8b4:	f000 faa1 	bl	800cdfa <__retarget_lock_release_recursive>
 800c8b8:	89ab      	ldrh	r3, [r5, #12]
 800c8ba:	065b      	lsls	r3, r3, #25
 800c8bc:	f53f af12 	bmi.w	800c6e4 <_vfiprintf_r+0x4c>
 800c8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c2:	e711      	b.n	800c6e8 <_vfiprintf_r+0x50>
 800c8c4:	ab03      	add	r3, sp, #12
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	4b08      	ldr	r3, [pc, #32]	; (800c8f0 <_vfiprintf_r+0x258>)
 800c8ce:	a904      	add	r1, sp, #16
 800c8d0:	f7fc fb24 	bl	8008f1c <_printf_i>
 800c8d4:	e7e4      	b.n	800c8a0 <_vfiprintf_r+0x208>
 800c8d6:	bf00      	nop
 800c8d8:	0800d6b4 	.word	0x0800d6b4
 800c8dc:	0800d6d4 	.word	0x0800d6d4
 800c8e0:	0800d694 	.word	0x0800d694
 800c8e4:	0800d644 	.word	0x0800d644
 800c8e8:	0800d64e 	.word	0x0800d64e
 800c8ec:	080089e5 	.word	0x080089e5
 800c8f0:	0800c673 	.word	0x0800c673
 800c8f4:	0800d64a 	.word	0x0800d64a

0800c8f8 <__swbuf_r>:
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	460e      	mov	r6, r1
 800c8fc:	4614      	mov	r4, r2
 800c8fe:	4605      	mov	r5, r0
 800c900:	b118      	cbz	r0, 800c90a <__swbuf_r+0x12>
 800c902:	6983      	ldr	r3, [r0, #24]
 800c904:	b90b      	cbnz	r3, 800c90a <__swbuf_r+0x12>
 800c906:	f000 f9d9 	bl	800ccbc <__sinit>
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <__swbuf_r+0x98>)
 800c90c:	429c      	cmp	r4, r3
 800c90e:	d12b      	bne.n	800c968 <__swbuf_r+0x70>
 800c910:	686c      	ldr	r4, [r5, #4]
 800c912:	69a3      	ldr	r3, [r4, #24]
 800c914:	60a3      	str	r3, [r4, #8]
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	071a      	lsls	r2, r3, #28
 800c91a:	d52f      	bpl.n	800c97c <__swbuf_r+0x84>
 800c91c:	6923      	ldr	r3, [r4, #16]
 800c91e:	b36b      	cbz	r3, 800c97c <__swbuf_r+0x84>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	6820      	ldr	r0, [r4, #0]
 800c924:	b2f6      	uxtb	r6, r6
 800c926:	1ac0      	subs	r0, r0, r3
 800c928:	6963      	ldr	r3, [r4, #20]
 800c92a:	4637      	mov	r7, r6
 800c92c:	4283      	cmp	r3, r0
 800c92e:	dc04      	bgt.n	800c93a <__swbuf_r+0x42>
 800c930:	4621      	mov	r1, r4
 800c932:	4628      	mov	r0, r5
 800c934:	f000 f92e 	bl	800cb94 <_fflush_r>
 800c938:	bb30      	cbnz	r0, 800c988 <__swbuf_r+0x90>
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	3001      	adds	r0, #1
 800c93e:	3b01      	subs	r3, #1
 800c940:	60a3      	str	r3, [r4, #8]
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	1c5a      	adds	r2, r3, #1
 800c946:	6022      	str	r2, [r4, #0]
 800c948:	701e      	strb	r6, [r3, #0]
 800c94a:	6963      	ldr	r3, [r4, #20]
 800c94c:	4283      	cmp	r3, r0
 800c94e:	d004      	beq.n	800c95a <__swbuf_r+0x62>
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	07db      	lsls	r3, r3, #31
 800c954:	d506      	bpl.n	800c964 <__swbuf_r+0x6c>
 800c956:	2e0a      	cmp	r6, #10
 800c958:	d104      	bne.n	800c964 <__swbuf_r+0x6c>
 800c95a:	4621      	mov	r1, r4
 800c95c:	4628      	mov	r0, r5
 800c95e:	f000 f919 	bl	800cb94 <_fflush_r>
 800c962:	b988      	cbnz	r0, 800c988 <__swbuf_r+0x90>
 800c964:	4638      	mov	r0, r7
 800c966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c968:	4b0a      	ldr	r3, [pc, #40]	; (800c994 <__swbuf_r+0x9c>)
 800c96a:	429c      	cmp	r4, r3
 800c96c:	d101      	bne.n	800c972 <__swbuf_r+0x7a>
 800c96e:	68ac      	ldr	r4, [r5, #8]
 800c970:	e7cf      	b.n	800c912 <__swbuf_r+0x1a>
 800c972:	4b09      	ldr	r3, [pc, #36]	; (800c998 <__swbuf_r+0xa0>)
 800c974:	429c      	cmp	r4, r3
 800c976:	bf08      	it	eq
 800c978:	68ec      	ldreq	r4, [r5, #12]
 800c97a:	e7ca      	b.n	800c912 <__swbuf_r+0x1a>
 800c97c:	4621      	mov	r1, r4
 800c97e:	4628      	mov	r0, r5
 800c980:	f000 f80c 	bl	800c99c <__swsetup_r>
 800c984:	2800      	cmp	r0, #0
 800c986:	d0cb      	beq.n	800c920 <__swbuf_r+0x28>
 800c988:	f04f 37ff 	mov.w	r7, #4294967295
 800c98c:	e7ea      	b.n	800c964 <__swbuf_r+0x6c>
 800c98e:	bf00      	nop
 800c990:	0800d6b4 	.word	0x0800d6b4
 800c994:	0800d6d4 	.word	0x0800d6d4
 800c998:	0800d694 	.word	0x0800d694

0800c99c <__swsetup_r>:
 800c99c:	4b32      	ldr	r3, [pc, #200]	; (800ca68 <__swsetup_r+0xcc>)
 800c99e:	b570      	push	{r4, r5, r6, lr}
 800c9a0:	681d      	ldr	r5, [r3, #0]
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	b125      	cbz	r5, 800c9b2 <__swsetup_r+0x16>
 800c9a8:	69ab      	ldr	r3, [r5, #24]
 800c9aa:	b913      	cbnz	r3, 800c9b2 <__swsetup_r+0x16>
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 f985 	bl	800ccbc <__sinit>
 800c9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ca6c <__swsetup_r+0xd0>)
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	d10f      	bne.n	800c9d8 <__swsetup_r+0x3c>
 800c9b8:	686c      	ldr	r4, [r5, #4]
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9c0:	0719      	lsls	r1, r3, #28
 800c9c2:	d42c      	bmi.n	800ca1e <__swsetup_r+0x82>
 800c9c4:	06dd      	lsls	r5, r3, #27
 800c9c6:	d411      	bmi.n	800c9ec <__swsetup_r+0x50>
 800c9c8:	2309      	movs	r3, #9
 800c9ca:	6033      	str	r3, [r6, #0]
 800c9cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	e03e      	b.n	800ca56 <__swsetup_r+0xba>
 800c9d8:	4b25      	ldr	r3, [pc, #148]	; (800ca70 <__swsetup_r+0xd4>)
 800c9da:	429c      	cmp	r4, r3
 800c9dc:	d101      	bne.n	800c9e2 <__swsetup_r+0x46>
 800c9de:	68ac      	ldr	r4, [r5, #8]
 800c9e0:	e7eb      	b.n	800c9ba <__swsetup_r+0x1e>
 800c9e2:	4b24      	ldr	r3, [pc, #144]	; (800ca74 <__swsetup_r+0xd8>)
 800c9e4:	429c      	cmp	r4, r3
 800c9e6:	bf08      	it	eq
 800c9e8:	68ec      	ldreq	r4, [r5, #12]
 800c9ea:	e7e6      	b.n	800c9ba <__swsetup_r+0x1e>
 800c9ec:	0758      	lsls	r0, r3, #29
 800c9ee:	d512      	bpl.n	800ca16 <__swsetup_r+0x7a>
 800c9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f2:	b141      	cbz	r1, 800ca06 <__swsetup_r+0x6a>
 800c9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9f8:	4299      	cmp	r1, r3
 800c9fa:	d002      	beq.n	800ca02 <__swsetup_r+0x66>
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7ff fb6f 	bl	800c0e0 <_free_r>
 800ca02:	2300      	movs	r3, #0
 800ca04:	6363      	str	r3, [r4, #52]	; 0x34
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca0c:	81a3      	strh	r3, [r4, #12]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	6063      	str	r3, [r4, #4]
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	f043 0308 	orr.w	r3, r3, #8
 800ca1c:	81a3      	strh	r3, [r4, #12]
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	b94b      	cbnz	r3, 800ca36 <__swsetup_r+0x9a>
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca2c:	d003      	beq.n	800ca36 <__swsetup_r+0x9a>
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4630      	mov	r0, r6
 800ca32:	f000 fa07 	bl	800ce44 <__smakebuf_r>
 800ca36:	89a0      	ldrh	r0, [r4, #12]
 800ca38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca3c:	f010 0301 	ands.w	r3, r0, #1
 800ca40:	d00a      	beq.n	800ca58 <__swsetup_r+0xbc>
 800ca42:	2300      	movs	r3, #0
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	6963      	ldr	r3, [r4, #20]
 800ca48:	425b      	negs	r3, r3
 800ca4a:	61a3      	str	r3, [r4, #24]
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	b943      	cbnz	r3, 800ca62 <__swsetup_r+0xc6>
 800ca50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca54:	d1ba      	bne.n	800c9cc <__swsetup_r+0x30>
 800ca56:	bd70      	pop	{r4, r5, r6, pc}
 800ca58:	0781      	lsls	r1, r0, #30
 800ca5a:	bf58      	it	pl
 800ca5c:	6963      	ldrpl	r3, [r4, #20]
 800ca5e:	60a3      	str	r3, [r4, #8]
 800ca60:	e7f4      	b.n	800ca4c <__swsetup_r+0xb0>
 800ca62:	2000      	movs	r0, #0
 800ca64:	e7f7      	b.n	800ca56 <__swsetup_r+0xba>
 800ca66:	bf00      	nop
 800ca68:	20000010 	.word	0x20000010
 800ca6c:	0800d6b4 	.word	0x0800d6b4
 800ca70:	0800d6d4 	.word	0x0800d6d4
 800ca74:	0800d694 	.word	0x0800d694

0800ca78 <abort>:
 800ca78:	2006      	movs	r0, #6
 800ca7a:	b508      	push	{r3, lr}
 800ca7c:	f000 fa52 	bl	800cf24 <raise>
 800ca80:	2001      	movs	r0, #1
 800ca82:	f7f6 f93c 	bl	8002cfe <_exit>
	...

0800ca88 <__sflush_r>:
 800ca88:	898a      	ldrh	r2, [r1, #12]
 800ca8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8e:	4605      	mov	r5, r0
 800ca90:	0710      	lsls	r0, r2, #28
 800ca92:	460c      	mov	r4, r1
 800ca94:	d458      	bmi.n	800cb48 <__sflush_r+0xc0>
 800ca96:	684b      	ldr	r3, [r1, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dc05      	bgt.n	800caa8 <__sflush_r+0x20>
 800ca9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	dc02      	bgt.n	800caa8 <__sflush_r+0x20>
 800caa2:	2000      	movs	r0, #0
 800caa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caaa:	2e00      	cmp	r6, #0
 800caac:	d0f9      	beq.n	800caa2 <__sflush_r+0x1a>
 800caae:	2300      	movs	r3, #0
 800cab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cab4:	682f      	ldr	r7, [r5, #0]
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	d032      	beq.n	800cb20 <__sflush_r+0x98>
 800caba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cabc:	89a3      	ldrh	r3, [r4, #12]
 800cabe:	075a      	lsls	r2, r3, #29
 800cac0:	d505      	bpl.n	800cace <__sflush_r+0x46>
 800cac2:	6863      	ldr	r3, [r4, #4]
 800cac4:	1ac0      	subs	r0, r0, r3
 800cac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cac8:	b10b      	cbz	r3, 800cace <__sflush_r+0x46>
 800caca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cacc:	1ac0      	subs	r0, r0, r3
 800cace:	2300      	movs	r3, #0
 800cad0:	4602      	mov	r2, r0
 800cad2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cad4:	4628      	mov	r0, r5
 800cad6:	6a21      	ldr	r1, [r4, #32]
 800cad8:	47b0      	blx	r6
 800cada:	1c43      	adds	r3, r0, #1
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	d106      	bne.n	800caee <__sflush_r+0x66>
 800cae0:	6829      	ldr	r1, [r5, #0]
 800cae2:	291d      	cmp	r1, #29
 800cae4:	d82c      	bhi.n	800cb40 <__sflush_r+0xb8>
 800cae6:	4a2a      	ldr	r2, [pc, #168]	; (800cb90 <__sflush_r+0x108>)
 800cae8:	40ca      	lsrs	r2, r1
 800caea:	07d6      	lsls	r6, r2, #31
 800caec:	d528      	bpl.n	800cb40 <__sflush_r+0xb8>
 800caee:	2200      	movs	r2, #0
 800caf0:	6062      	str	r2, [r4, #4]
 800caf2:	6922      	ldr	r2, [r4, #16]
 800caf4:	04d9      	lsls	r1, r3, #19
 800caf6:	6022      	str	r2, [r4, #0]
 800caf8:	d504      	bpl.n	800cb04 <__sflush_r+0x7c>
 800cafa:	1c42      	adds	r2, r0, #1
 800cafc:	d101      	bne.n	800cb02 <__sflush_r+0x7a>
 800cafe:	682b      	ldr	r3, [r5, #0]
 800cb00:	b903      	cbnz	r3, 800cb04 <__sflush_r+0x7c>
 800cb02:	6560      	str	r0, [r4, #84]	; 0x54
 800cb04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb06:	602f      	str	r7, [r5, #0]
 800cb08:	2900      	cmp	r1, #0
 800cb0a:	d0ca      	beq.n	800caa2 <__sflush_r+0x1a>
 800cb0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb10:	4299      	cmp	r1, r3
 800cb12:	d002      	beq.n	800cb1a <__sflush_r+0x92>
 800cb14:	4628      	mov	r0, r5
 800cb16:	f7ff fae3 	bl	800c0e0 <_free_r>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	6360      	str	r0, [r4, #52]	; 0x34
 800cb1e:	e7c1      	b.n	800caa4 <__sflush_r+0x1c>
 800cb20:	6a21      	ldr	r1, [r4, #32]
 800cb22:	2301      	movs	r3, #1
 800cb24:	4628      	mov	r0, r5
 800cb26:	47b0      	blx	r6
 800cb28:	1c41      	adds	r1, r0, #1
 800cb2a:	d1c7      	bne.n	800cabc <__sflush_r+0x34>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d0c4      	beq.n	800cabc <__sflush_r+0x34>
 800cb32:	2b1d      	cmp	r3, #29
 800cb34:	d001      	beq.n	800cb3a <__sflush_r+0xb2>
 800cb36:	2b16      	cmp	r3, #22
 800cb38:	d101      	bne.n	800cb3e <__sflush_r+0xb6>
 800cb3a:	602f      	str	r7, [r5, #0]
 800cb3c:	e7b1      	b.n	800caa2 <__sflush_r+0x1a>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	e7ad      	b.n	800caa4 <__sflush_r+0x1c>
 800cb48:	690f      	ldr	r7, [r1, #16]
 800cb4a:	2f00      	cmp	r7, #0
 800cb4c:	d0a9      	beq.n	800caa2 <__sflush_r+0x1a>
 800cb4e:	0793      	lsls	r3, r2, #30
 800cb50:	bf18      	it	ne
 800cb52:	2300      	movne	r3, #0
 800cb54:	680e      	ldr	r6, [r1, #0]
 800cb56:	bf08      	it	eq
 800cb58:	694b      	ldreq	r3, [r1, #20]
 800cb5a:	eba6 0807 	sub.w	r8, r6, r7
 800cb5e:	600f      	str	r7, [r1, #0]
 800cb60:	608b      	str	r3, [r1, #8]
 800cb62:	f1b8 0f00 	cmp.w	r8, #0
 800cb66:	dd9c      	ble.n	800caa2 <__sflush_r+0x1a>
 800cb68:	4643      	mov	r3, r8
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	6a21      	ldr	r1, [r4, #32]
 800cb70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb72:	47b0      	blx	r6
 800cb74:	2800      	cmp	r0, #0
 800cb76:	dc06      	bgt.n	800cb86 <__sflush_r+0xfe>
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb82:	81a3      	strh	r3, [r4, #12]
 800cb84:	e78e      	b.n	800caa4 <__sflush_r+0x1c>
 800cb86:	4407      	add	r7, r0
 800cb88:	eba8 0800 	sub.w	r8, r8, r0
 800cb8c:	e7e9      	b.n	800cb62 <__sflush_r+0xda>
 800cb8e:	bf00      	nop
 800cb90:	20400001 	.word	0x20400001

0800cb94 <_fflush_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	690b      	ldr	r3, [r1, #16]
 800cb98:	4605      	mov	r5, r0
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	b913      	cbnz	r3, 800cba4 <_fflush_r+0x10>
 800cb9e:	2500      	movs	r5, #0
 800cba0:	4628      	mov	r0, r5
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	b118      	cbz	r0, 800cbae <_fflush_r+0x1a>
 800cba6:	6983      	ldr	r3, [r0, #24]
 800cba8:	b90b      	cbnz	r3, 800cbae <_fflush_r+0x1a>
 800cbaa:	f000 f887 	bl	800ccbc <__sinit>
 800cbae:	4b14      	ldr	r3, [pc, #80]	; (800cc00 <_fflush_r+0x6c>)
 800cbb0:	429c      	cmp	r4, r3
 800cbb2:	d11b      	bne.n	800cbec <_fflush_r+0x58>
 800cbb4:	686c      	ldr	r4, [r5, #4]
 800cbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0ef      	beq.n	800cb9e <_fflush_r+0xa>
 800cbbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbc0:	07d0      	lsls	r0, r2, #31
 800cbc2:	d404      	bmi.n	800cbce <_fflush_r+0x3a>
 800cbc4:	0599      	lsls	r1, r3, #22
 800cbc6:	d402      	bmi.n	800cbce <_fflush_r+0x3a>
 800cbc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbca:	f000 f915 	bl	800cdf8 <__retarget_lock_acquire_recursive>
 800cbce:	4628      	mov	r0, r5
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	f7ff ff59 	bl	800ca88 <__sflush_r>
 800cbd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbd8:	4605      	mov	r5, r0
 800cbda:	07da      	lsls	r2, r3, #31
 800cbdc:	d4e0      	bmi.n	800cba0 <_fflush_r+0xc>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	059b      	lsls	r3, r3, #22
 800cbe2:	d4dd      	bmi.n	800cba0 <_fflush_r+0xc>
 800cbe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbe6:	f000 f908 	bl	800cdfa <__retarget_lock_release_recursive>
 800cbea:	e7d9      	b.n	800cba0 <_fflush_r+0xc>
 800cbec:	4b05      	ldr	r3, [pc, #20]	; (800cc04 <_fflush_r+0x70>)
 800cbee:	429c      	cmp	r4, r3
 800cbf0:	d101      	bne.n	800cbf6 <_fflush_r+0x62>
 800cbf2:	68ac      	ldr	r4, [r5, #8]
 800cbf4:	e7df      	b.n	800cbb6 <_fflush_r+0x22>
 800cbf6:	4b04      	ldr	r3, [pc, #16]	; (800cc08 <_fflush_r+0x74>)
 800cbf8:	429c      	cmp	r4, r3
 800cbfa:	bf08      	it	eq
 800cbfc:	68ec      	ldreq	r4, [r5, #12]
 800cbfe:	e7da      	b.n	800cbb6 <_fflush_r+0x22>
 800cc00:	0800d6b4 	.word	0x0800d6b4
 800cc04:	0800d6d4 	.word	0x0800d6d4
 800cc08:	0800d694 	.word	0x0800d694

0800cc0c <std>:
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	b510      	push	{r4, lr}
 800cc10:	4604      	mov	r4, r0
 800cc12:	e9c0 3300 	strd	r3, r3, [r0]
 800cc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc1a:	6083      	str	r3, [r0, #8]
 800cc1c:	8181      	strh	r1, [r0, #12]
 800cc1e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc20:	81c2      	strh	r2, [r0, #14]
 800cc22:	6183      	str	r3, [r0, #24]
 800cc24:	4619      	mov	r1, r3
 800cc26:	2208      	movs	r2, #8
 800cc28:	305c      	adds	r0, #92	; 0x5c
 800cc2a:	f7fb fe35 	bl	8008898 <memset>
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <std+0x38>)
 800cc30:	6224      	str	r4, [r4, #32]
 800cc32:	6263      	str	r3, [r4, #36]	; 0x24
 800cc34:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <std+0x3c>)
 800cc36:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc38:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <std+0x40>)
 800cc3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc3c:	4b04      	ldr	r3, [pc, #16]	; (800cc50 <std+0x44>)
 800cc3e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc40:	bd10      	pop	{r4, pc}
 800cc42:	bf00      	nop
 800cc44:	0800cf5d 	.word	0x0800cf5d
 800cc48:	0800cf7f 	.word	0x0800cf7f
 800cc4c:	0800cfb7 	.word	0x0800cfb7
 800cc50:	0800cfdb 	.word	0x0800cfdb

0800cc54 <_cleanup_r>:
 800cc54:	4901      	ldr	r1, [pc, #4]	; (800cc5c <_cleanup_r+0x8>)
 800cc56:	f000 b8af 	b.w	800cdb8 <_fwalk_reent>
 800cc5a:	bf00      	nop
 800cc5c:	0800cb95 	.word	0x0800cb95

0800cc60 <__sfmoreglue>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	2568      	movs	r5, #104	; 0x68
 800cc64:	1e4a      	subs	r2, r1, #1
 800cc66:	4355      	muls	r5, r2
 800cc68:	460e      	mov	r6, r1
 800cc6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc6e:	f7ff fa83 	bl	800c178 <_malloc_r>
 800cc72:	4604      	mov	r4, r0
 800cc74:	b140      	cbz	r0, 800cc88 <__sfmoreglue+0x28>
 800cc76:	2100      	movs	r1, #0
 800cc78:	e9c0 1600 	strd	r1, r6, [r0]
 800cc7c:	300c      	adds	r0, #12
 800cc7e:	60a0      	str	r0, [r4, #8]
 800cc80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc84:	f7fb fe08 	bl	8008898 <memset>
 800cc88:	4620      	mov	r0, r4
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}

0800cc8c <__sfp_lock_acquire>:
 800cc8c:	4801      	ldr	r0, [pc, #4]	; (800cc94 <__sfp_lock_acquire+0x8>)
 800cc8e:	f000 b8b3 	b.w	800cdf8 <__retarget_lock_acquire_recursive>
 800cc92:	bf00      	nop
 800cc94:	20000578 	.word	0x20000578

0800cc98 <__sfp_lock_release>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__sfp_lock_release+0x8>)
 800cc9a:	f000 b8ae 	b.w	800cdfa <__retarget_lock_release_recursive>
 800cc9e:	bf00      	nop
 800cca0:	20000578 	.word	0x20000578

0800cca4 <__sinit_lock_acquire>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__sinit_lock_acquire+0x8>)
 800cca6:	f000 b8a7 	b.w	800cdf8 <__retarget_lock_acquire_recursive>
 800ccaa:	bf00      	nop
 800ccac:	20000573 	.word	0x20000573

0800ccb0 <__sinit_lock_release>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	; (800ccb8 <__sinit_lock_release+0x8>)
 800ccb2:	f000 b8a2 	b.w	800cdfa <__retarget_lock_release_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	20000573 	.word	0x20000573

0800ccbc <__sinit>:
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	f7ff fff0 	bl	800cca4 <__sinit_lock_acquire>
 800ccc4:	69a3      	ldr	r3, [r4, #24]
 800ccc6:	b11b      	cbz	r3, 800ccd0 <__sinit+0x14>
 800ccc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cccc:	f7ff bff0 	b.w	800ccb0 <__sinit_lock_release>
 800ccd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ccd4:	6523      	str	r3, [r4, #80]	; 0x50
 800ccd6:	4b13      	ldr	r3, [pc, #76]	; (800cd24 <__sinit+0x68>)
 800ccd8:	4a13      	ldr	r2, [pc, #76]	; (800cd28 <__sinit+0x6c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccde:	42a3      	cmp	r3, r4
 800cce0:	bf08      	it	eq
 800cce2:	2301      	moveq	r3, #1
 800cce4:	4620      	mov	r0, r4
 800cce6:	bf08      	it	eq
 800cce8:	61a3      	streq	r3, [r4, #24]
 800ccea:	f000 f81f 	bl	800cd2c <__sfp>
 800ccee:	6060      	str	r0, [r4, #4]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 f81b 	bl	800cd2c <__sfp>
 800ccf6:	60a0      	str	r0, [r4, #8]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 f817 	bl	800cd2c <__sfp>
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2104      	movs	r1, #4
 800cd02:	60e0      	str	r0, [r4, #12]
 800cd04:	6860      	ldr	r0, [r4, #4]
 800cd06:	f7ff ff81 	bl	800cc0c <std>
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	2109      	movs	r1, #9
 800cd0e:	68a0      	ldr	r0, [r4, #8]
 800cd10:	f7ff ff7c 	bl	800cc0c <std>
 800cd14:	2202      	movs	r2, #2
 800cd16:	2112      	movs	r1, #18
 800cd18:	68e0      	ldr	r0, [r4, #12]
 800cd1a:	f7ff ff77 	bl	800cc0c <std>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	61a3      	str	r3, [r4, #24]
 800cd22:	e7d1      	b.n	800ccc8 <__sinit+0xc>
 800cd24:	0800d23c 	.word	0x0800d23c
 800cd28:	0800cc55 	.word	0x0800cc55

0800cd2c <__sfp>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	4607      	mov	r7, r0
 800cd30:	f7ff ffac 	bl	800cc8c <__sfp_lock_acquire>
 800cd34:	4b1e      	ldr	r3, [pc, #120]	; (800cdb0 <__sfp+0x84>)
 800cd36:	681e      	ldr	r6, [r3, #0]
 800cd38:	69b3      	ldr	r3, [r6, #24]
 800cd3a:	b913      	cbnz	r3, 800cd42 <__sfp+0x16>
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f7ff ffbd 	bl	800ccbc <__sinit>
 800cd42:	3648      	adds	r6, #72	; 0x48
 800cd44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	d503      	bpl.n	800cd54 <__sfp+0x28>
 800cd4c:	6833      	ldr	r3, [r6, #0]
 800cd4e:	b30b      	cbz	r3, 800cd94 <__sfp+0x68>
 800cd50:	6836      	ldr	r6, [r6, #0]
 800cd52:	e7f7      	b.n	800cd44 <__sfp+0x18>
 800cd54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd58:	b9d5      	cbnz	r5, 800cd90 <__sfp+0x64>
 800cd5a:	4b16      	ldr	r3, [pc, #88]	; (800cdb4 <__sfp+0x88>)
 800cd5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd60:	60e3      	str	r3, [r4, #12]
 800cd62:	6665      	str	r5, [r4, #100]	; 0x64
 800cd64:	f000 f847 	bl	800cdf6 <__retarget_lock_init_recursive>
 800cd68:	f7ff ff96 	bl	800cc98 <__sfp_lock_release>
 800cd6c:	2208      	movs	r2, #8
 800cd6e:	4629      	mov	r1, r5
 800cd70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd78:	6025      	str	r5, [r4, #0]
 800cd7a:	61a5      	str	r5, [r4, #24]
 800cd7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd80:	f7fb fd8a 	bl	8008898 <memset>
 800cd84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd90:	3468      	adds	r4, #104	; 0x68
 800cd92:	e7d9      	b.n	800cd48 <__sfp+0x1c>
 800cd94:	2104      	movs	r1, #4
 800cd96:	4638      	mov	r0, r7
 800cd98:	f7ff ff62 	bl	800cc60 <__sfmoreglue>
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	6030      	str	r0, [r6, #0]
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d1d5      	bne.n	800cd50 <__sfp+0x24>
 800cda4:	f7ff ff78 	bl	800cc98 <__sfp_lock_release>
 800cda8:	230c      	movs	r3, #12
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	e7ee      	b.n	800cd8c <__sfp+0x60>
 800cdae:	bf00      	nop
 800cdb0:	0800d23c 	.word	0x0800d23c
 800cdb4:	ffff0001 	.word	0xffff0001

0800cdb8 <_fwalk_reent>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	4688      	mov	r8, r1
 800cdc0:	2700      	movs	r7, #0
 800cdc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdca:	f1b9 0901 	subs.w	r9, r9, #1
 800cdce:	d505      	bpl.n	800cddc <_fwalk_reent+0x24>
 800cdd0:	6824      	ldr	r4, [r4, #0]
 800cdd2:	2c00      	cmp	r4, #0
 800cdd4:	d1f7      	bne.n	800cdc6 <_fwalk_reent+0xe>
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cddc:	89ab      	ldrh	r3, [r5, #12]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d907      	bls.n	800cdf2 <_fwalk_reent+0x3a>
 800cde2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cde6:	3301      	adds	r3, #1
 800cde8:	d003      	beq.n	800cdf2 <_fwalk_reent+0x3a>
 800cdea:	4629      	mov	r1, r5
 800cdec:	4630      	mov	r0, r6
 800cdee:	47c0      	blx	r8
 800cdf0:	4307      	orrs	r7, r0
 800cdf2:	3568      	adds	r5, #104	; 0x68
 800cdf4:	e7e9      	b.n	800cdca <_fwalk_reent+0x12>

0800cdf6 <__retarget_lock_init_recursive>:
 800cdf6:	4770      	bx	lr

0800cdf8 <__retarget_lock_acquire_recursive>:
 800cdf8:	4770      	bx	lr

0800cdfa <__retarget_lock_release_recursive>:
 800cdfa:	4770      	bx	lr

0800cdfc <__swhatbuf_r>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	460e      	mov	r6, r1
 800ce00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce04:	4614      	mov	r4, r2
 800ce06:	2900      	cmp	r1, #0
 800ce08:	461d      	mov	r5, r3
 800ce0a:	b096      	sub	sp, #88	; 0x58
 800ce0c:	da07      	bge.n	800ce1e <__swhatbuf_r+0x22>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	602b      	str	r3, [r5, #0]
 800ce12:	89b3      	ldrh	r3, [r6, #12]
 800ce14:	061a      	lsls	r2, r3, #24
 800ce16:	d410      	bmi.n	800ce3a <__swhatbuf_r+0x3e>
 800ce18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce1c:	e00e      	b.n	800ce3c <__swhatbuf_r+0x40>
 800ce1e:	466a      	mov	r2, sp
 800ce20:	f000 f902 	bl	800d028 <_fstat_r>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	dbf2      	blt.n	800ce0e <__swhatbuf_r+0x12>
 800ce28:	9a01      	ldr	r2, [sp, #4]
 800ce2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce32:	425a      	negs	r2, r3
 800ce34:	415a      	adcs	r2, r3
 800ce36:	602a      	str	r2, [r5, #0]
 800ce38:	e7ee      	b.n	800ce18 <__swhatbuf_r+0x1c>
 800ce3a:	2340      	movs	r3, #64	; 0x40
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	6023      	str	r3, [r4, #0]
 800ce40:	b016      	add	sp, #88	; 0x58
 800ce42:	bd70      	pop	{r4, r5, r6, pc}

0800ce44 <__smakebuf_r>:
 800ce44:	898b      	ldrh	r3, [r1, #12]
 800ce46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce48:	079d      	lsls	r5, r3, #30
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	d507      	bpl.n	800ce60 <__smakebuf_r+0x1c>
 800ce50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	6123      	str	r3, [r4, #16]
 800ce58:	2301      	movs	r3, #1
 800ce5a:	6163      	str	r3, [r4, #20]
 800ce5c:	b002      	add	sp, #8
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	466a      	mov	r2, sp
 800ce62:	ab01      	add	r3, sp, #4
 800ce64:	f7ff ffca 	bl	800cdfc <__swhatbuf_r>
 800ce68:	9900      	ldr	r1, [sp, #0]
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f7ff f983 	bl	800c178 <_malloc_r>
 800ce72:	b948      	cbnz	r0, 800ce88 <__smakebuf_r+0x44>
 800ce74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce78:	059a      	lsls	r2, r3, #22
 800ce7a:	d4ef      	bmi.n	800ce5c <__smakebuf_r+0x18>
 800ce7c:	f023 0303 	bic.w	r3, r3, #3
 800ce80:	f043 0302 	orr.w	r3, r3, #2
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	e7e3      	b.n	800ce50 <__smakebuf_r+0xc>
 800ce88:	4b0d      	ldr	r3, [pc, #52]	; (800cec0 <__smakebuf_r+0x7c>)
 800ce8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	6020      	str	r0, [r4, #0]
 800ce90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce94:	81a3      	strh	r3, [r4, #12]
 800ce96:	9b00      	ldr	r3, [sp, #0]
 800ce98:	6120      	str	r0, [r4, #16]
 800ce9a:	6163      	str	r3, [r4, #20]
 800ce9c:	9b01      	ldr	r3, [sp, #4]
 800ce9e:	b15b      	cbz	r3, 800ceb8 <__smakebuf_r+0x74>
 800cea0:	4630      	mov	r0, r6
 800cea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea6:	f000 f8d1 	bl	800d04c <_isatty_r>
 800ceaa:	b128      	cbz	r0, 800ceb8 <__smakebuf_r+0x74>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f023 0303 	bic.w	r3, r3, #3
 800ceb2:	f043 0301 	orr.w	r3, r3, #1
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	89a0      	ldrh	r0, [r4, #12]
 800ceba:	4305      	orrs	r5, r0
 800cebc:	81a5      	strh	r5, [r4, #12]
 800cebe:	e7cd      	b.n	800ce5c <__smakebuf_r+0x18>
 800cec0:	0800cc55 	.word	0x0800cc55

0800cec4 <_malloc_usable_size_r>:
 800cec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec8:	1f18      	subs	r0, r3, #4
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	bfbc      	itt	lt
 800cece:	580b      	ldrlt	r3, [r1, r0]
 800ced0:	18c0      	addlt	r0, r0, r3
 800ced2:	4770      	bx	lr

0800ced4 <_raise_r>:
 800ced4:	291f      	cmp	r1, #31
 800ced6:	b538      	push	{r3, r4, r5, lr}
 800ced8:	4604      	mov	r4, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	d904      	bls.n	800cee8 <_raise_r+0x14>
 800cede:	2316      	movs	r3, #22
 800cee0:	6003      	str	r3, [r0, #0]
 800cee2:	f04f 30ff 	mov.w	r0, #4294967295
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ceea:	b112      	cbz	r2, 800cef2 <_raise_r+0x1e>
 800ceec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cef0:	b94b      	cbnz	r3, 800cf06 <_raise_r+0x32>
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f830 	bl	800cf58 <_getpid_r>
 800cef8:	462a      	mov	r2, r5
 800cefa:	4601      	mov	r1, r0
 800cefc:	4620      	mov	r0, r4
 800cefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf02:	f000 b817 	b.w	800cf34 <_kill_r>
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d00a      	beq.n	800cf20 <_raise_r+0x4c>
 800cf0a:	1c59      	adds	r1, r3, #1
 800cf0c:	d103      	bne.n	800cf16 <_raise_r+0x42>
 800cf0e:	2316      	movs	r3, #22
 800cf10:	6003      	str	r3, [r0, #0]
 800cf12:	2001      	movs	r0, #1
 800cf14:	e7e7      	b.n	800cee6 <_raise_r+0x12>
 800cf16:	2400      	movs	r4, #0
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf1e:	4798      	blx	r3
 800cf20:	2000      	movs	r0, #0
 800cf22:	e7e0      	b.n	800cee6 <_raise_r+0x12>

0800cf24 <raise>:
 800cf24:	4b02      	ldr	r3, [pc, #8]	; (800cf30 <raise+0xc>)
 800cf26:	4601      	mov	r1, r0
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	f7ff bfd3 	b.w	800ced4 <_raise_r>
 800cf2e:	bf00      	nop
 800cf30:	20000010 	.word	0x20000010

0800cf34 <_kill_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	2300      	movs	r3, #0
 800cf38:	4d06      	ldr	r5, [pc, #24]	; (800cf54 <_kill_r+0x20>)
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	4611      	mov	r1, r2
 800cf40:	602b      	str	r3, [r5, #0]
 800cf42:	f7f5 fecc 	bl	8002cde <_kill>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	d102      	bne.n	800cf50 <_kill_r+0x1c>
 800cf4a:	682b      	ldr	r3, [r5, #0]
 800cf4c:	b103      	cbz	r3, 800cf50 <_kill_r+0x1c>
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	bd38      	pop	{r3, r4, r5, pc}
 800cf52:	bf00      	nop
 800cf54:	2000056c 	.word	0x2000056c

0800cf58 <_getpid_r>:
 800cf58:	f7f5 beba 	b.w	8002cd0 <_getpid>

0800cf5c <__sread>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	460c      	mov	r4, r1
 800cf60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf64:	f000 f894 	bl	800d090 <_read_r>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	bfab      	itete	ge
 800cf6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf6e:	89a3      	ldrhlt	r3, [r4, #12]
 800cf70:	181b      	addge	r3, r3, r0
 800cf72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf76:	bfac      	ite	ge
 800cf78:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf7a:	81a3      	strhlt	r3, [r4, #12]
 800cf7c:	bd10      	pop	{r4, pc}

0800cf7e <__swrite>:
 800cf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf82:	461f      	mov	r7, r3
 800cf84:	898b      	ldrh	r3, [r1, #12]
 800cf86:	4605      	mov	r5, r0
 800cf88:	05db      	lsls	r3, r3, #23
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	4616      	mov	r6, r2
 800cf8e:	d505      	bpl.n	800cf9c <__swrite+0x1e>
 800cf90:	2302      	movs	r3, #2
 800cf92:	2200      	movs	r2, #0
 800cf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf98:	f000 f868 	bl	800d06c <_lseek_r>
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	4632      	mov	r2, r6
 800cfa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	463b      	mov	r3, r7
 800cfaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb2:	f000 b817 	b.w	800cfe4 <_write_r>

0800cfb6 <__sseek>:
 800cfb6:	b510      	push	{r4, lr}
 800cfb8:	460c      	mov	r4, r1
 800cfba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfbe:	f000 f855 	bl	800d06c <_lseek_r>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	bf15      	itete	ne
 800cfc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfd2:	81a3      	strheq	r3, [r4, #12]
 800cfd4:	bf18      	it	ne
 800cfd6:	81a3      	strhne	r3, [r4, #12]
 800cfd8:	bd10      	pop	{r4, pc}

0800cfda <__sclose>:
 800cfda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfde:	f000 b813 	b.w	800d008 <_close_r>
	...

0800cfe4 <_write_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	4608      	mov	r0, r1
 800cfea:	4611      	mov	r1, r2
 800cfec:	2200      	movs	r2, #0
 800cfee:	4d05      	ldr	r5, [pc, #20]	; (800d004 <_write_r+0x20>)
 800cff0:	602a      	str	r2, [r5, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f7f5 feaa 	bl	8002d4c <_write>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_write_r+0x1e>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_write_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	2000056c 	.word	0x2000056c

0800d008 <_close_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	2300      	movs	r3, #0
 800d00c:	4d05      	ldr	r5, [pc, #20]	; (800d024 <_close_r+0x1c>)
 800d00e:	4604      	mov	r4, r0
 800d010:	4608      	mov	r0, r1
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	f7f5 feb6 	bl	8002d84 <_close>
 800d018:	1c43      	adds	r3, r0, #1
 800d01a:	d102      	bne.n	800d022 <_close_r+0x1a>
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	b103      	cbz	r3, 800d022 <_close_r+0x1a>
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	2000056c 	.word	0x2000056c

0800d028 <_fstat_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	2300      	movs	r3, #0
 800d02c:	4d06      	ldr	r5, [pc, #24]	; (800d048 <_fstat_r+0x20>)
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	4611      	mov	r1, r2
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	f7f5 feb0 	bl	8002d9a <_fstat>
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	d102      	bne.n	800d044 <_fstat_r+0x1c>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b103      	cbz	r3, 800d044 <_fstat_r+0x1c>
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	2000056c 	.word	0x2000056c

0800d04c <_isatty_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	2300      	movs	r3, #0
 800d050:	4d05      	ldr	r5, [pc, #20]	; (800d068 <_isatty_r+0x1c>)
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f5 feae 	bl	8002db8 <_isatty>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_isatty_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_isatty_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	2000056c 	.word	0x2000056c

0800d06c <_lseek_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4604      	mov	r4, r0
 800d070:	4608      	mov	r0, r1
 800d072:	4611      	mov	r1, r2
 800d074:	2200      	movs	r2, #0
 800d076:	4d05      	ldr	r5, [pc, #20]	; (800d08c <_lseek_r+0x20>)
 800d078:	602a      	str	r2, [r5, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f7f5 fea6 	bl	8002dcc <_lseek>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_lseek_r+0x1e>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_lseek_r+0x1e>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	2000056c 	.word	0x2000056c

0800d090 <_read_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4604      	mov	r4, r0
 800d094:	4608      	mov	r0, r1
 800d096:	4611      	mov	r1, r2
 800d098:	2200      	movs	r2, #0
 800d09a:	4d05      	ldr	r5, [pc, #20]	; (800d0b0 <_read_r+0x20>)
 800d09c:	602a      	str	r2, [r5, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f7f5 fe37 	bl	8002d12 <_read>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_read_r+0x1e>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_read_r+0x1e>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	2000056c 	.word	0x2000056c

0800d0b4 <_init>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	bf00      	nop
 800d0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	469e      	mov	lr, r3
 800d0be:	4770      	bx	lr

0800d0c0 <_fini>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr
