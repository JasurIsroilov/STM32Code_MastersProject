
diplom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800ae20  0800ae20  0001ae20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4dc  0800b4dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4dc  0800b4dc  0001b4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e4  0800b4e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4e8  0800b4e8  0001b4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b4ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e4  0800b6d0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800b6d0  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f939  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ff  00000000  00000000  0002fb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00031c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00032750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b22  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddb9  00000000  00000000  0004bcca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008755b  00000000  00000000  00059a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0fde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  000e1034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae04 	.word	0x0800ae04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800ae04 	.word	0x0800ae04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b9d9 	b.w	80013f8 <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f86d 	bl	8001134 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f860 	bl	8001134 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f84f 	bl	8001134 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f841 	bl	8001134 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__aeabi_d2lz>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	460c      	mov	r4, r1
 80010c8:	4605      	mov	r5, r0
 80010ca:	4621      	mov	r1, r4
 80010cc:	4628      	mov	r0, r5
 80010ce:	2200      	movs	r2, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	f7ff fc73 	bl	80009bc <__aeabi_dcmplt>
 80010d6:	b928      	cbnz	r0, 80010e4 <__aeabi_d2lz+0x20>
 80010d8:	4628      	mov	r0, r5
 80010da:	4621      	mov	r1, r4
 80010dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010e0:	f000 b80a 	b.w	80010f8 <__aeabi_d2ulz>
 80010e4:	4628      	mov	r0, r5
 80010e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010ea:	f000 f805 	bl	80010f8 <__aeabi_d2ulz>
 80010ee:	4240      	negs	r0, r0
 80010f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f4:	bd38      	pop	{r3, r4, r5, pc}
 80010f6:	bf00      	nop

080010f8 <__aeabi_d2ulz>:
 80010f8:	b5d0      	push	{r4, r6, r7, lr}
 80010fa:	2200      	movs	r2, #0
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <__aeabi_d2ulz+0x34>)
 80010fe:	4606      	mov	r6, r0
 8001100:	460f      	mov	r7, r1
 8001102:	f7ff f9e9 	bl	80004d8 <__aeabi_dmul>
 8001106:	f7ff fcbf 	bl	8000a88 <__aeabi_d2uiz>
 800110a:	4604      	mov	r4, r0
 800110c:	f7ff f96a 	bl	80003e4 <__aeabi_ui2d>
 8001110:	2200      	movs	r2, #0
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <__aeabi_d2ulz+0x38>)
 8001114:	f7ff f9e0 	bl	80004d8 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4630      	mov	r0, r6
 800111e:	4639      	mov	r1, r7
 8001120:	f7ff f822 	bl	8000168 <__aeabi_dsub>
 8001124:	f7ff fcb0 	bl	8000a88 <__aeabi_d2uiz>
 8001128:	4621      	mov	r1, r4
 800112a:	bdd0      	pop	{r4, r6, r7, pc}
 800112c:	3df00000 	.word	0x3df00000
 8001130:	41f00000 	.word	0x41f00000

08001134 <__udivmoddi4>:
 8001134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001138:	9e08      	ldr	r6, [sp, #32]
 800113a:	460d      	mov	r5, r1
 800113c:	4604      	mov	r4, r0
 800113e:	468e      	mov	lr, r1
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 8083 	bne.w	800124c <__udivmoddi4+0x118>
 8001146:	428a      	cmp	r2, r1
 8001148:	4617      	mov	r7, r2
 800114a:	d947      	bls.n	80011dc <__udivmoddi4+0xa8>
 800114c:	fab2 f382 	clz	r3, r2
 8001150:	b14b      	cbz	r3, 8001166 <__udivmoddi4+0x32>
 8001152:	f1c3 0120 	rsb	r1, r3, #32
 8001156:	fa05 fe03 	lsl.w	lr, r5, r3
 800115a:	fa20 f101 	lsr.w	r1, r0, r1
 800115e:	409f      	lsls	r7, r3
 8001160:	ea41 0e0e 	orr.w	lr, r1, lr
 8001164:	409c      	lsls	r4, r3
 8001166:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800116a:	fbbe fcf8 	udiv	ip, lr, r8
 800116e:	fa1f f987 	uxth.w	r9, r7
 8001172:	fb08 e21c 	mls	r2, r8, ip, lr
 8001176:	fb0c f009 	mul.w	r0, ip, r9
 800117a:	0c21      	lsrs	r1, r4, #16
 800117c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001180:	4290      	cmp	r0, r2
 8001182:	d90a      	bls.n	800119a <__udivmoddi4+0x66>
 8001184:	18ba      	adds	r2, r7, r2
 8001186:	f10c 31ff 	add.w	r1, ip, #4294967295
 800118a:	f080 8118 	bcs.w	80013be <__udivmoddi4+0x28a>
 800118e:	4290      	cmp	r0, r2
 8001190:	f240 8115 	bls.w	80013be <__udivmoddi4+0x28a>
 8001194:	f1ac 0c02 	sub.w	ip, ip, #2
 8001198:	443a      	add	r2, r7
 800119a:	1a12      	subs	r2, r2, r0
 800119c:	fbb2 f0f8 	udiv	r0, r2, r8
 80011a0:	fb08 2210 	mls	r2, r8, r0, r2
 80011a4:	fb00 f109 	mul.w	r1, r0, r9
 80011a8:	b2a4      	uxth	r4, r4
 80011aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ae:	42a1      	cmp	r1, r4
 80011b0:	d909      	bls.n	80011c6 <__udivmoddi4+0x92>
 80011b2:	193c      	adds	r4, r7, r4
 80011b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80011b8:	f080 8103 	bcs.w	80013c2 <__udivmoddi4+0x28e>
 80011bc:	42a1      	cmp	r1, r4
 80011be:	f240 8100 	bls.w	80013c2 <__udivmoddi4+0x28e>
 80011c2:	3802      	subs	r0, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	1a64      	subs	r4, r4, r1
 80011c8:	2100      	movs	r1, #0
 80011ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011ce:	b11e      	cbz	r6, 80011d8 <__udivmoddi4+0xa4>
 80011d0:	2200      	movs	r2, #0
 80011d2:	40dc      	lsrs	r4, r3
 80011d4:	e9c6 4200 	strd	r4, r2, [r6]
 80011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011dc:	b902      	cbnz	r2, 80011e0 <__udivmoddi4+0xac>
 80011de:	deff      	udf	#255	; 0xff
 80011e0:	fab2 f382 	clz	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d14f      	bne.n	8001288 <__udivmoddi4+0x154>
 80011e8:	1a8d      	subs	r5, r1, r2
 80011ea:	2101      	movs	r1, #1
 80011ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011f0:	fa1f f882 	uxth.w	r8, r2
 80011f4:	fbb5 fcfe 	udiv	ip, r5, lr
 80011f8:	fb0e 551c 	mls	r5, lr, ip, r5
 80011fc:	fb08 f00c 	mul.w	r0, r8, ip
 8001200:	0c22      	lsrs	r2, r4, #16
 8001202:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001206:	42a8      	cmp	r0, r5
 8001208:	d907      	bls.n	800121a <__udivmoddi4+0xe6>
 800120a:	197d      	adds	r5, r7, r5
 800120c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001210:	d202      	bcs.n	8001218 <__udivmoddi4+0xe4>
 8001212:	42a8      	cmp	r0, r5
 8001214:	f200 80e9 	bhi.w	80013ea <__udivmoddi4+0x2b6>
 8001218:	4694      	mov	ip, r2
 800121a:	1a2d      	subs	r5, r5, r0
 800121c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001220:	fb0e 5510 	mls	r5, lr, r0, r5
 8001224:	fb08 f800 	mul.w	r8, r8, r0
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800122e:	45a0      	cmp	r8, r4
 8001230:	d907      	bls.n	8001242 <__udivmoddi4+0x10e>
 8001232:	193c      	adds	r4, r7, r4
 8001234:	f100 32ff 	add.w	r2, r0, #4294967295
 8001238:	d202      	bcs.n	8001240 <__udivmoddi4+0x10c>
 800123a:	45a0      	cmp	r8, r4
 800123c:	f200 80d9 	bhi.w	80013f2 <__udivmoddi4+0x2be>
 8001240:	4610      	mov	r0, r2
 8001242:	eba4 0408 	sub.w	r4, r4, r8
 8001246:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800124a:	e7c0      	b.n	80011ce <__udivmoddi4+0x9a>
 800124c:	428b      	cmp	r3, r1
 800124e:	d908      	bls.n	8001262 <__udivmoddi4+0x12e>
 8001250:	2e00      	cmp	r6, #0
 8001252:	f000 80b1 	beq.w	80013b8 <__udivmoddi4+0x284>
 8001256:	2100      	movs	r1, #0
 8001258:	e9c6 0500 	strd	r0, r5, [r6]
 800125c:	4608      	mov	r0, r1
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	fab3 f183 	clz	r1, r3
 8001266:	2900      	cmp	r1, #0
 8001268:	d14b      	bne.n	8001302 <__udivmoddi4+0x1ce>
 800126a:	42ab      	cmp	r3, r5
 800126c:	d302      	bcc.n	8001274 <__udivmoddi4+0x140>
 800126e:	4282      	cmp	r2, r0
 8001270:	f200 80b9 	bhi.w	80013e6 <__udivmoddi4+0x2b2>
 8001274:	1a84      	subs	r4, r0, r2
 8001276:	eb65 0303 	sbc.w	r3, r5, r3
 800127a:	2001      	movs	r0, #1
 800127c:	469e      	mov	lr, r3
 800127e:	2e00      	cmp	r6, #0
 8001280:	d0aa      	beq.n	80011d8 <__udivmoddi4+0xa4>
 8001282:	e9c6 4e00 	strd	r4, lr, [r6]
 8001286:	e7a7      	b.n	80011d8 <__udivmoddi4+0xa4>
 8001288:	409f      	lsls	r7, r3
 800128a:	f1c3 0220 	rsb	r2, r3, #32
 800128e:	40d1      	lsrs	r1, r2
 8001290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001294:	fbb1 f0fe 	udiv	r0, r1, lr
 8001298:	fa1f f887 	uxth.w	r8, r7
 800129c:	fb0e 1110 	mls	r1, lr, r0, r1
 80012a0:	fa24 f202 	lsr.w	r2, r4, r2
 80012a4:	409d      	lsls	r5, r3
 80012a6:	fb00 fc08 	mul.w	ip, r0, r8
 80012aa:	432a      	orrs	r2, r5
 80012ac:	0c15      	lsrs	r5, r2, #16
 80012ae:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012b2:	45ac      	cmp	ip, r5
 80012b4:	fa04 f403 	lsl.w	r4, r4, r3
 80012b8:	d909      	bls.n	80012ce <__udivmoddi4+0x19a>
 80012ba:	197d      	adds	r5, r7, r5
 80012bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80012c0:	f080 808f 	bcs.w	80013e2 <__udivmoddi4+0x2ae>
 80012c4:	45ac      	cmp	ip, r5
 80012c6:	f240 808c 	bls.w	80013e2 <__udivmoddi4+0x2ae>
 80012ca:	3802      	subs	r0, #2
 80012cc:	443d      	add	r5, r7
 80012ce:	eba5 050c 	sub.w	r5, r5, ip
 80012d2:	fbb5 f1fe 	udiv	r1, r5, lr
 80012d6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012da:	fb01 f908 	mul.w	r9, r1, r8
 80012de:	b295      	uxth	r5, r2
 80012e0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012e4:	45a9      	cmp	r9, r5
 80012e6:	d907      	bls.n	80012f8 <__udivmoddi4+0x1c4>
 80012e8:	197d      	adds	r5, r7, r5
 80012ea:	f101 32ff 	add.w	r2, r1, #4294967295
 80012ee:	d274      	bcs.n	80013da <__udivmoddi4+0x2a6>
 80012f0:	45a9      	cmp	r9, r5
 80012f2:	d972      	bls.n	80013da <__udivmoddi4+0x2a6>
 80012f4:	3902      	subs	r1, #2
 80012f6:	443d      	add	r5, r7
 80012f8:	eba5 0509 	sub.w	r5, r5, r9
 80012fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001300:	e778      	b.n	80011f4 <__udivmoddi4+0xc0>
 8001302:	f1c1 0720 	rsb	r7, r1, #32
 8001306:	408b      	lsls	r3, r1
 8001308:	fa22 fc07 	lsr.w	ip, r2, r7
 800130c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001310:	fa25 f407 	lsr.w	r4, r5, r7
 8001314:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001318:	fbb4 f9fe 	udiv	r9, r4, lr
 800131c:	fa1f f88c 	uxth.w	r8, ip
 8001320:	fb0e 4419 	mls	r4, lr, r9, r4
 8001324:	fa20 f307 	lsr.w	r3, r0, r7
 8001328:	fb09 fa08 	mul.w	sl, r9, r8
 800132c:	408d      	lsls	r5, r1
 800132e:	431d      	orrs	r5, r3
 8001330:	0c2b      	lsrs	r3, r5, #16
 8001332:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001336:	45a2      	cmp	sl, r4
 8001338:	fa02 f201 	lsl.w	r2, r2, r1
 800133c:	fa00 f301 	lsl.w	r3, r0, r1
 8001340:	d909      	bls.n	8001356 <__udivmoddi4+0x222>
 8001342:	eb1c 0404 	adds.w	r4, ip, r4
 8001346:	f109 30ff 	add.w	r0, r9, #4294967295
 800134a:	d248      	bcs.n	80013de <__udivmoddi4+0x2aa>
 800134c:	45a2      	cmp	sl, r4
 800134e:	d946      	bls.n	80013de <__udivmoddi4+0x2aa>
 8001350:	f1a9 0902 	sub.w	r9, r9, #2
 8001354:	4464      	add	r4, ip
 8001356:	eba4 040a 	sub.w	r4, r4, sl
 800135a:	fbb4 f0fe 	udiv	r0, r4, lr
 800135e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001362:	fb00 fa08 	mul.w	sl, r0, r8
 8001366:	b2ad      	uxth	r5, r5
 8001368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800136c:	45a2      	cmp	sl, r4
 800136e:	d908      	bls.n	8001382 <__udivmoddi4+0x24e>
 8001370:	eb1c 0404 	adds.w	r4, ip, r4
 8001374:	f100 35ff 	add.w	r5, r0, #4294967295
 8001378:	d22d      	bcs.n	80013d6 <__udivmoddi4+0x2a2>
 800137a:	45a2      	cmp	sl, r4
 800137c:	d92b      	bls.n	80013d6 <__udivmoddi4+0x2a2>
 800137e:	3802      	subs	r0, #2
 8001380:	4464      	add	r4, ip
 8001382:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001386:	fba0 8902 	umull	r8, r9, r0, r2
 800138a:	eba4 040a 	sub.w	r4, r4, sl
 800138e:	454c      	cmp	r4, r9
 8001390:	46c6      	mov	lr, r8
 8001392:	464d      	mov	r5, r9
 8001394:	d319      	bcc.n	80013ca <__udivmoddi4+0x296>
 8001396:	d016      	beq.n	80013c6 <__udivmoddi4+0x292>
 8001398:	b15e      	cbz	r6, 80013b2 <__udivmoddi4+0x27e>
 800139a:	ebb3 020e 	subs.w	r2, r3, lr
 800139e:	eb64 0405 	sbc.w	r4, r4, r5
 80013a2:	fa04 f707 	lsl.w	r7, r4, r7
 80013a6:	fa22 f301 	lsr.w	r3, r2, r1
 80013aa:	431f      	orrs	r7, r3
 80013ac:	40cc      	lsrs	r4, r1
 80013ae:	e9c6 7400 	strd	r7, r4, [r6]
 80013b2:	2100      	movs	r1, #0
 80013b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b8:	4631      	mov	r1, r6
 80013ba:	4630      	mov	r0, r6
 80013bc:	e70c      	b.n	80011d8 <__udivmoddi4+0xa4>
 80013be:	468c      	mov	ip, r1
 80013c0:	e6eb      	b.n	800119a <__udivmoddi4+0x66>
 80013c2:	4610      	mov	r0, r2
 80013c4:	e6ff      	b.n	80011c6 <__udivmoddi4+0x92>
 80013c6:	4543      	cmp	r3, r8
 80013c8:	d2e6      	bcs.n	8001398 <__udivmoddi4+0x264>
 80013ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80013ce:	eb69 050c 	sbc.w	r5, r9, ip
 80013d2:	3801      	subs	r0, #1
 80013d4:	e7e0      	b.n	8001398 <__udivmoddi4+0x264>
 80013d6:	4628      	mov	r0, r5
 80013d8:	e7d3      	b.n	8001382 <__udivmoddi4+0x24e>
 80013da:	4611      	mov	r1, r2
 80013dc:	e78c      	b.n	80012f8 <__udivmoddi4+0x1c4>
 80013de:	4681      	mov	r9, r0
 80013e0:	e7b9      	b.n	8001356 <__udivmoddi4+0x222>
 80013e2:	4608      	mov	r0, r1
 80013e4:	e773      	b.n	80012ce <__udivmoddi4+0x19a>
 80013e6:	4608      	mov	r0, r1
 80013e8:	e749      	b.n	800127e <__udivmoddi4+0x14a>
 80013ea:	f1ac 0c02 	sub.w	ip, ip, #2
 80013ee:	443d      	add	r5, r7
 80013f0:	e713      	b.n	800121a <__udivmoddi4+0xe6>
 80013f2:	3802      	subs	r0, #2
 80013f4:	443c      	add	r4, r7
 80013f6:	e724      	b.n	8001242 <__udivmoddi4+0x10e>

080013f8 <__aeabi_idiv0>:
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <_AHT10_Error>:
//------------------------------------------------------------
uint8_t AHT10_TmpHum_Cmd[3] = {0xAC, 0x33, 0x00};
//------------------------------------------------------------

void _AHT10_Error()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	sprintf(str1, "AHT10 error\n");
 8001400:	4908      	ldr	r1, [pc, #32]	; (8001424 <_AHT10_Error+0x28>)
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <_AHT10_Error+0x2c>)
 8001404:	f005 ff6e 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <_AHT10_Error+0x2c>)
 800140a:	f7fe fea1 	bl	8000150 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	4904      	ldr	r1, [pc, #16]	; (8001428 <_AHT10_Error+0x2c>)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <_AHT10_Error+0x30>)
 800141a:	f004 ff3b 	bl	8006294 <HAL_UART_Transmit>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	0800ae20 	.word	0x0800ae20
 8001428:	200002e4 	.word	0x200002e4
 800142c:	20000348 	.word	0x20000348

08001430 <_AHT10_TriggerMeasurements>:

void _AHT10_TriggerMeasurements()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Master_Transmit_IT(&hi2c1, AHT10_ADDRESS, (uint8_t *) AHT10_TmpHum_Cmd, 3);
 800143a:	2303      	movs	r3, #3
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <_AHT10_TriggerMeasurements+0x2c>)
 800143e:	2170      	movs	r1, #112	; 0x70
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <_AHT10_TriggerMeasurements+0x30>)
 8001442:	f001 fea7 	bl	8003194 <HAL_I2C_Master_Transmit_IT>
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK) _AHT10_Error();
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <_AHT10_TriggerMeasurements+0x24>
 8001450:	f7ff ffd4 	bl	80013fc <_AHT10_Error>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000238 	.word	0x20000238

08001464 <_AHT10_ReadRaw>:

void _AHT10_ReadRaw()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Master_Receive_IT(&hi2c1, AHT10_ADDRESS, (uint8_t *) AHT10_DataStruct.RX_Data, 6);
 800146e:	2306      	movs	r3, #6
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <_AHT10_ReadRaw+0x2c>)
 8001472:	2170      	movs	r1, #112	; 0x70
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <_AHT10_ReadRaw+0x30>)
 8001476:	f001 ff2d 	bl	80032d4 <HAL_I2C_Master_Receive_IT>
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK) _AHT10_Error();
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <_AHT10_ReadRaw+0x24>
 8001484:	f7ff ffba 	bl	80013fc <_AHT10_Error>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000218 	.word	0x20000218
 8001494:	20000238 	.word	0x20000238

08001498 <_AHT10_RawToHoomanVals>:

void _AHT10_RawToHoomanVals()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	AHT10_DataStruct.ADC_Raw = (((uint32_t)AHT10_DataStruct.RX_Data[3] & 15) << 16) |
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 800149e:	7bdb      	ldrb	r3, [r3, #15]
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
			((uint32_t)AHT10_DataStruct.RX_Data[4] << 8) | AHT10_DataStruct.RX_Data[5];
 80014a6:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 80014a8:	7c1b      	ldrb	r3, [r3, #16]
 80014aa:	021b      	lsls	r3, r3, #8
	AHT10_DataStruct.ADC_Raw = (((uint32_t)AHT10_DataStruct.RX_Data[3] & 15) << 16) |
 80014ac:	4313      	orrs	r3, r2
			((uint32_t)AHT10_DataStruct.RX_Data[4] << 8) | AHT10_DataStruct.RX_Data[5];
 80014ae:	4a29      	ldr	r2, [pc, #164]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 80014b0:	7c52      	ldrb	r2, [r2, #17]
 80014b2:	4313      	orrs	r3, r2
	AHT10_DataStruct.ADC_Raw = (((uint32_t)AHT10_DataStruct.RX_Data[3] & 15) << 16) |
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 80014b6:	6013      	str	r3, [r2, #0]
	AHT10_DataStruct.Temperature = (float)(AHT10_DataStruct.ADC_Raw * 200.00 / 1048576.00) - 50.00;
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ff91 	bl	80003e4 <__aeabi_ui2d>
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <_AHT10_RawToHoomanVals+0xc0>)
 80014c8:	f7ff f806 	bl	80004d8 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <_AHT10_RawToHoomanVals+0xc4>)
 80014da:	f7ff f927 	bl	800072c <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff faef 	bl	8000ac8 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	491c      	ldr	r1, [pc, #112]	; (8001560 <_AHT10_RawToHoomanVals+0xc8>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fb3e 	bl	8000b70 <__aeabi_fsub>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 80014fa:	605a      	str	r2, [r3, #4]

	AHT10_DataStruct.ADC_Raw = ((uint32_t)AHT10_DataStruct.RX_Data[1] << 12) |
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 80014fe:	7b5b      	ldrb	r3, [r3, #13]
 8001500:	031a      	lsls	r2, r3, #12
			((uint32_t)AHT10_DataStruct.RX_Data[2] << 4) | (AHT10_DataStruct.RX_Data[3] >> 4);
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 8001504:	7b9b      	ldrb	r3, [r3, #14]
 8001506:	011b      	lsls	r3, r3, #4
	AHT10_DataStruct.ADC_Raw = ((uint32_t)AHT10_DataStruct.RX_Data[1] << 12) |
 8001508:	4313      	orrs	r3, r2
			((uint32_t)AHT10_DataStruct.RX_Data[2] << 4) | (AHT10_DataStruct.RX_Data[3] >> 4);
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 800150c:	7bd2      	ldrb	r2, [r2, #15]
 800150e:	0912      	lsrs	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	4313      	orrs	r3, r2
	AHT10_DataStruct.ADC_Raw = ((uint32_t)AHT10_DataStruct.RX_Data[1] << 12) |
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 8001516:	6013      	str	r3, [r2, #0]
	AHT10_DataStruct.Moisture = (float)(AHT10_DataStruct.ADC_Raw*100.00/1048576.00);
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff61 	bl	80003e4 <__aeabi_ui2d>
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <_AHT10_RawToHoomanVals+0xcc>)
 8001528:	f7fe ffd6 	bl	80004d8 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_AHT10_RawToHoomanVals+0xc4>)
 800153a:	f7ff f8f7 	bl	800072c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fabf 	bl	8000ac8 <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	4a01      	ldr	r2, [pc, #4]	; (8001554 <_AHT10_RawToHoomanVals+0xbc>)
 800154e:	6093      	str	r3, [r2, #8]
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000020c 	.word	0x2000020c
 8001558:	40690000 	.word	0x40690000
 800155c:	41300000 	.word	0x41300000
 8001560:	42480000 	.word	0x42480000
 8001564:	40590000 	.word	0x40590000

08001568 <AHT10_Measure>:

void AHT10_Measure()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	  _AHT10_TriggerMeasurements();
 800156c:	f7ff ff60 	bl	8001430 <_AHT10_TriggerMeasurements>
	  HAL_Delay(1000);
 8001570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001574:	f001 f940 	bl	80027f8 <HAL_Delay>
	  _AHT10_ReadRaw();
 8001578:	f7ff ff74 	bl	8001464 <_AHT10_ReadRaw>
	  if(~AHT10_DataStruct.RX_Data[0] & 0x80) _AHT10_RawToHoomanVals();
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <AHT10_Measure+0x28>)
 800157e:	7b1b      	ldrb	r3, [r3, #12]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	db01      	blt.n	800158a <AHT10_Measure+0x22>
 8001586:	f7ff ff87 	bl	8001498 <_AHT10_RawToHoomanVals>
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000020c 	.word	0x2000020c

08001594 <_BMP280_Error>:
BMP280_CalibrationData _CalibrationData;
int32_t temper_int;
//------------------------------------------------------------

void _BMP280_Error(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	sprintf(str1, "BMP280 error\n");
 8001598:	4908      	ldr	r1, [pc, #32]	; (80015bc <_BMP280_Error+0x28>)
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <_BMP280_Error+0x2c>)
 800159c:	f005 fea2 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 80015a0:	4807      	ldr	r0, [pc, #28]	; (80015c0 <_BMP280_Error+0x2c>)
 80015a2:	f7fe fdd5 	bl	8000150 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	4904      	ldr	r1, [pc, #16]	; (80015c0 <_BMP280_Error+0x2c>)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <_BMP280_Error+0x30>)
 80015b2:	f004 fe6f 	bl	8006294 <HAL_UART_Transmit>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800ae30 	.word	0x0800ae30
 80015c0:	200002e4 	.word	0x200002e4
 80015c4:	20000348 	.word	0x20000348

080015c8 <_BMP280_I2Cx_WriteData>:

//------------------------------------------------------------
uint8_t _BMP280_I2Cx_WriteData(uint16_t addr, uint8_t reg, uint8_t value)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af04      	add	r7, sp, #16
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	460b      	mov	r3, r1
 80015d4:	717b      	strb	r3, [r7, #5]
 80015d6:	4613      	mov	r3, r2
 80015d8:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c2, addr, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80015de:	797b      	ldrb	r3, [r7, #5]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	88f9      	ldrh	r1, [r7, #6]
 80015e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <_BMP280_I2Cx_WriteData+0x4c>)
 80015f6:	f001 ff15 	bl	8003424 <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <_BMP280_I2Cx_WriteData+0x40>
 8001604:	f7ff ffc6 	bl	8001594 <_BMP280_Error>
	return value;
 8001608:	793b      	ldrb	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000028c 	.word	0x2000028c

08001618 <_BMP280_I2Cx_ReadData>:

uint8_t _BMP280_I2Cx_ReadData(uint16_t addr, uint8_t reg)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af04      	add	r7, sp, #16
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	4613      	mov	r3, r2
 8001626:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001630:	797b      	ldrb	r3, [r7, #5]
 8001632:	b29a      	uxth	r2, r3
 8001634:	88f9      	ldrh	r1, [r7, #6]
 8001636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	2301      	movs	r3, #1
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	f107 030e 	add.w	r3, r7, #14
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2301      	movs	r3, #1
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <_BMP280_I2Cx_ReadData+0x50>)
 800164a:	f001 ffe5 	bl	8003618 <HAL_I2C_Mem_Read>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <_BMP280_I2Cx_ReadData+0x44>
 8001658:	f7ff ff9c 	bl	8001594 <_BMP280_Error>
	return value;
 800165c:	7bbb      	ldrb	r3, [r7, #14]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000028c 	.word	0x2000028c

0800166c <_BMP280_I2Cx_ReadData16>:

void _BMP280_I2Cx_ReadData16(uint16_t addr, uint8_t reg, uint16_t *value)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af04      	add	r7, sp, #16
 8001672:	4603      	mov	r3, r0
 8001674:	603a      	str	r2, [r7, #0]
 8001676:	80fb      	strh	r3, [r7, #6]
 8001678:	460b      	mov	r3, r1
 800167a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)value, 2, 0x10000);
 8001680:	797b      	ldrb	r3, [r7, #5]
 8001682:	b29a      	uxth	r2, r3
 8001684:	88f9      	ldrh	r1, [r7, #6]
 8001686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	2302      	movs	r3, #2
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2301      	movs	r3, #1
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <_BMP280_I2Cx_ReadData16+0x48>)
 8001698:	f001 ffbe 	bl	8003618 <HAL_I2C_Mem_Read>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <_BMP280_I2Cx_ReadData16+0x3e>
 80016a6:	f7ff ff75 	bl	8001594 <_BMP280_Error>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000028c 	.word	0x2000028c

080016b8 <_BMP280_I2Cx_ReadData24>:

void _BMP280_I2Cx_ReadData24(uint16_t addr, uint8_t reg, uint32_t *value)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af04      	add	r7, sp, #16
 80016be:	4603      	mov	r3, r0
 80016c0:	603a      	str	r2, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]
 80016c4:	460b      	mov	r3, r1
 80016c6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c2, addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)value, 3, 0x10000);
 80016cc:	797b      	ldrb	r3, [r7, #5]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	88f9      	ldrh	r1, [r7, #6]
 80016d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2303      	movs	r3, #3
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <_BMP280_I2Cx_ReadData24+0x48>)
 80016e4:	f001 ff98 	bl	8003618 <HAL_I2C_Mem_Read>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) _BMP280_Error();
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_BMP280_I2Cx_ReadData24+0x3e>
 80016f2:	f7ff ff4f 	bl	8001594 <_BMP280_Error>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000028c 	.word	0x2000028c

08001704 <_BMP280_WriteReg>:

void _BMP280_WriteReg(uint8_t reg, uint8_t value)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
	_BMP280_I2Cx_WriteData(BMP280_ADDRESS, reg, value);
 8001714:	79ba      	ldrb	r2, [r7, #6]
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4619      	mov	r1, r3
 800171a:	20ec      	movs	r0, #236	; 0xec
 800171c:	f7ff ff54 	bl	80015c8 <_BMP280_I2Cx_WriteData>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_BMP280_ReadReg>:

//------------------------------------------------------------

uint8_t _BMP280_ReadReg(uint8_t reg)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	uint8_t res = _BMP280_I2Cx_ReadData(BMP280_ADDRESS, reg);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4619      	mov	r1, r3
 8001736:	20ec      	movs	r0, #236	; 0xec
 8001738:	f7ff ff6e 	bl	8001618 <_BMP280_I2Cx_ReadData>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]
	return res;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_BMP280_ReadStatus>:

uint8_t _BMP280_ReadStatus(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
	uint8_t res = _BMP280_ReadReg(BMP280_REGISTER_STATUS) & 0x09;
 8001750:	20f3      	movs	r0, #243	; 0xf3
 8001752:	f7ff ffe9 	bl	8001728 <_BMP280_ReadReg>
 8001756:	4603      	mov	r3, r0
 8001758:	f003 0309 	and.w	r3, r3, #9
 800175c:	71fb      	strb	r3, [r7, #7]
	return res;
 800175e:	79fb      	ldrb	r3, [r7, #7]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_BMP280_ReadReg_U16>:

//------------------------------------------------------------

void _BMP280_ReadReg_U16(uint8_t reg, uint16_t *value)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
	_BMP280_I2Cx_ReadData16(BMP280_ADDRESS, reg, value);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	20ec      	movs	r0, #236	; 0xec
 800177c:	f7ff ff76 	bl	800166c <_BMP280_I2Cx_ReadData16>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_BMP280_ReadReg_S16>:

void _BMP280_ReadReg_S16(uint8_t reg, int16_t *value)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
	_BMP280_I2Cx_ReadData16(BMP280_ADDRESS, reg, (uint16_t*) value);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	20ec      	movs	r0, #236	; 0xec
 800179c:	f7ff ff66 	bl	800166c <_BMP280_I2Cx_ReadData16>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_BMP280_ReadReg_BE_U24>:
	_BMP280_I2Cx_ReadData24(BMP280_ADDRESS, reg, value);
	*(uint32_t *) value &= 0x00FFFFFF;
}

void _BMP280_ReadReg_BE_U24(uint8_t reg, uint32_t *value)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  _BMP280_I2Cx_ReadData24(BMP280_ADDRESS, reg, value);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	20ec      	movs	r0, #236	; 0xec
 80017bc:	f7ff ff7c 	bl	80016b8 <_BMP280_I2Cx_ReadData24>
  *(uint32_t *) value = be24toword(*(uint32_t *) value) & 0x00FFFFFF;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017d0:	431a      	orrs	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017dc:	4313      	orrs	r3, r2
 80017de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <_BMP280_ReadCoefficients>:

//------------------------------------------------------------

void _BMP280_ReadCoefficients(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  _BMP280_ReadReg_U16(BMP280_REGISTER_DIG_P1, &_CalibrationData.dig_P1);
 80017f4:	4912      	ldr	r1, [pc, #72]	; (8001840 <_BMP280_ReadCoefficients+0x50>)
 80017f6:	208e      	movs	r0, #142	; 0x8e
 80017f8:	f7ff ffb6 	bl	8001768 <_BMP280_ReadReg_U16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P2, &_CalibrationData.dig_P2);
 80017fc:	4911      	ldr	r1, [pc, #68]	; (8001844 <_BMP280_ReadCoefficients+0x54>)
 80017fe:	2090      	movs	r0, #144	; 0x90
 8001800:	f7ff ffc2 	bl	8001788 <_BMP280_ReadReg_S16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P3, &_CalibrationData.dig_P3);
 8001804:	4910      	ldr	r1, [pc, #64]	; (8001848 <_BMP280_ReadCoefficients+0x58>)
 8001806:	2092      	movs	r0, #146	; 0x92
 8001808:	f7ff ffbe 	bl	8001788 <_BMP280_ReadReg_S16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P4, &_CalibrationData.dig_P4);
 800180c:	490f      	ldr	r1, [pc, #60]	; (800184c <_BMP280_ReadCoefficients+0x5c>)
 800180e:	2094      	movs	r0, #148	; 0x94
 8001810:	f7ff ffba 	bl	8001788 <_BMP280_ReadReg_S16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P5, &_CalibrationData.dig_P5);
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <_BMP280_ReadCoefficients+0x60>)
 8001816:	2096      	movs	r0, #150	; 0x96
 8001818:	f7ff ffb6 	bl	8001788 <_BMP280_ReadReg_S16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P6, &_CalibrationData.dig_P6);
 800181c:	490d      	ldr	r1, [pc, #52]	; (8001854 <_BMP280_ReadCoefficients+0x64>)
 800181e:	2098      	movs	r0, #152	; 0x98
 8001820:	f7ff ffb2 	bl	8001788 <_BMP280_ReadReg_S16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P7, &_CalibrationData.dig_P7);
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <_BMP280_ReadCoefficients+0x68>)
 8001826:	209a      	movs	r0, #154	; 0x9a
 8001828:	f7ff ffae 	bl	8001788 <_BMP280_ReadReg_S16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P8, &_CalibrationData.dig_P8);
 800182c:	490b      	ldr	r1, [pc, #44]	; (800185c <_BMP280_ReadCoefficients+0x6c>)
 800182e:	209c      	movs	r0, #156	; 0x9c
 8001830:	f7ff ffaa 	bl	8001788 <_BMP280_ReadReg_S16>

  _BMP280_ReadReg_S16(BMP280_REGISTER_DIG_P9, &_CalibrationData.dig_P9);
 8001834:	490a      	ldr	r1, [pc, #40]	; (8001860 <_BMP280_ReadCoefficients+0x70>)
 8001836:	209e      	movs	r0, #158	; 0x9e
 8001838:	f7ff ffa6 	bl	8001788 <_BMP280_ReadReg_S16>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000224 	.word	0x20000224
 8001844:	20000226 	.word	0x20000226
 8001848:	20000228 	.word	0x20000228
 800184c:	2000022a 	.word	0x2000022a
 8001850:	2000022c 	.word	0x2000022c
 8001854:	2000022e 	.word	0x2000022e
 8001858:	20000230 	.word	0x20000230
 800185c:	20000232 	.word	0x20000232
 8001860:	20000234 	.word	0x20000234

08001864 <_BMP280_SetStandby>:

//------------------------------------------------------------

void _BMP280_SetStandby(uint8_t tsb) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = _BMP280_ReadReg(BMP280_REG_CONFIG) & ~BMP280_STBY_MSK;
 800186e:	20f5      	movs	r0, #245	; 0xf5
 8001870:	f7ff ff5a 	bl	8001728 <_BMP280_ReadReg>
 8001874:	4603      	mov	r3, r0
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	73fb      	strb	r3, [r7, #15]
	reg |= tsb & BMP280_STBY_MSK;
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	f023 031f 	bic.w	r3, r3, #31
 8001884:	b25a      	sxtb	r2, r3
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4313      	orrs	r3, r2
 800188c:	b25b      	sxtb	r3, r3
 800188e:	73fb      	strb	r3, [r7, #15]
	_BMP280_WriteReg(BMP280_REG_CONFIG, reg);
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	4619      	mov	r1, r3
 8001894:	20f5      	movs	r0, #245	; 0xf5
 8001896:	f7ff ff35 	bl	8001704 <_BMP280_WriteReg>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_BMP280_SetFilter>:

//------------------------------------------------------------

void _BMP280_SetFilter(uint8_t filter) {
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = _BMP280_ReadReg(BMP280_REG_CONFIG) & ~BMP280_FILTER_MSK;
 80018ac:	20f5      	movs	r0, #245	; 0xf5
 80018ae:	f7ff ff3b 	bl	8001728 <_BMP280_ReadReg>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f023 031c 	bic.w	r3, r3, #28
 80018b8:	73fb      	strb	r3, [r7, #15]
	reg |= filter & BMP280_FILTER_MSK;
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	f003 031c 	and.w	r3, r3, #28
 80018c2:	b25a      	sxtb	r2, r3
 80018c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	73fb      	strb	r3, [r7, #15]
	_BMP280_WriteReg(BMP280_REG_CONFIG, reg);
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	4619      	mov	r1, r3
 80018d2:	20f5      	movs	r0, #245	; 0xf5
 80018d4:	f7ff ff16 	bl	8001704 <_BMP280_WriteReg>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_BMP280_SetOversamplingPressure>:

//------------------------------------------------------------

void _BMP280_SetOversamplingPressure(uint8_t osrs)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg = _BMP280_ReadReg(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_P_MSK;
 80018ea:	20f4      	movs	r0, #244	; 0xf4
 80018ec:	f7ff ff1c 	bl	8001728 <_BMP280_ReadReg>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f023 031c 	bic.w	r3, r3, #28
 80018f6:	73fb      	strb	r3, [r7, #15]
	reg |= osrs & BMP280_OSRS_P_MSK;
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	f003 031c 	and.w	r3, r3, #28
 8001900:	b25a      	sxtb	r2, r3
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4313      	orrs	r3, r2
 8001908:	b25b      	sxtb	r3, r3
 800190a:	73fb      	strb	r3, [r7, #15]
	_BMP280_WriteReg(BMP280_REG_CTRL_MEAS, reg);
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	4619      	mov	r1, r3
 8001910:	20f4      	movs	r0, #244	; 0xf4
 8001912:	f7ff fef7 	bl	8001704 <_BMP280_WriteReg>
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_BMP280_SetMode>:

//------------------------------------------------------------

void _BMP280_SetMode(uint8_t mode)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = _BMP280_ReadReg(BMP280_REG_CTRL_MEAS) & ~BMP280_MODE_MSK;
 8001928:	20f4      	movs	r0, #244	; 0xf4
 800192a:	f7ff fefd 	bl	8001728 <_BMP280_ReadReg>
 800192e:	4603      	mov	r3, r0
 8001930:	f023 0303 	bic.w	r3, r3, #3
 8001934:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BMP280_MODE_MSK;
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	b25a      	sxtb	r2, r3
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	4313      	orrs	r3, r2
 8001946:	b25b      	sxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
  _BMP280_WriteReg(BMP280_REG_CTRL_MEAS, reg);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	4619      	mov	r1, r3
 800194e:	20f4      	movs	r0, #244	; 0xf4
 8001950:	f7ff fed8 	bl	8001704 <_BMP280_WriteReg>
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <BMP280_ReadPressure>:

//------------------------------------------------------------

float BMP280_ReadPressure(void)
{
 800195c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001960:	b09e      	sub	sp, #120	; 0x78
 8001962:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t press_raw, pres_int;
  int64_t val1, val2, p;

  _BMP280_ReadReg_BE_U24(BMP280_REGISTER_PRESSUREDATA, &press_raw);
 800196a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800196e:	4619      	mov	r1, r3
 8001970:	20f7      	movs	r0, #247	; 0xf7
 8001972:	f7ff ff19 	bl	80017a8 <_BMP280_ReadReg_BE_U24>
  press_raw >>= 4;
 8001976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	653b      	str	r3, [r7, #80]	; 0x50
  val1 = ((int64_t) temper_int) - 128000;
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <BMP280_ReadPressure+0x1d0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001986:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 800198a:	f143 35ff 	adc.w	r5, r3, #4294967295
 800198e:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
  val2 = val1 * val1 * (int64_t)_CalibrationData.dig_P6;
 8001992:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001996:	fb03 f102 	mul.w	r1, r3, r2
 800199a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800199c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800199e:	fb03 f302 	mul.w	r3, r3, r2
 80019a2:	18ca      	adds	r2, r1, r3
 80019a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019a6:	fba3 4503 	umull	r4, r5, r3, r3
 80019aa:	1953      	adds	r3, r2, r5
 80019ac:	461d      	mov	r5, r3
 80019ae:	4b60      	ldr	r3, [pc, #384]	; (8001b30 <BMP280_ReadPressure+0x1d4>)
 80019b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019ba:	fb02 f005 	mul.w	r0, r2, r5
 80019be:	fb04 f103 	mul.w	r1, r4, r3
 80019c2:	4401      	add	r1, r0
 80019c4:	fba4 2302 	umull	r2, r3, r4, r2
 80019c8:	4419      	add	r1, r3
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80019d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  val2 = val2 + ((val1 * (int64_t)_CalibrationData.dig_P5) << 17);
 80019d4:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <BMP280_ReadPressure+0x1d4>)
 80019d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019da:	b21a      	sxth	r2, r3
 80019dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80019e2:	fb03 f001 	mul.w	r0, r3, r1
 80019e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80019e8:	fb02 f101 	mul.w	r1, r2, r1
 80019ec:	4408      	add	r0, r1
 80019ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80019f0:	fba1 2302 	umull	r2, r3, r1, r2
 80019f4:	18c1      	adds	r1, r0, r3
 80019f6:	460b      	mov	r3, r1
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	0459      	lsls	r1, r3, #17
 8001a02:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001a06:	0450      	lsls	r0, r2, #17
 8001a08:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a0c:	eb12 0800 	adds.w	r8, r2, r0
 8001a10:	eb43 0901 	adc.w	r9, r3, r1
 8001a14:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
  val2 = val2 + ((int64_t)_CalibrationData.dig_P4 << 35);
 8001a18:	4b45      	ldr	r3, [pc, #276]	; (8001b30 <BMP280_ReadPressure+0x1d4>)
 8001a1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	00d1      	lsls	r1, r2, #3
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a34:	1814      	adds	r4, r2, r0
 8001a36:	61bc      	str	r4, [r7, #24]
 8001a38:	414b      	adcs	r3, r1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a40:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  val1 = ((val1 * val1 * (int64_t)_CalibrationData.dig_P3) >> 8) + ((val1 * (int64_t)_CalibrationData.dig_P2) << 12);
 8001a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a48:	fb03 f102 	mul.w	r1, r3, r2
 8001a4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a50:	fb03 f302 	mul.w	r3, r3, r2
 8001a54:	18ca      	adds	r2, r1, r3
 8001a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a58:	fba3 4503 	umull	r4, r5, r3, r3
 8001a5c:	1953      	adds	r3, r2, r5
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <BMP280_ReadPressure+0x1d4>)
 8001a62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a6c:	fb02 f005 	mul.w	r0, r2, r5
 8001a70:	fb04 f103 	mul.w	r1, r4, r3
 8001a74:	4401      	add	r1, r0
 8001a76:	fba4 2302 	umull	r2, r3, r4, r2
 8001a7a:	4419      	add	r1, r3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	f04f 0800 	mov.w	r8, #0
 8001a82:	f04f 0900 	mov.w	r9, #0
 8001a86:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001a8a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001a8e:	ea4f 2923 	mov.w	r9, r3, asr #8
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <BMP280_ReadPressure+0x1d4>)
 8001a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001aa0:	fb03 f001 	mul.w	r0, r3, r1
 8001aa4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001aa6:	fb02 f101 	mul.w	r1, r2, r1
 8001aaa:	1844      	adds	r4, r0, r1
 8001aac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001aae:	fba1 0102 	umull	r0, r1, r1, r2
 8001ab2:	1863      	adds	r3, r4, r1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	030b      	lsls	r3, r1, #12
 8001ac0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001ac4:	0302      	lsls	r2, r0, #12
 8001ac6:	eb18 0102 	adds.w	r1, r8, r2
 8001aca:	6139      	str	r1, [r7, #16]
 8001acc:	eb49 0303 	adc.w	r3, r9, r3
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ad6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)_CalibrationData.dig_P1) >> 33;
 8001ada:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001ade:	1c11      	adds	r1, r2, #0
 8001ae0:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ae2:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <BMP280_ReadPressure+0x1d4>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001af6:	4629      	mov	r1, r5
 8001af8:	fb02 f001 	mul.w	r0, r2, r1
 8001afc:	4621      	mov	r1, r4
 8001afe:	fb01 f103 	mul.w	r1, r1, r3
 8001b02:	4401      	add	r1, r0
 8001b04:	4620      	mov	r0, r4
 8001b06:	fba0 2302 	umull	r2, r3, r0, r2
 8001b0a:	4419      	add	r1, r3
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	1058      	asrs	r0, r3, #1
 8001b18:	17d9      	asrs	r1, r3, #31
 8001b1a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
  if (val1 == 0)
 8001b1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b22:	4313      	orrs	r3, r2
 8001b24:	d106      	bne.n	8001b34 <BMP280_ReadPressure+0x1d8>
  {
    return 0; // avoid exception caused by division by zero
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e123      	b.n	8001d74 <BMP280_ReadPressure+0x418>
 8001b2c:	20000220 	.word	0x20000220
 8001b30:	20000224 	.word	0x20000224
  }
  p = 1048576 - press_raw;
 8001b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b36:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  p = (((p << 31) - val2) * 3125) / val1;
 8001b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	647b      	str	r3, [r7, #68]	; 0x44
 8001b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4c:	07db      	lsls	r3, r3, #31
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b54:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001b58:	4621      	mov	r1, r4
 8001b5a:	ebb1 0a02 	subs.w	sl, r1, r2
 8001b5e:	4629      	mov	r1, r5
 8001b60:	eb61 0b03 	sbc.w	fp, r1, r3
 8001b64:	4652      	mov	r2, sl
 8001b66:	465b      	mov	r3, fp
 8001b68:	1891      	adds	r1, r2, r2
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	415b      	adcs	r3, r3
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b74:	eb12 020a 	adds.w	r2, r2, sl
 8001b78:	eb43 030b 	adc.w	r3, r3, fp
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	0199      	lsls	r1, r3, #6
 8001b86:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001b8a:	0190      	lsls	r0, r2, #6
 8001b8c:	1812      	adds	r2, r2, r0
 8001b8e:	eb41 0303 	adc.w	r3, r1, r3
 8001b92:	f04f 0000 	mov.w	r0, #0
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	0099      	lsls	r1, r3, #2
 8001b9c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ba0:	0090      	lsls	r0, r2, #2
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	eb12 020a 	adds.w	r2, r2, sl
 8001baa:	eb43 030b 	adc.w	r3, r3, fp
 8001bae:	f04f 0000 	mov.w	r0, #0
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	0099      	lsls	r1, r3, #2
 8001bb8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bbc:	0090      	lsls	r0, r2, #2
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	eb12 010a 	adds.w	r1, r2, sl
 8001bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bc8:	eb43 030b 	adc.w	r3, r3, fp
 8001bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001bd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bd6:	f7ff fa25 	bl	8001024 <__aeabi_ldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  val1 = (((int64_t)_CalibrationData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <BMP280_ReadPressure+0x424>)
 8001be4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001be8:	b218      	sxth	r0, r3
 8001bea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001bee:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	0b62      	lsrs	r2, r4, #13
 8001bfc:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001c00:	136b      	asrs	r3, r5, #13
 8001c02:	fb02 f501 	mul.w	r5, r2, r1
 8001c06:	fb00 f403 	mul.w	r4, r0, r3
 8001c0a:	442c      	add	r4, r5
 8001c0c:	fba0 0102 	umull	r0, r1, r0, r2
 8001c10:	1863      	adds	r3, r4, r1
 8001c12:	4619      	mov	r1, r3
 8001c14:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	0b62      	lsrs	r2, r4, #13
 8001c22:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001c26:	136b      	asrs	r3, r5, #13
 8001c28:	fb02 f501 	mul.w	r5, r2, r1
 8001c2c:	fb00 f403 	mul.w	r4, r0, r3
 8001c30:	442c      	add	r4, r5
 8001c32:	fba0 0102 	umull	r0, r1, r0, r2
 8001c36:	1863      	adds	r3, r4, r1
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	0e42      	lsrs	r2, r0, #25
 8001c44:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001c48:	164b      	asrs	r3, r1, #25
 8001c4a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  val2 = (((int64_t)_CalibrationData.dig_P8) * p) >> 19;
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <BMP280_ReadPressure+0x424>)
 8001c50:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c5c:	fb03 f001 	mul.w	r0, r3, r1
 8001c60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001c62:	fb02 f101 	mul.w	r1, r2, r1
 8001c66:	1844      	adds	r4, r0, r1
 8001c68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c6a:	fba1 0102 	umull	r0, r1, r1, r2
 8001c6e:	1863      	adds	r3, r4, r1
 8001c70:	4619      	mov	r1, r3
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	0cc2      	lsrs	r2, r0, #19
 8001c7c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001c80:	14cb      	asrs	r3, r1, #19
 8001c82:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  p = ((p + val1 + val2) >> 8) + ((int64_t)_CalibrationData.dig_P7 << 4);
 8001c86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c8e:	1884      	adds	r4, r0, r2
 8001c90:	633c      	str	r4, [r7, #48]	; 0x30
 8001c92:	eb41 0303 	adc.w	r3, r1, r3
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	1889      	adds	r1, r1, r2
 8001ca4:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	eb43 0101 	adc.w	r1, r3, r1
 8001cac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001cae:	f04f 0000 	mov.w	r0, #0
 8001cb2:	f04f 0100 	mov.w	r1, #0
 8001cb6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001cba:	4623      	mov	r3, r4
 8001cbc:	0a18      	lsrs	r0, r3, #8
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cc4:	462b      	mov	r3, r5
 8001cc6:	1219      	asrs	r1, r3, #8
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <BMP280_ReadPressure+0x424>)
 8001cca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cce:	b21c      	sxth	r4, r3
 8001cd0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	012b      	lsls	r3, r5, #4
 8001cde:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ce2:	0122      	lsls	r2, r4, #4
 8001ce4:	1884      	adds	r4, r0, r2
 8001ce6:	603c      	str	r4, [r7, #0]
 8001ce8:	eb41 0303 	adc.w	r3, r1, r3
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001cf2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001cf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	0a02      	lsrs	r2, r0, #8
 8001d04:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001d08:	120b      	asrs	r3, r1, #8
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fb03 f402 	mul.w	r4, r3, r2
 8001d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d16:	f04f 00ff 	mov.w	r0, #255	; 0xff
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	ea02 0500 	and.w	r5, r2, r0
 8001d22:	623d      	str	r5, [r7, #32]
 8001d24:	400b      	ands	r3, r1
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <BMP280_ReadPressure+0x428>)
 8001d2a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d2e:	464a      	mov	r2, r9
 8001d30:	fb03 f202 	mul.w	r2, r3, r2
 8001d34:	2300      	movs	r3, #0
 8001d36:	4641      	mov	r1, r8
 8001d38:	fb03 f301 	mul.w	r3, r3, r1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <BMP280_ReadPressure+0x428>)
 8001d40:	4641      	mov	r1, r8
 8001d42:	fba1 0102 	umull	r0, r1, r1, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <BMP280_ReadPressure+0x42c>)
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	f7ff f968 	bl	8001024 <__aeabi_ldivmod>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	4423      	add	r3, r4
 8001d5c:	657b      	str	r3, [r7, #84]	; 0x54
  press_float = pres_int / 100.0f;
 8001d5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001d60:	f7fe ffb8 	bl	8000cd4 <__aeabi_ui2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4909      	ldr	r1, [pc, #36]	; (8001d8c <BMP280_ReadPressure+0x430>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f8bf 	bl	8000eec <__aeabi_fdiv>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	677b      	str	r3, [r7, #116]	; 0x74
  return press_float;
 8001d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3778      	adds	r7, #120	; 0x78
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000224 	.word	0x20000224
 8001d84:	0005f5e1 	.word	0x0005f5e1
 8001d88:	000186a0 	.word	0x000186a0
 8001d8c:	42c80000 	.word	0x42c80000

08001d90 <BMP280_Init>:

//------------------------------------------------------------

void BMP280_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
	uint32_t value32 = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]

	LED_ON;
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2120      	movs	r1, #32
 8001d9e:	4878      	ldr	r0, [pc, #480]	; (8001f80 <BMP280_Init+0x1f0>)
 8001da0:	f001 f866 	bl	8002e70 <HAL_GPIO_WritePin>
	sprintf(str1, "BMP280 Initializing...\n");
 8001da4:	4977      	ldr	r1, [pc, #476]	; (8001f84 <BMP280_Init+0x1f4>)
 8001da6:	4878      	ldr	r0, [pc, #480]	; (8001f88 <BMP280_Init+0x1f8>)
 8001da8:	f005 fa9c 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001dac:	4876      	ldr	r0, [pc, #472]	; (8001f88 <BMP280_Init+0x1f8>)
 8001dae:	f7fe f9cf 	bl	8000150 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	4973      	ldr	r1, [pc, #460]	; (8001f88 <BMP280_Init+0x1f8>)
 8001dbc:	4873      	ldr	r0, [pc, #460]	; (8001f8c <BMP280_Init+0x1fc>)
 8001dbe:	f004 fa69 	bl	8006294 <HAL_UART_Transmit>

	uint8_t value = _BMP280_ReadReg(BMP280_REG_ID);
 8001dc2:	20d0      	movs	r0, #208	; 0xd0
 8001dc4:	f7ff fcb0 	bl	8001728 <_BMP280_ReadReg>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	70fb      	strb	r3, [r7, #3]
	sprintf(str1, "BMP280_CHIP_ID: 0x%02X\n", value);
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	496f      	ldr	r1, [pc, #444]	; (8001f90 <BMP280_Init+0x200>)
 8001dd2:	486d      	ldr	r0, [pc, #436]	; (8001f88 <BMP280_Init+0x1f8>)
 8001dd4:	f005 fa86 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001dd8:	486b      	ldr	r0, [pc, #428]	; (8001f88 <BMP280_Init+0x1f8>)
 8001dda:	f7fe f9b9 	bl	8000150 <strlen>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de6:	4968      	ldr	r1, [pc, #416]	; (8001f88 <BMP280_Init+0x1f8>)
 8001de8:	4868      	ldr	r0, [pc, #416]	; (8001f8c <BMP280_Init+0x1fc>)
 8001dea:	f004 fa53 	bl	8006294 <HAL_UART_Transmit>

	if(value != BMP280_CHIP_ID)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b58      	cmp	r3, #88	; 0x58
 8001df2:	d002      	beq.n	8001dfa <BMP280_Init+0x6a>
	{
		_BMP280_Error();
 8001df4:	f7ff fbce 	bl	8001594 <_BMP280_Error>
		return;
 8001df8:	e0be      	b.n	8001f78 <BMP280_Init+0x1e8>
	}

	sprintf(str1, "BMP280 resetting the software...\n");
 8001dfa:	4966      	ldr	r1, [pc, #408]	; (8001f94 <BMP280_Init+0x204>)
 8001dfc:	4862      	ldr	r0, [pc, #392]	; (8001f88 <BMP280_Init+0x1f8>)
 8001dfe:	f005 fa71 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001e02:	4861      	ldr	r0, [pc, #388]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e04:	f7fe f9a4 	bl	8000150 <strlen>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	495d      	ldr	r1, [pc, #372]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e12:	485e      	ldr	r0, [pc, #376]	; (8001f8c <BMP280_Init+0x1fc>)
 8001e14:	f004 fa3e 	bl	8006294 <HAL_UART_Transmit>
	_BMP280_WriteReg(BMP280_SOFTRESET_REG, BMP280_SOFTRESET_VALUE);
 8001e18:	21b6      	movs	r1, #182	; 0xb6
 8001e1a:	20e0      	movs	r0, #224	; 0xe0
 8001e1c:	f7ff fc72 	bl	8001704 <_BMP280_WriteReg>
	while(_BMP280_ReadStatus() & BMP280_STATUS_IM_UPTODATE);
 8001e20:	bf00      	nop
 8001e22:	f7ff fc92 	bl	800174a <_BMP280_ReadStatus>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f8      	bne.n	8001e22 <BMP280_Init+0x92>

	sprintf(str1, "BMP280 reading calibration data...\n");
 8001e30:	4959      	ldr	r1, [pc, #356]	; (8001f98 <BMP280_Init+0x208>)
 8001e32:	4855      	ldr	r0, [pc, #340]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e34:	f005 fa56 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001e38:	4853      	ldr	r0, [pc, #332]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e3a:	f7fe f989 	bl	8000150 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	4950      	ldr	r1, [pc, #320]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e48:	4850      	ldr	r0, [pc, #320]	; (8001f8c <BMP280_Init+0x1fc>)
 8001e4a:	f004 fa23 	bl	8006294 <HAL_UART_Transmit>
	_BMP280_ReadCoefficients();
 8001e4e:	f7ff fccf 	bl	80017f0 <_BMP280_ReadCoefficients>

	sprintf(str1, "BMP280 setting standby time 1sec...\n");
 8001e52:	4952      	ldr	r1, [pc, #328]	; (8001f9c <BMP280_Init+0x20c>)
 8001e54:	484c      	ldr	r0, [pc, #304]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e56:	f005 fa45 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001e5a:	484b      	ldr	r0, [pc, #300]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e5c:	f7fe f978 	bl	8000150 <strlen>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	4947      	ldr	r1, [pc, #284]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e6a:	4848      	ldr	r0, [pc, #288]	; (8001f8c <BMP280_Init+0x1fc>)
 8001e6c:	f004 fa12 	bl	8006294 <HAL_UART_Transmit>
	_BMP280_SetStandby(BMP280_STBY_1000);
 8001e70:	20a0      	movs	r0, #160	; 0xa0
 8001e72:	f7ff fcf7 	bl	8001864 <_BMP280_SetStandby>

	sprintf(str1, "BMP280 setting IIR filter...\n");
 8001e76:	494a      	ldr	r1, [pc, #296]	; (8001fa0 <BMP280_Init+0x210>)
 8001e78:	4843      	ldr	r0, [pc, #268]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e7a:	f005 fa33 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001e7e:	4842      	ldr	r0, [pc, #264]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e80:	f7fe f966 	bl	8000150 <strlen>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	493e      	ldr	r1, [pc, #248]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e8e:	483f      	ldr	r0, [pc, #252]	; (8001f8c <BMP280_Init+0x1fc>)
 8001e90:	f004 fa00 	bl	8006294 <HAL_UART_Transmit>
	_BMP280_SetFilter(BMP280_FILTER_4);
 8001e94:	2008      	movs	r0, #8
 8001e96:	f7ff fd04 	bl	80018a2 <_BMP280_SetFilter>

	sprintf(str1, "BMP280 setting oversampling times for P...\n");
 8001e9a:	4942      	ldr	r1, [pc, #264]	; (8001fa4 <BMP280_Init+0x214>)
 8001e9c:	483a      	ldr	r0, [pc, #232]	; (8001f88 <BMP280_Init+0x1f8>)
 8001e9e:	f005 fa21 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001ea2:	4839      	ldr	r0, [pc, #228]	; (8001f88 <BMP280_Init+0x1f8>)
 8001ea4:	f7fe f954 	bl	8000150 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <BMP280_Init+0x1f8>)
 8001eb2:	4836      	ldr	r0, [pc, #216]	; (8001f8c <BMP280_Init+0x1fc>)
 8001eb4:	f004 f9ee 	bl	8006294 <HAL_UART_Transmit>
	_BMP280_SetOversamplingPressure(BMP280_OSRS_P_x2);
 8001eb8:	2008      	movs	r0, #8
 8001eba:	f7ff fd11 	bl	80018e0 <_BMP280_SetOversamplingPressure>

	sprintf(str1, "BMP280 checking oversampling install...\n");
 8001ebe:	493a      	ldr	r1, [pc, #232]	; (8001fa8 <BMP280_Init+0x218>)
 8001ec0:	4831      	ldr	r0, [pc, #196]	; (8001f88 <BMP280_Init+0x1f8>)
 8001ec2:	f005 fa0f 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001ec6:	4830      	ldr	r0, [pc, #192]	; (8001f88 <BMP280_Init+0x1f8>)
 8001ec8:	f7fe f942 	bl	8000150 <strlen>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	492c      	ldr	r1, [pc, #176]	; (8001f88 <BMP280_Init+0x1f8>)
 8001ed6:	482d      	ldr	r0, [pc, #180]	; (8001f8c <BMP280_Init+0x1fc>)
 8001ed8:	f004 f9dc 	bl	8006294 <HAL_UART_Transmit>
	value32 = _BMP280_ReadReg(BMP280_REG_CTRL_MEAS);
 8001edc:	20f4      	movs	r0, #244	; 0xf4
 8001ede:	f7ff fc23 	bl	8001728 <_BMP280_ReadReg>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	607b      	str	r3, [r7, #4]
	sprintf(str1, "Measurements status: %04X\n", value32);
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4930      	ldr	r1, [pc, #192]	; (8001fac <BMP280_Init+0x21c>)
 8001eea:	4827      	ldr	r0, [pc, #156]	; (8001f88 <BMP280_Init+0x1f8>)
 8001eec:	f005 f9fa 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001ef0:	4825      	ldr	r0, [pc, #148]	; (8001f88 <BMP280_Init+0x1f8>)
 8001ef2:	f7fe f92d 	bl	8000150 <strlen>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	4922      	ldr	r1, [pc, #136]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f00:	4822      	ldr	r0, [pc, #136]	; (8001f8c <BMP280_Init+0x1fc>)
 8001f02:	f004 f9c7 	bl	8006294 <HAL_UART_Transmit>

	sprintf(str1, "Pressure: %s\n", (value32 & BMP280_OSRS_P_MSK) ? "ON" : "OFF");
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f003 031c 	and.w	r3, r3, #28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <BMP280_Init+0x184>
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <BMP280_Init+0x220>)
 8001f12:	e000      	b.n	8001f16 <BMP280_Init+0x186>
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <BMP280_Init+0x224>)
 8001f16:	461a      	mov	r2, r3
 8001f18:	4927      	ldr	r1, [pc, #156]	; (8001fb8 <BMP280_Init+0x228>)
 8001f1a:	481b      	ldr	r0, [pc, #108]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f1c:	f005 f9e2 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001f20:	4819      	ldr	r0, [pc, #100]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f22:	f7fe f915 	bl	8000150 <strlen>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2e:	4916      	ldr	r1, [pc, #88]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f30:	4816      	ldr	r0, [pc, #88]	; (8001f8c <BMP280_Init+0x1fc>)
 8001f32:	f004 f9af 	bl	8006294 <HAL_UART_Transmit>

	sprintf(str1, "BMP280 setting normal mode...\n");
 8001f36:	4921      	ldr	r1, [pc, #132]	; (8001fbc <BMP280_Init+0x22c>)
 8001f38:	4813      	ldr	r0, [pc, #76]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f3a:	f005 f9d3 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f40:	f7fe f906 	bl	8000150 <strlen>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f4e:	480f      	ldr	r0, [pc, #60]	; (8001f8c <BMP280_Init+0x1fc>)
 8001f50:	f004 f9a0 	bl	8006294 <HAL_UART_Transmit>
	_BMP280_SetMode(BMP280_MODE_NORMAL);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f7ff fce2 	bl	800191e <_BMP280_SetMode>

	sprintf(str1, "BMP280 Initialization completed\n");
 8001f5a:	4919      	ldr	r1, [pc, #100]	; (8001fc0 <BMP280_Init+0x230>)
 8001f5c:	480a      	ldr	r0, [pc, #40]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f5e:	f005 f9c1 	bl	80072e4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f64:	f7fe f8f4 	bl	8000150 <strlen>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	4905      	ldr	r1, [pc, #20]	; (8001f88 <BMP280_Init+0x1f8>)
 8001f72:	4806      	ldr	r0, [pc, #24]	; (8001f8c <BMP280_Init+0x1fc>)
 8001f74:	f004 f98e 	bl	8006294 <HAL_UART_Transmit>
}
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40010800 	.word	0x40010800
 8001f84:	0800ae40 	.word	0x0800ae40
 8001f88:	200002e4 	.word	0x200002e4
 8001f8c:	20000348 	.word	0x20000348
 8001f90:	0800ae58 	.word	0x0800ae58
 8001f94:	0800ae70 	.word	0x0800ae70
 8001f98:	0800ae94 	.word	0x0800ae94
 8001f9c:	0800aeb8 	.word	0x0800aeb8
 8001fa0:	0800aee0 	.word	0x0800aee0
 8001fa4:	0800af00 	.word	0x0800af00
 8001fa8:	0800af2c 	.word	0x0800af2c
 8001fac:	0800af58 	.word	0x0800af58
 8001fb0:	0800af74 	.word	0x0800af74
 8001fb4:	0800af78 	.word	0x0800af78
 8001fb8:	0800af7c 	.word	0x0800af7c
 8001fbc:	0800af8c 	.word	0x0800af8c
 8001fc0:	0800afac 	.word	0x0800afac

08001fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fca:	f000 fbb3 	bl	8002734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fce:	f000 f859 	bl	8002084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd2:	f000 f91f 	bl	8002214 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fd6:	f000 f8f3 	bl	80021c0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001fda:	f000 f8c3 	bl	8002164 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001fde:	f000 f893 	bl	8002108 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init();
 8001fe2:	f7ff fed5 	bl	8001d90 <BMP280_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_PressureResult = BMP280_ReadPressure();
 8001fe6:	f7ff fcb9 	bl	800195c <BMP280_ReadPressure>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a1f      	ldr	r2, [pc, #124]	; (800206c <main+0xa8>)
 8001fee:	6013      	str	r3, [r2, #0]
	  sprintf(str1, "BMP280 Pressure: %.3f Pa\n", BMP280_PressureResult);
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <main+0xa8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa17 	bl	8000428 <__aeabi_f2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	491c      	ldr	r1, [pc, #112]	; (8002070 <main+0xac>)
 8002000:	481c      	ldr	r0, [pc, #112]	; (8002074 <main+0xb0>)
 8002002:	f005 f96f 	bl	80072e4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 8002006:	481b      	ldr	r0, [pc, #108]	; (8002074 <main+0xb0>)
 8002008:	f7fe f8a2 	bl	8000150 <strlen>
 800200c:	4603      	mov	r3, r0
 800200e:	b29a      	uxth	r2, r3
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	4917      	ldr	r1, [pc, #92]	; (8002074 <main+0xb0>)
 8002016:	4818      	ldr	r0, [pc, #96]	; (8002078 <main+0xb4>)
 8002018:	f004 f93c 	bl	8006294 <HAL_UART_Transmit>

	  AHT10_Measure();
 800201c:	f7ff faa4 	bl	8001568 <AHT10_Measure>
	  sprintf(str1, "AHT10: %f---%f\n", AHT10_DataStruct.Temperature, AHT10_DataStruct.Moisture);
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <main+0xb8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f9ff 	bl	8000428 <__aeabi_f2d>
 800202a:	4604      	mov	r4, r0
 800202c:	460d      	mov	r5, r1
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <main+0xb8>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe f9f8 	bl	8000428 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	e9cd 2300 	strd	r2, r3, [sp]
 8002040:	4622      	mov	r2, r4
 8002042:	462b      	mov	r3, r5
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <main+0xbc>)
 8002046:	480b      	ldr	r0, [pc, #44]	; (8002074 <main+0xb0>)
 8002048:	f005 f94c 	bl	80072e4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 0x1000);
 800204c:	4809      	ldr	r0, [pc, #36]	; (8002074 <main+0xb0>)
 800204e:	f7fe f87f 	bl	8000150 <strlen>
 8002052:	4603      	mov	r3, r0
 8002054:	b29a      	uxth	r2, r3
 8002056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205a:	4906      	ldr	r1, [pc, #24]	; (8002074 <main+0xb0>)
 800205c:	4806      	ldr	r0, [pc, #24]	; (8002078 <main+0xb4>)
 800205e:	f004 f919 	bl	8006294 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8002062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002066:	f000 fbc7 	bl	80027f8 <HAL_Delay>
	  BMP280_PressureResult = BMP280_ReadPressure();
 800206a:	e7bc      	b.n	8001fe6 <main+0x22>
 800206c:	200002e0 	.word	0x200002e0
 8002070:	0800afd0 	.word	0x0800afd0
 8002074:	200002e4 	.word	0x200002e4
 8002078:	20000348 	.word	0x20000348
 800207c:	2000020c 	.word	0x2000020c
 8002080:	0800afec 	.word	0x0800afec

08002084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b090      	sub	sp, #64	; 0x40
 8002088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	2228      	movs	r2, #40	; 0x28
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f004 faa8 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020aa:	2301      	movs	r3, #1
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ae:	2310      	movs	r3, #16
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b2:	2302      	movs	r3, #2
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80020b6:	2300      	movs	r3, #0
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80020ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fc87 	bl	80059d8 <HAL_RCC_OscConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80020d0:	f000 f90e 	bl	80022f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d4:	230f      	movs	r3, #15
 80020d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d8:	2302      	movs	r3, #2
 80020da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2102      	movs	r1, #2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fef2 	bl	8005ed8 <HAL_RCC_ClockConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80020fa:	f000 f8f9 	bl	80022f0 <Error_Handler>
  }
}
 80020fe:	bf00      	nop
 8002100:	3740      	adds	r7, #64	; 0x40
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <MX_I2C1_Init+0x50>)
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <MX_I2C1_Init+0x54>)
 8002110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_I2C1_Init+0x50>)
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <MX_I2C1_Init+0x58>)
 8002116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_I2C1_Init+0x50>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_I2C1_Init+0x50>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_I2C1_Init+0x50>)
 8002126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <MX_I2C1_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_I2C1_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <MX_I2C1_Init+0x50>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_I2C1_Init+0x50>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <MX_I2C1_Init+0x50>)
 8002146:	f000 fecd 	bl	8002ee4 <HAL_I2C_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002150:	f000 f8ce 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000238 	.word	0x20000238
 800215c:	40005400 	.word	0x40005400
 8002160:	00061a80 	.word	0x00061a80

08002164 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_I2C2_Init+0x50>)
 800216a:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <MX_I2C2_Init+0x54>)
 800216c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_I2C2_Init+0x50>)
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <MX_I2C2_Init+0x58>)
 8002172:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_I2C2_Init+0x50>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_I2C2_Init+0x50>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_I2C2_Init+0x50>)
 8002182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002186:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <MX_I2C2_Init+0x50>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_I2C2_Init+0x50>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <MX_I2C2_Init+0x50>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_I2C2_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <MX_I2C2_Init+0x50>)
 80021a2:	f000 fe9f 	bl	8002ee4 <HAL_I2C_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021ac:	f000 f8a0 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000028c 	.word	0x2000028c
 80021b8:	40005800 	.word	0x40005800
 80021bc:	000186a0 	.word	0x000186a0

080021c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <MX_USART2_UART_Init+0x50>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_USART2_UART_Init+0x4c>)
 80021f8:	f003 fffc 	bl	80061f4 <HAL_UART_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002202:	f000 f875 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000348 	.word	0x20000348
 8002210:	40004400 	.word	0x40004400

08002214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <MX_GPIO_Init+0xcc>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <MX_GPIO_Init+0xcc>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <MX_GPIO_Init+0xcc>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <MX_GPIO_Init+0xcc>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <MX_GPIO_Init+0xcc>)
 8002246:	f043 0320 	orr.w	r3, r3, #32
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <MX_GPIO_Init+0xcc>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <MX_GPIO_Init+0xcc>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <MX_GPIO_Init+0xcc>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <MX_GPIO_Init+0xcc>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_GPIO_Init+0xcc>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <MX_GPIO_Init+0xcc>)
 8002276:	f043 0308 	orr.w	r3, r3, #8
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_GPIO_Init+0xcc>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2120      	movs	r1, #32
 800228c:	4815      	ldr	r0, [pc, #84]	; (80022e4 <MX_GPIO_Init+0xd0>)
 800228e:	f000 fdef 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <MX_GPIO_Init+0xd4>)
 800229a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	4811      	ldr	r0, [pc, #68]	; (80022ec <MX_GPIO_Init+0xd8>)
 80022a8:	f000 fc5e 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022ac:	2320      	movs	r3, #32
 80022ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	4808      	ldr	r0, [pc, #32]	; (80022e4 <MX_GPIO_Init+0xd0>)
 80022c4:	f000 fc50 	bl	8002b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	2028      	movs	r0, #40	; 0x28
 80022ce:	f000 fb8e 	bl	80029ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022d2:	2028      	movs	r0, #40	; 0x28
 80022d4:	f000 fba7 	bl	8002a26 <HAL_NVIC_EnableIRQ>

}
 80022d8:	bf00      	nop
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010800 	.word	0x40010800
 80022e8:	10110000 	.word	0x10110000
 80022ec:	40011000 	.word	0x40011000

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
}
 80022f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <Error_Handler+0x8>
	...

080022fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_MspInit+0x5c>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_MspInit+0x5c>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6193      	str	r3, [r2, #24]
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_MspInit+0x5c>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_MspInit+0x5c>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_MspInit+0x5c>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_MspInit+0x5c>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_MspInit+0x60>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_MspInit+0x60>)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40021000 	.word	0x40021000
 800235c:	40010000 	.word	0x40010000

08002360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a33      	ldr	r2, [pc, #204]	; (8002448 <HAL_I2C_MspInit+0xe8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d12c      	bne.n	80023da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_I2C_MspInit+0xec>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a31      	ldr	r2, [pc, #196]	; (800244c <HAL_I2C_MspInit+0xec>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_I2C_MspInit+0xec>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002398:	23c0      	movs	r3, #192	; 0xc0
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239c:	2312      	movs	r3, #18
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0318 	add.w	r3, r7, #24
 80023a8:	4619      	mov	r1, r3
 80023aa:	4829      	ldr	r0, [pc, #164]	; (8002450 <HAL_I2C_MspInit+0xf0>)
 80023ac:	f000 fbdc 	bl	8002b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b0:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_I2C_MspInit+0xec>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	4a25      	ldr	r2, [pc, #148]	; (800244c <HAL_I2C_MspInit+0xec>)
 80023b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ba:	61d3      	str	r3, [r2, #28]
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_I2C_MspInit+0xec>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	201f      	movs	r0, #31
 80023ce:	f000 fb0e 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023d2:	201f      	movs	r0, #31
 80023d4:	f000 fb27 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023d8:	e031      	b.n	800243e <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_I2C_MspInit+0xf4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d12c      	bne.n	800243e <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_I2C_MspInit+0xec>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_I2C_MspInit+0xec>)
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_I2C_MspInit+0xec>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002402:	2312      	movs	r3, #18
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	f107 0318 	add.w	r3, r7, #24
 800240e:	4619      	mov	r1, r3
 8002410:	480f      	ldr	r0, [pc, #60]	; (8002450 <HAL_I2C_MspInit+0xf0>)
 8002412:	f000 fba9 	bl	8002b68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_I2C_MspInit+0xec>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_I2C_MspInit+0xec>)
 800241c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002420:	61d3      	str	r3, [r2, #28]
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_I2C_MspInit+0xec>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	2021      	movs	r0, #33	; 0x21
 8002434:	f000 fadb 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002438:	2021      	movs	r0, #33	; 0x21
 800243a:	f000 faf4 	bl	8002a26 <HAL_NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40005400 	.word	0x40005400
 800244c:	40021000 	.word	0x40021000
 8002450:	40010c00 	.word	0x40010c00
 8002454:	40005800 	.word	0x40005800

08002458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <HAL_UART_MspInit+0x70>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d123      	bne.n	80024c0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <HAL_UART_MspInit+0x74>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	4a13      	ldr	r2, [pc, #76]	; (80024cc <HAL_UART_MspInit+0x74>)
 800247e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002482:	61d3      	str	r3, [r2, #28]
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_UART_MspInit+0x74>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_UART_MspInit+0x74>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_UART_MspInit+0x74>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_UART_MspInit+0x74>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024a8:	230c      	movs	r3, #12
 80024aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4619      	mov	r1, r3
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <HAL_UART_MspInit+0x78>)
 80024bc:	f000 fb54 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024c0:	bf00      	nop
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40004400 	.word	0x40004400
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010800 	.word	0x40010800

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <NMI_Handler+0x4>

080024da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <HardFault_Handler+0x4>

080024e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <MemManage_Handler+0x4>

080024e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <BusFault_Handler+0x4>

080024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <UsageFault_Handler+0x4>

080024f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251a:	f000 f951 	bl	80027c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <I2C1_EV_IRQHandler+0x10>)
 800252a:	f001 fadd 	bl	8003ae8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000238 	.word	0x20000238

08002538 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <I2C2_EV_IRQHandler+0x10>)
 800253e:	f001 fad3 	bl	8003ae8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000028c 	.word	0x2000028c

0800254c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002550:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002554:	f000 fca4 	bl	8002ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	return 1;
 8002560:	2301      	movs	r3, #1
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <_kill>:

int _kill(int pid, int sig)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002574:	f004 f80e 	bl	8006594 <__errno>
 8002578:	4603      	mov	r3, r0
 800257a:	2216      	movs	r2, #22
 800257c:	601a      	str	r2, [r3, #0]
	return -1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_exit>:

void _exit (int status)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002592:	f04f 31ff 	mov.w	r1, #4294967295
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffe7 	bl	800256a <_kill>
	while (1) {}		/* Make sure we hang here */
 800259c:	e7fe      	b.n	800259c <_exit+0x12>

0800259e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e00a      	b.n	80025c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b0:	f3af 8000 	nop.w
 80025b4:	4601      	mov	r1, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	60ba      	str	r2, [r7, #8]
 80025bc:	b2ca      	uxtb	r2, r1
 80025be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dbf0      	blt.n	80025b0 <_read+0x12>
	}

return len;
 80025ce:	687b      	ldr	r3, [r7, #4]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e009      	b.n	80025fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	60ba      	str	r2, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	dbf1      	blt.n	80025ea <_write+0x12>
	}
	return len;
 8002606:	687b      	ldr	r3, [r7, #4]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <_close>:

int _close(int file)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	return -1;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002636:	605a      	str	r2, [r3, #4]
	return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <_isatty>:

int _isatty(int file)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f003 ff78 	bl	8006594 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20005000 	.word	0x20005000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	20000200 	.word	0x20000200
 80026d8:	200003a8 	.word	0x200003a8

080026dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e8:	f7ff fff8 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026ec:	480b      	ldr	r0, [pc, #44]	; (800271c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026ee:	490c      	ldr	r1, [pc, #48]	; (8002720 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f4:	e002      	b.n	80026fc <LoopCopyDataInit>

080026f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026fa:	3304      	adds	r3, #4

080026fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002700:	d3f9      	bcc.n	80026f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002704:	4c09      	ldr	r4, [pc, #36]	; (800272c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002708:	e001      	b.n	800270e <LoopFillZerobss>

0800270a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800270a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800270c:	3204      	adds	r2, #4

0800270e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002710:	d3fb      	bcc.n	800270a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002712:	f003 ff45 	bl	80065a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002716:	f7ff fc55 	bl	8001fc4 <main>
  bx lr
 800271a:	4770      	bx	lr
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002724:	0800b4ec 	.word	0x0800b4ec
  ldr r2, =_sbss
 8002728:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800272c:	200003a4 	.word	0x200003a4

08002730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC1_2_IRQHandler>
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_Init+0x28>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_Init+0x28>)
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 f947 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274a:	2000      	movs	r0, #0
 800274c:	f000 f808 	bl	8002760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002750:	f7ff fdd4 	bl	80022fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40022000 	.word	0x40022000

08002760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x54>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x58>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002776:	fbb3 f3f1 	udiv	r3, r3, r1
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f95f 	bl	8002a42 <HAL_SYSTICK_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00e      	b.n	80027ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d80a      	bhi.n	80027aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002794:	2200      	movs	r2, #0
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f000 f927 	bl	80029ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a0:	4a06      	ldr	r2, [pc, #24]	; (80027bc <HAL_InitTick+0x5c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000004 	.word	0x20000004
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_IncTick+0x1c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_IncTick+0x20>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <HAL_IncTick+0x20>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	20000390 	.word	0x20000390

080027e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_GetTick+0x10>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000390 	.word	0x20000390

080027f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff fff0 	bl	80027e4 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d005      	beq.n	800281e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_Delay+0x44>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800281e:	bf00      	nop
 8002820:	f7ff ffe0 	bl	80027e4 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d8f7      	bhi.n	8002820 <HAL_Delay+0x28>
  {
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000000c 	.word	0x2000000c

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4906      	ldr	r1, [pc, #24]	; (80028d8 <__NVIC_EnableIRQ+0x34>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	; (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	; (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a4:	d301      	bcc.n	80029aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00f      	b.n	80029ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <SysTick_Config+0x40>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b2:	210f      	movs	r1, #15
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	f7ff ff90 	bl	80028dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <SysTick_Config+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <SysTick_Config+0x40>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff2d 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a00:	f7ff ff42 	bl	8002888 <__NVIC_GetPriorityGrouping>
 8002a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff90 	bl	8002930 <NVIC_EncodePriority>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff5f 	bl	80028dc <__NVIC_SetPriority>
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff35 	bl	80028a4 <__NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffa2 	bl	8002994 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d005      	beq.n	8002a80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2204      	movs	r2, #4
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	e051      	b.n	8002b24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 020e 	bic.w	r2, r2, #14
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <HAL_DMA_Abort_IT+0xd4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d029      	beq.n	8002afe <HAL_DMA_Abort_IT+0xa2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_DMA_Abort_IT+0xd8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <HAL_DMA_Abort_IT+0x9e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_DMA_Abort_IT+0xdc>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01a      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x98>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_DMA_Abort_IT+0xe0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d012      	beq.n	8002aee <HAL_DMA_Abort_IT+0x92>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_DMA_Abort_IT+0xe4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_DMA_Abort_IT+0x8c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <HAL_DMA_Abort_IT+0xe8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d102      	bne.n	8002ae2 <HAL_DMA_Abort_IT+0x86>
 8002adc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ae0:	e00e      	b.n	8002b00 <HAL_DMA_Abort_IT+0xa4>
 8002ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae6:	e00b      	b.n	8002b00 <HAL_DMA_Abort_IT+0xa4>
 8002ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aec:	e008      	b.n	8002b00 <HAL_DMA_Abort_IT+0xa4>
 8002aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af2:	e005      	b.n	8002b00 <HAL_DMA_Abort_IT+0xa4>
 8002af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af8:	e002      	b.n	8002b00 <HAL_DMA_Abort_IT+0xa4>
 8002afa:	2310      	movs	r3, #16
 8002afc:	e000      	b.n	8002b00 <HAL_DMA_Abort_IT+0xa4>
 8002afe:	2301      	movs	r3, #1
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_DMA_Abort_IT+0xec>)
 8002b02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
    } 
  }
  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40020008 	.word	0x40020008
 8002b34:	4002001c 	.word	0x4002001c
 8002b38:	40020030 	.word	0x40020030
 8002b3c:	40020044 	.word	0x40020044
 8002b40:	40020058 	.word	0x40020058
 8002b44:	4002006c 	.word	0x4002006c
 8002b48:	40020000 	.word	0x40020000

08002b4c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b5a:	b2db      	uxtb	r3, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b08b      	sub	sp, #44	; 0x2c
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7a:	e169      	b.n	8002e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 8158 	bne.w	8002e4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4a9a      	ldr	r2, [pc, #616]	; (8002e08 <HAL_GPIO_Init+0x2a0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d05e      	beq.n	8002c62 <HAL_GPIO_Init+0xfa>
 8002ba4:	4a98      	ldr	r2, [pc, #608]	; (8002e08 <HAL_GPIO_Init+0x2a0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d875      	bhi.n	8002c96 <HAL_GPIO_Init+0x12e>
 8002baa:	4a98      	ldr	r2, [pc, #608]	; (8002e0c <HAL_GPIO_Init+0x2a4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d058      	beq.n	8002c62 <HAL_GPIO_Init+0xfa>
 8002bb0:	4a96      	ldr	r2, [pc, #600]	; (8002e0c <HAL_GPIO_Init+0x2a4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d86f      	bhi.n	8002c96 <HAL_GPIO_Init+0x12e>
 8002bb6:	4a96      	ldr	r2, [pc, #600]	; (8002e10 <HAL_GPIO_Init+0x2a8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d052      	beq.n	8002c62 <HAL_GPIO_Init+0xfa>
 8002bbc:	4a94      	ldr	r2, [pc, #592]	; (8002e10 <HAL_GPIO_Init+0x2a8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d869      	bhi.n	8002c96 <HAL_GPIO_Init+0x12e>
 8002bc2:	4a94      	ldr	r2, [pc, #592]	; (8002e14 <HAL_GPIO_Init+0x2ac>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d04c      	beq.n	8002c62 <HAL_GPIO_Init+0xfa>
 8002bc8:	4a92      	ldr	r2, [pc, #584]	; (8002e14 <HAL_GPIO_Init+0x2ac>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d863      	bhi.n	8002c96 <HAL_GPIO_Init+0x12e>
 8002bce:	4a92      	ldr	r2, [pc, #584]	; (8002e18 <HAL_GPIO_Init+0x2b0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d046      	beq.n	8002c62 <HAL_GPIO_Init+0xfa>
 8002bd4:	4a90      	ldr	r2, [pc, #576]	; (8002e18 <HAL_GPIO_Init+0x2b0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d85d      	bhi.n	8002c96 <HAL_GPIO_Init+0x12e>
 8002bda:	2b12      	cmp	r3, #18
 8002bdc:	d82a      	bhi.n	8002c34 <HAL_GPIO_Init+0xcc>
 8002bde:	2b12      	cmp	r3, #18
 8002be0:	d859      	bhi.n	8002c96 <HAL_GPIO_Init+0x12e>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_GPIO_Init+0x80>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002c63 	.word	0x08002c63
 8002bec:	08002c3d 	.word	0x08002c3d
 8002bf0:	08002c4f 	.word	0x08002c4f
 8002bf4:	08002c91 	.word	0x08002c91
 8002bf8:	08002c97 	.word	0x08002c97
 8002bfc:	08002c97 	.word	0x08002c97
 8002c00:	08002c97 	.word	0x08002c97
 8002c04:	08002c97 	.word	0x08002c97
 8002c08:	08002c97 	.word	0x08002c97
 8002c0c:	08002c97 	.word	0x08002c97
 8002c10:	08002c97 	.word	0x08002c97
 8002c14:	08002c97 	.word	0x08002c97
 8002c18:	08002c97 	.word	0x08002c97
 8002c1c:	08002c97 	.word	0x08002c97
 8002c20:	08002c97 	.word	0x08002c97
 8002c24:	08002c97 	.word	0x08002c97
 8002c28:	08002c97 	.word	0x08002c97
 8002c2c:	08002c45 	.word	0x08002c45
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	4a79      	ldr	r2, [pc, #484]	; (8002e1c <HAL_GPIO_Init+0x2b4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c3a:	e02c      	b.n	8002c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	623b      	str	r3, [r7, #32]
          break;
 8002c42:	e029      	b.n	8002c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	623b      	str	r3, [r7, #32]
          break;
 8002c4c:	e024      	b.n	8002c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	3308      	adds	r3, #8
 8002c54:	623b      	str	r3, [r7, #32]
          break;
 8002c56:	e01f      	b.n	8002c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	623b      	str	r3, [r7, #32]
          break;
 8002c60:	e01a      	b.n	8002c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	623b      	str	r3, [r7, #32]
          break;
 8002c6e:	e013      	b.n	8002c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c78:	2308      	movs	r3, #8
 8002c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	611a      	str	r2, [r3, #16]
          break;
 8002c82:	e009      	b.n	8002c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c84:	2308      	movs	r3, #8
 8002c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	615a      	str	r2, [r3, #20]
          break;
 8002c8e:	e003      	b.n	8002c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
          break;
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x130>
          break;
 8002c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2bff      	cmp	r3, #255	; 0xff
 8002c9c:	d801      	bhi.n	8002ca2 <HAL_GPIO_Init+0x13a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	e001      	b.n	8002ca6 <HAL_GPIO_Init+0x13e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2bff      	cmp	r3, #255	; 0xff
 8002cac:	d802      	bhi.n	8002cb4 <HAL_GPIO_Init+0x14c>
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	e002      	b.n	8002cba <HAL_GPIO_Init+0x152>
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	3b08      	subs	r3, #8
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	210f      	movs	r1, #15
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80b1 	beq.w	8002e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ce8:	4b4d      	ldr	r3, [pc, #308]	; (8002e20 <HAL_GPIO_Init+0x2b8>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_GPIO_Init+0x2b8>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6193      	str	r3, [r2, #24]
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_GPIO_Init+0x2b8>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_GPIO_Init+0x2bc>)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	089b      	lsrs	r3, r3, #2
 8002d06:	3302      	adds	r3, #2
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a40      	ldr	r2, [pc, #256]	; (8002e28 <HAL_GPIO_Init+0x2c0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_GPIO_Init+0x1ec>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <HAL_GPIO_Init+0x2c4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00d      	beq.n	8002d50 <HAL_GPIO_Init+0x1e8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <HAL_GPIO_Init+0x2c8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d007      	beq.n	8002d4c <HAL_GPIO_Init+0x1e4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <HAL_GPIO_Init+0x2cc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_GPIO_Init+0x1e0>
 8002d44:	2303      	movs	r3, #3
 8002d46:	e006      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	e004      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e002      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d54:	2300      	movs	r3, #0
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	f002 0203 	and.w	r2, r2, #3
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	4093      	lsls	r3, r2
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d66:	492f      	ldr	r1, [pc, #188]	; (8002e24 <HAL_GPIO_Init+0x2bc>)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	492c      	ldr	r1, [pc, #176]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	4928      	ldr	r1, [pc, #160]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	4922      	ldr	r1, [pc, #136]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	491e      	ldr	r1, [pc, #120]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4918      	ldr	r1, [pc, #96]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	e006      	b.n	8002dec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	4914      	ldr	r1, [pc, #80]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d021      	beq.n	8002e3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	e021      	b.n	8002e4a <HAL_GPIO_Init+0x2e2>
 8002e06:	bf00      	nop
 8002e08:	10320000 	.word	0x10320000
 8002e0c:	10310000 	.word	0x10310000
 8002e10:	10220000 	.word	0x10220000
 8002e14:	10210000 	.word	0x10210000
 8002e18:	10120000 	.word	0x10120000
 8002e1c:	10110000 	.word	0x10110000
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40010800 	.word	0x40010800
 8002e2c:	40010c00 	.word	0x40010c00
 8002e30:	40011000 	.word	0x40011000
 8002e34:	40011400 	.word	0x40011400
 8002e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_GPIO_Init+0x304>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	4909      	ldr	r1, [pc, #36]	; (8002e6c <HAL_GPIO_Init+0x304>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f47f ae8e 	bne.w	8002b7c <HAL_GPIO_Init+0x14>
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	372c      	adds	r7, #44	; 0x2c
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e80:	787b      	ldrb	r3, [r7, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e8c:	e003      	b.n	8002e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	041a      	lsls	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	611a      	str	r2, [r3, #16]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f806 	bl	8002ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e12b      	b.n	800314e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fa28 	bl	8002360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f48:	f003 f90e 	bl	8006168 <HAL_RCC_GetPCLK1Freq>
 8002f4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a81      	ldr	r2, [pc, #516]	; (8003158 <HAL_I2C_Init+0x274>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d807      	bhi.n	8002f68 <HAL_I2C_Init+0x84>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a80      	ldr	r2, [pc, #512]	; (800315c <HAL_I2C_Init+0x278>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	bf94      	ite	ls
 8002f60:	2301      	movls	r3, #1
 8002f62:	2300      	movhi	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e006      	b.n	8002f76 <HAL_I2C_Init+0x92>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a7d      	ldr	r2, [pc, #500]	; (8003160 <HAL_I2C_Init+0x27c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0e7      	b.n	800314e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a78      	ldr	r2, [pc, #480]	; (8003164 <HAL_I2C_Init+0x280>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	0c9b      	lsrs	r3, r3, #18
 8002f88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a6a      	ldr	r2, [pc, #424]	; (8003158 <HAL_I2C_Init+0x274>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d802      	bhi.n	8002fb8 <HAL_I2C_Init+0xd4>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	e009      	b.n	8002fcc <HAL_I2C_Init+0xe8>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	4a69      	ldr	r2, [pc, #420]	; (8003168 <HAL_I2C_Init+0x284>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	099b      	lsrs	r3, r3, #6
 8002fca:	3301      	adds	r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	495c      	ldr	r1, [pc, #368]	; (8003158 <HAL_I2C_Init+0x274>)
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	d819      	bhi.n	8003020 <HAL_I2C_Init+0x13c>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e59      	subs	r1, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ffa:	1c59      	adds	r1, r3, #1
 8002ffc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003000:	400b      	ands	r3, r1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_I2C_Init+0x138>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1e59      	subs	r1, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fbb1 f3f3 	udiv	r3, r1, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	e051      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 800301c:	2304      	movs	r3, #4
 800301e:	e04f      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d111      	bne.n	800304c <HAL_I2C_Init+0x168>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e012      	b.n	8003072 <HAL_I2C_Init+0x18e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	0099      	lsls	r1, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Init+0x196>
 8003076:	2301      	movs	r3, #1
 8003078:	e022      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <HAL_I2C_Init+0x1bc>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e58      	subs	r0, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	440b      	add	r3, r1
 8003090:	fbb0 f3f3 	udiv	r3, r0, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309e:	e00f      	b.n	80030c0 <HAL_I2C_Init+0x1dc>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e58      	subs	r0, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	0099      	lsls	r1, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	6809      	ldr	r1, [r1, #0]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6911      	ldr	r1, [r2, #16]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68d2      	ldr	r2, [r2, #12]
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	000186a0 	.word	0x000186a0
 800315c:	001e847f 	.word	0x001e847f
 8003160:	003d08ff 	.word	0x003d08ff
 8003164:	431bde83 	.word	0x431bde83
 8003168:	10624dd3 	.word	0x10624dd3

0800316c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d103      	bne.n	800318a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	460b      	mov	r3, r1
 80031a2:	817b      	strh	r3, [r7, #10]
 80031a4:	4613      	mov	r3, r2
 80031a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	f040 8081 	bne.w	80032bc <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ba:	4b43      	ldr	r3, [pc, #268]	; (80032c8 <HAL_I2C_Master_Transmit_IT+0x134>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	4a42      	ldr	r2, [pc, #264]	; (80032cc <HAL_I2C_Master_Transmit_IT+0x138>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0a1a      	lsrs	r2, r3, #8
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d112      	bne.n	8003206 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	e05b      	b.n	80032be <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d0df      	beq.n	80031d4 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_I2C_Master_Transmit_IT+0x8e>
 800321e:	2302      	movs	r3, #2
 8003220:	e04d      	b.n	80032be <HAL_I2C_Master_Transmit_IT+0x12a>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d007      	beq.n	8003248 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2221      	movs	r2, #33	; 0x21
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2210      	movs	r2, #16
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	893a      	ldrh	r2, [r7, #8]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800328a:	897a      	ldrh	r2, [r7, #10]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80032a6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	20000004 	.word	0x20000004
 80032cc:	14f8b589 	.word	0x14f8b589
 80032d0:	ffff0000 	.word	0xffff0000

080032d4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
 80032e4:	4613      	mov	r3, r2
 80032e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	f040 8089 	bne.w	800340c <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_I2C_Master_Receive_IT+0x144>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	08db      	lsrs	r3, r3, #3
 8003300:	4a46      	ldr	r2, [pc, #280]	; (800341c <HAL_I2C_Master_Receive_IT+0x148>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0a1a      	lsrs	r2, r3, #8
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d112      	bne.n	8003346 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	e063      	b.n	800340e <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d0df      	beq.n	8003314 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2C_Master_Receive_IT+0x8e>
 800335e:	2302      	movs	r3, #2
 8003360:	e055      	b.n	800340e <HAL_I2C_Master_Receive_IT+0x13a>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d007      	beq.n	8003388 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2222      	movs	r2, #34	; 0x22
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2210      	movs	r2, #16
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	893a      	ldrh	r2, [r7, #8]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <HAL_I2C_Master_Receive_IT+0x14c>)
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80033ca:	897a      	ldrh	r2, [r7, #10]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80033e6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003406:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	e000      	b.n	800340e <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 800340c:	2302      	movs	r3, #2
  }
}
 800340e:	4618      	mov	r0, r3
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000004 	.word	0x20000004
 800341c:	14f8b589 	.word	0x14f8b589
 8003420:	ffff0000 	.word	0xffff0000

08003424 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	461a      	mov	r2, r3
 8003432:	4603      	mov	r3, r0
 8003434:	817b      	strh	r3, [r7, #10]
 8003436:	460b      	mov	r3, r1
 8003438:	813b      	strh	r3, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800343e:	f7ff f9d1 	bl	80027e4 <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b20      	cmp	r3, #32
 800344e:	f040 80d9 	bne.w	8003604 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2319      	movs	r3, #25
 8003458:	2201      	movs	r2, #1
 800345a:	496d      	ldr	r1, [pc, #436]	; (8003610 <HAL_I2C_Mem_Write+0x1ec>)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f002 f839 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
 800346a:	e0cc      	b.n	8003606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_I2C_Mem_Write+0x56>
 8003476:	2302      	movs	r3, #2
 8003478:	e0c5      	b.n	8003606 <HAL_I2C_Mem_Write+0x1e2>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d007      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2221      	movs	r2, #33	; 0x21
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_I2C_Mem_Write+0x1f0>)
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034e2:	88f8      	ldrh	r0, [r7, #6]
 80034e4:	893a      	ldrh	r2, [r7, #8]
 80034e6:	8979      	ldrh	r1, [r7, #10]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	4603      	mov	r3, r0
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f001 fdc8 	bl	8005088 <I2C_RequestMemoryWrite>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d052      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e081      	b.n	8003606 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f002 f8fe 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <HAL_I2C_Mem_Write+0x180>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1aa      	bne.n	8003502 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f002 f8f1 	bl	8005798 <I2C_WaitOnBTFFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00d      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e016      	b.n	8003606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000

08003618 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	4608      	mov	r0, r1
 8003622:	4611      	mov	r1, r2
 8003624:	461a      	mov	r2, r3
 8003626:	4603      	mov	r3, r0
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	460b      	mov	r3, r1
 800362c:	813b      	strh	r3, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003636:	f7ff f8d5 	bl	80027e4 <HAL_GetTick>
 800363a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b20      	cmp	r3, #32
 8003646:	f040 8244 	bne.w	8003ad2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2319      	movs	r3, #25
 8003650:	2201      	movs	r2, #1
 8003652:	4982      	ldr	r1, [pc, #520]	; (800385c <HAL_I2C_Mem_Read+0x244>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f001 ff3d 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	e237      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Mem_Read+0x5a>
 800366e:	2302      	movs	r3, #2
 8003670:	e230      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d007      	beq.n	8003698 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2222      	movs	r2, #34	; 0x22
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a62      	ldr	r2, [pc, #392]	; (8003860 <HAL_I2C_Mem_Read+0x248>)
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036da:	88f8      	ldrh	r0, [r7, #6]
 80036dc:	893a      	ldrh	r2, [r7, #8]
 80036de:	8979      	ldrh	r1, [r7, #10]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4603      	mov	r3, r0
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f001 fd62 	bl	80051b4 <I2C_RequestMemoryRead>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1ec      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e1c0      	b.n	8003aac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b01      	cmp	r3, #1
 8003730:	d11e      	bne.n	8003770 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003742:	b672      	cpsid	i
}
 8003744:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800376c:	b662      	cpsie	i
}
 800376e:	e035      	b.n	80037dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b02      	cmp	r3, #2
 8003776:	d11e      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003786:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003788:	b672      	cpsid	i
}
 800378a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037b2:	b662      	cpsie	i
}
 80037b4:	e012      	b.n	80037dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80037dc:	e166      	b.n	8003aac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	f200 811f 	bhi.w	8003a26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d123      	bne.n	8003838 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f002 f849 	bl	800588c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e167      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003836:	e139      	b.n	8003aac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b02      	cmp	r3, #2
 800383e:	d152      	bne.n	80038e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	2200      	movs	r2, #0
 8003848:	4906      	ldr	r1, [pc, #24]	; (8003864 <HAL_I2C_Mem_Read+0x24c>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f001 fe42 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e13c      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
 800385a:	bf00      	nop
 800385c:	00100002 	.word	0x00100002
 8003860:	ffff0000 	.word	0xffff0000
 8003864:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003868:	b672      	cpsid	i
}
 800386a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038ae:	b662      	cpsie	i
}
 80038b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e4:	e0e2      	b.n	8003aac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	2200      	movs	r2, #0
 80038ee:	497b      	ldr	r1, [pc, #492]	; (8003adc <HAL_I2C_Mem_Read+0x4c4>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f001 fdef 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0e9      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003910:	b672      	cpsid	i
}
 8003912:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003946:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_I2C_Mem_Read+0x4c8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	4a65      	ldr	r2, [pc, #404]	; (8003ae4 <HAL_I2C_Mem_Read+0x4cc>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0a1a      	lsrs	r2, r3, #8
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00da      	lsls	r2, r3, #3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	3b01      	subs	r3, #1
 8003964:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d118      	bne.n	800399e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800398e:	b662      	cpsie	i
}
 8003990:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e09a      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d1d9      	bne.n	8003960 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039ee:	b662      	cpsie	i
}
 80039f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a24:	e042      	b.n	8003aac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f001 ff2e 	bl	800588c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e04c      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d118      	bne.n	8003aac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f ae94 	bne.w	80037de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	00010004 	.word	0x00010004
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	14f8b589 	.word	0x14f8b589

08003ae8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d003      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x38>
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	f040 80c1 	bne.w	8003ca2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b40:	d003      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x62>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b48:	d101      	bne.n	8003b4e <HAL_I2C_EV_IRQHandler+0x66>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x68>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f000 8132 	beq.w	8003dba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_I2C_EV_IRQHandler+0x92>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f001 ff18 	bl	80059a2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fcd6 	bl	8004524 <I2C_Master_SB>
 8003b78:	e092      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0xb2>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	0a5b      	lsrs	r3, r3, #9
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fd4b 	bl	800462e <I2C_Master_ADD10>
 8003b98:	e082      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xd2>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fd64 	bl	8004680 <I2C_Master_ADDR>
 8003bb8:	e072      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d03b      	beq.n	8003c3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd4:	f000 80f3 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	09db      	lsrs	r3, r3, #7
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00f      	beq.n	8003c04 <HAL_I2C_EV_IRQHandler+0x11c>
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_I2C_EV_IRQHandler+0x11c>
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f942 	bl	8003e86 <I2C_MasterTransmit_TXE>
 8003c02:	e04d      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80d6 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	0a5b      	lsrs	r3, r3, #9
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80cf 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	2b21      	cmp	r3, #33	; 0x21
 8003c24:	d103      	bne.n	8003c2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f9c9 	bl	8003fbe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2c:	e0c7      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	f040 80c4 	bne.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa37 	bl	80040aa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3c:	e0bf      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4c:	f000 80b7 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00f      	beq.n	8003c7c <HAL_I2C_EV_IRQHandler+0x194>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <HAL_I2C_EV_IRQHandler+0x194>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fab0 	bl	80041da <I2C_MasterReceive_RXNE>
 8003c7a:	e011      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 809a 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	0a5b      	lsrs	r3, r3, #9
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8093 	beq.w	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb59 	bl	8004350 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9e:	e08e      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ca0:	e08d      	b.n	8003dbe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e007      	b.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	0a5b      	lsrs	r3, r3, #9
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 ff1d 	bl	8004b2e <I2C_Slave_ADDR>
 8003cf4:	e066      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x22e>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	0a5b      	lsrs	r3, r3, #9
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 ff58 	bl	8004bc4 <I2C_Slave_STOPF>
 8003d14:	e056      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d16:	7bbb      	ldrb	r3, [r7, #14]
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d002      	beq.n	8003d22 <HAL_I2C_EV_IRQHandler+0x23a>
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	2b29      	cmp	r3, #41	; 0x29
 8003d20:	d125      	bne.n	8003d6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	09db      	lsrs	r3, r3, #7
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00f      	beq.n	8003d4e <HAL_I2C_EV_IRQHandler+0x266>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	0a9b      	lsrs	r3, r3, #10
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_I2C_EV_IRQHandler+0x266>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fe35 	bl	80049b6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d4c:	e039      	b.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d033      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02d      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fe62 	bl	8004a30 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d6c:	e029      	b.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00f      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0a9b      	lsrs	r3, r3, #10
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fe6c 	bl	8004a70 <I2C_SlaveReceive_RXNE>
 8003d98:	e014      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00e      	beq.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	0a5b      	lsrs	r3, r3, #9
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fe9a 	bl	8004aec <I2C_SlaveReceive_BTF>
 8003db8:	e004      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	70fb      	strb	r3, [r7, #3]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d150      	bne.n	8003f4e <I2C_MasterTransmit_TXE+0xc8>
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b21      	cmp	r3, #33	; 0x21
 8003eb0:	d14d      	bne.n	8003f4e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d01d      	beq.n	8003ef4 <I2C_MasterTransmit_TXE+0x6e>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d01a      	beq.n	8003ef4 <I2C_MasterTransmit_TXE+0x6e>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec4:	d016      	beq.n	8003ef4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ed4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2211      	movs	r2, #17
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff6c 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ef2:	e060      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f02:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d107      	bne.n	8003f3e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ff81 	bl	8003e3e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f3c:	e03b      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff3f 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f4c:	e033      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b21      	cmp	r3, #33	; 0x21
 8003f52:	d005      	beq.n	8003f60 <I2C_MasterTransmit_TXE+0xda>
 8003f54:	7bbb      	ldrb	r3, [r7, #14]
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d12d      	bne.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b22      	cmp	r3, #34	; 0x22
 8003f5e:	d12a      	bne.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f7a:	e01c      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d103      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f88e 	bl	80040aa <I2C_MemoryTransmit_TXE_BTF>
}
 8003f8e:	e012      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fb4:	e7ff      	b.n	8003fb6 <I2C_MasterTransmit_TXE+0x130>
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b21      	cmp	r3, #33	; 0x21
 8003fd6:	d164      	bne.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004006:	e04c      	b.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d01d      	beq.n	800404a <I2C_MasterTransmit_BTF+0x8c>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b20      	cmp	r3, #32
 8004012:	d01a      	beq.n	800404a <I2C_MasterTransmit_BTF+0x8c>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800401a:	d016      	beq.n	800404a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800402a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2211      	movs	r2, #17
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fec1 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
}
 8004048:	e02b      	b.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004058:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004068:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d107      	bne.n	8004094 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fed6 	bl	8003e3e <HAL_I2C_MemTxCpltCallback>
}
 8004092:	e006      	b.n	80040a2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fe94 	bl	8003dca <HAL_I2C_MasterTxCpltCallback>
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11d      	bne.n	80040fe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10b      	bne.n	80040e2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80040e0:	e077      	b.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	121b      	asrs	r3, r3, #8
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040fc:	e069      	b.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	2b01      	cmp	r3, #1
 8004104:	d10b      	bne.n	800411e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	b2da      	uxtb	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800411c:	e059      	b.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	2b02      	cmp	r3, #2
 8004124:	d152      	bne.n	80041cc <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b22      	cmp	r3, #34	; 0x22
 800412a:	d10d      	bne.n	8004148 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004146:	e044      	b.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d015      	beq.n	800417e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b21      	cmp	r3, #33	; 0x21
 8004156:	d112      	bne.n	800417e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800417c:	e029      	b.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d124      	bne.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b21      	cmp	r3, #33	; 0x21
 800418c:	d121      	bne.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800419c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fe3a 	bl	8003e3e <HAL_I2C_MemTxCpltCallback>
}
 80041ca:	e002      	b.n	80041d2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fe ffcd 	bl	800316c <I2C_Flush_DR>
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b22      	cmp	r3, #34	; 0x22
 80041ec:	f040 80ac 	bne.w	8004348 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d921      	bls.n	8004242 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b03      	cmp	r3, #3
 800422c:	f040 808c 	bne.w	8004348 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004240:	e082      	b.n	8004348 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	2b02      	cmp	r3, #2
 8004248:	d075      	beq.n	8004336 <I2C_MasterReceive_RXNE+0x15c>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d002      	beq.n	8004256 <I2C_MasterReceive_RXNE+0x7c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d16f      	bne.n	8004336 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 fae6 	bl	8005828 <I2C_WaitOnSTOPRequestThroughIT>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d142      	bne.n	80042e8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004270:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004280:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d10a      	bne.n	80042d2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fdc0 	bl	8003e50 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042d0:	e03a      	b.n	8004348 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2212      	movs	r2, #18
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fd7b 	bl	8003ddc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042e6:	e02f      	b.n	8004348 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff fd97 	bl	8003e62 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004334:	e008      	b.n	8004348 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	605a      	str	r2, [r3, #4]
}
 8004346:	e7ff      	b.n	8004348 <I2C_MasterReceive_RXNE+0x16e>
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11b      	bne.n	80043a0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800439e:	e0bd      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d129      	bne.n	80043fe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d00a      	beq.n	80043d6 <I2C_MasterReceive_BTF+0x86>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d007      	beq.n	80043d6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043fc:	e08e      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d176      	bne.n	80044f6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <I2C_MasterReceive_BTF+0xc4>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b10      	cmp	r3, #16
 8004412:	d108      	bne.n	8004426 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e019      	b.n	800445a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d002      	beq.n	8004432 <I2C_MasterReceive_BTF+0xe2>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d108      	bne.n	8004444 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e00a      	b.n	800445a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d007      	beq.n	800445a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d10a      	bne.n	80044e0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fcb9 	bl	8003e50 <HAL_I2C_MemRxCpltCallback>
}
 80044de:	e01d      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2212      	movs	r2, #18
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fc74 	bl	8003ddc <HAL_I2C_MasterRxCpltCallback>
}
 80044f4:	e012      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d117      	bne.n	8004568 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004550:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004552:	e067      	b.n	8004624 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	611a      	str	r2, [r3, #16]
}
 8004566:	e05d      	b.n	8004624 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004570:	d133      	bne.n	80045da <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b21      	cmp	r3, #33	; 0x21
 800457c:	d109      	bne.n	8004592 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800458e:	611a      	str	r2, [r3, #16]
 8004590:	e008      	b.n	80045a4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <I2C_Master_SB+0x92>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d108      	bne.n	80045c8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d032      	beq.n	8004624 <I2C_Master_SB+0x100>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d02d      	beq.n	8004624 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d6:	605a      	str	r2, [r3, #4]
}
 80045d8:	e024      	b.n	8004624 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	11db      	asrs	r3, r3, #7
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0306 	and.w	r3, r3, #6
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f063 030f 	orn	r3, r3, #15
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]
}
 80045fe:	e011      	b.n	8004624 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10d      	bne.n	8004624 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	b29b      	uxth	r3, r3
 800460e:	11db      	asrs	r3, r3, #7
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0306 	and.w	r3, r3, #6
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f063 030e 	orn	r3, r3, #14
 800461c:	b2da      	uxtb	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	b2da      	uxtb	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <I2C_Master_ADD10+0x26>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d108      	bne.n	8004666 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <I2C_Master_ADD10+0x48>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004674:	605a      	str	r2, [r3, #4]
  }
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004680:	b480      	push	{r7}
 8004682:	b091      	sub	sp, #68	; 0x44
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b22      	cmp	r3, #34	; 0x22
 80046a8:	f040 8174 	bne.w	8004994 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <I2C_Master_ADDR+0x54>
 80046b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d10b      	bne.n	80046d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	633b      	str	r3, [r7, #48]	; 0x30
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	e16b      	b.n	80049ac <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11d      	bne.n	8004718 <I2C_Master_ADDR+0x98>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046e4:	d118      	bne.n	8004718 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	651a      	str	r2, [r3, #80]	; 0x50
 8004716:	e149      	b.n	80049ac <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d113      	bne.n	800474a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e120      	b.n	800498c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	f040 808a 	bne.w	800486a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800475c:	d137      	bne.n	80047ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d113      	bne.n	80047a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	e0f2      	b.n	800498c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a6:	2300      	movs	r3, #0
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e0de      	b.n	800498c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d02e      	beq.n	8004832 <I2C_Master_ADDR+0x1b2>
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d02b      	beq.n	8004832 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	2b12      	cmp	r3, #18
 80047de:	d102      	bne.n	80047e6 <I2C_Master_ADDR+0x166>
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d125      	bne.n	8004832 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d00e      	beq.n	800480a <I2C_Master_ADDR+0x18a>
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d00b      	beq.n	800480a <I2C_Master_ADDR+0x18a>
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d008      	beq.n	800480a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e007      	b.n	800481a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004818:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	e0ac      	b.n	800498c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004840:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e090      	b.n	800498c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d158      	bne.n	8004926 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	2b04      	cmp	r3, #4
 8004878:	d021      	beq.n	80048be <I2C_Master_ADDR+0x23e>
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	2b02      	cmp	r3, #2
 800487e:	d01e      	beq.n	80048be <I2C_Master_ADDR+0x23e>
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	2b10      	cmp	r3, #16
 8004884:	d01b      	beq.n	80048be <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004894:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e012      	b.n	80048e4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f2:	d14b      	bne.n	800498c <I2C_Master_ADDR+0x30c>
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048fa:	d00b      	beq.n	8004914 <I2C_Master_ADDR+0x294>
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d008      	beq.n	8004914 <I2C_Master_ADDR+0x294>
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	2b08      	cmp	r3, #8
 8004906:	d005      	beq.n	8004914 <I2C_Master_ADDR+0x294>
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	2b10      	cmp	r3, #16
 800490c:	d002      	beq.n	8004914 <I2C_Master_ADDR+0x294>
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b20      	cmp	r3, #32
 8004912:	d13b      	bne.n	800498c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	e032      	b.n	800498c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004934:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d117      	bne.n	8004976 <I2C_Master_ADDR+0x2f6>
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800494c:	d00b      	beq.n	8004966 <I2C_Master_ADDR+0x2e6>
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b01      	cmp	r3, #1
 8004952:	d008      	beq.n	8004966 <I2C_Master_ADDR+0x2e6>
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	2b08      	cmp	r3, #8
 8004958:	d005      	beq.n	8004966 <I2C_Master_ADDR+0x2e6>
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2b10      	cmp	r3, #16
 800495e:	d002      	beq.n	8004966 <I2C_Master_ADDR+0x2e6>
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	2b20      	cmp	r3, #32
 8004964:	d107      	bne.n	8004976 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004974:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004992:	e00b      	b.n	80049ac <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
}
 80049aa:	e7ff      	b.n	80049ac <I2C_Master_ADDR+0x32c>
 80049ac:	bf00      	nop
 80049ae:	3744      	adds	r7, #68	; 0x44
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02b      	beq.n	8004a28 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d114      	bne.n	8004a28 <I2C_SlaveTransmit_TXE+0x72>
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b29      	cmp	r3, #41	; 0x29
 8004a02:	d111      	bne.n	8004a28 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2228      	movs	r2, #40	; 0x28
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff f9e3 	bl	8003dee <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d011      	beq.n	8004a66 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	781a      	ldrb	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02c      	beq.n	8004ae4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d114      	bne.n	8004ae4 <I2C_SlaveReceive_RXNE+0x74>
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b2a      	cmp	r3, #42	; 0x2a
 8004abe:	d111      	bne.n	8004ae4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ace:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2222      	movs	r2, #34	; 0x22
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2228      	movs	r2, #40	; 0x28
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff f98e 	bl	8003e00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d012      	beq.n	8004b24 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b48:	2b28      	cmp	r3, #40	; 0x28
 8004b4a:	d127      	bne.n	8004b9c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	09db      	lsrs	r3, r3, #7
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	81bb      	strh	r3, [r7, #12]
 8004b7e:	e002      	b.n	8004b86 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b8e:	89ba      	ldrh	r2, [r7, #12]
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	4619      	mov	r1, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff f93c 	bl	8003e12 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b9a:	e00e      	b.n	8004bba <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004be4:	2300      	movs	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d172      	bne.n	8004d08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b22      	cmp	r3, #34	; 0x22
 8004c26:	d002      	beq.n	8004c2e <I2C_Slave_STOPF+0x6a>
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c2c:	d135      	bne.n	8004c9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0204 	orr.w	r2, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd ff70 	bl	8002b4c <HAL_DMA_GetState>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d049      	beq.n	8004d06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	4a69      	ldr	r2, [pc, #420]	; (8004e1c <I2C_Slave_STOPF+0x258>)
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fd feec 	bl	8002a5c <HAL_DMA_Abort_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d03d      	beq.n	8004d06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c94:	4610      	mov	r0, r2
 8004c96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c98:	e035      	b.n	8004d06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0204 	orr.w	r2, r3, #4
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ccc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd ff3a 	bl	8002b4c <HAL_DMA_GetState>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d014      	beq.n	8004d08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	4a4e      	ldr	r2, [pc, #312]	; (8004e1c <I2C_Slave_STOPF+0x258>)
 8004ce4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fd feb6 	bl	8002a5c <HAL_DMA_Abort_IT>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3
 8004d04:	e000      	b.n	8004d08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d03e      	beq.n	8004d90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d112      	bne.n	8004d46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d112      	bne.n	8004d7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f843 	bl	8004e24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d9e:	e039      	b.n	8004e14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b2a      	cmp	r3, #42	; 0x2a
 8004da4:	d109      	bne.n	8004dba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2228      	movs	r2, #40	; 0x28
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff f823 	bl	8003e00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b28      	cmp	r3, #40	; 0x28
 8004dc4:	d111      	bne.n	8004dea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <I2C_Slave_STOPF+0x25c>)
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff f822 	bl	8003e2c <HAL_I2C_ListenCpltCallback>
}
 8004de8:	e014      	b.n	8004e14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	2b22      	cmp	r3, #34	; 0x22
 8004df0:	d002      	beq.n	8004df8 <I2C_Slave_STOPF+0x234>
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	2b22      	cmp	r3, #34	; 0x22
 8004df6:	d10d      	bne.n	8004e14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fe fff6 	bl	8003e00 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	08005385 	.word	0x08005385
 8004e20:	ffff0000 	.word	0xffff0000

08004e24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d002      	beq.n	8004e48 <I2C_ITError+0x24>
 8004e42:	7bbb      	ldrb	r3, [r7, #14]
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d10a      	bne.n	8004e5e <I2C_ITError+0x3a>
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b22      	cmp	r3, #34	; 0x22
 8004e4c:	d107      	bne.n	8004e5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e64:	2b28      	cmp	r3, #40	; 0x28
 8004e66:	d107      	bne.n	8004e78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2228      	movs	r2, #40	; 0x28
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e76:	e015      	b.n	8004ea4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e86:	d00a      	beq.n	8004e9e <I2C_ITError+0x7a>
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b60      	cmp	r3, #96	; 0x60
 8004e8c:	d007      	beq.n	8004e9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d162      	bne.n	8004f7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d020      	beq.n	8004f14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	4a6a      	ldr	r2, [pc, #424]	; (8005080 <I2C_ITError+0x25c>)
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd fdbc 	bl	8002a5c <HAL_DMA_Abort_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8089 	beq.w	8004ffe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4798      	blx	r3
 8004f12:	e074      	b.n	8004ffe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	4a59      	ldr	r2, [pc, #356]	; (8005080 <I2C_ITError+0x25c>)
 8004f1a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fd fd9b 	bl	8002a5c <HAL_DMA_Abort_IT>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d068      	beq.n	8004ffe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d10b      	bne.n	8004f52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f74:	4610      	mov	r0, r2
 8004f76:	4798      	blx	r3
 8004f78:	e041      	b.n	8004ffe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b60      	cmp	r3, #96	; 0x60
 8004f84:	d125      	bne.n	8004fd2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d10b      	bne.n	8004fba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fe ff52 	bl	8003e74 <HAL_I2C_AbortCpltCallback>
 8004fd0:	e015      	b.n	8004ffe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d10b      	bne.n	8004ff8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fe ff32 	bl	8003e62 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10e      	bne.n	800502c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800503a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005042:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d113      	bne.n	8005078 <I2C_ITError+0x254>
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b28      	cmp	r3, #40	; 0x28
 8005054:	d110      	bne.n	8005078 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <I2C_ITError+0x260>)
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe feda 	bl	8003e2c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	08005385 	.word	0x08005385
 8005084:	ffff0000 	.word	0xffff0000

08005088 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	461a      	mov	r2, r3
 8005096:	4603      	mov	r3, r0
 8005098:	817b      	strh	r3, [r7, #10]
 800509a:	460b      	mov	r3, r1
 800509c:	813b      	strh	r3, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fa08 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00d      	beq.n	80050e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d8:	d103      	bne.n	80050e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e05f      	b.n	80051a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050e6:	897b      	ldrh	r3, [r7, #10]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	6a3a      	ldr	r2, [r7, #32]
 80050fa:	492d      	ldr	r1, [pc, #180]	; (80051b0 <I2C_RequestMemoryWrite+0x128>)
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fa63 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e04c      	b.n	80051a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	6a39      	ldr	r1, [r7, #32]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 faee 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00d      	beq.n	800514e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b04      	cmp	r3, #4
 8005138:	d107      	bne.n	800514a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e02b      	b.n	80051a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005154:	893b      	ldrh	r3, [r7, #8]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	611a      	str	r2, [r3, #16]
 800515e:	e021      	b.n	80051a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005160:	893b      	ldrh	r3, [r7, #8]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	b29b      	uxth	r3, r3
 8005166:	b2da      	uxtb	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	6a39      	ldr	r1, [r7, #32]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fac8 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b04      	cmp	r3, #4
 8005184:	d107      	bne.n	8005196 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e005      	b.n	80051a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800519a:	893b      	ldrh	r3, [r7, #8]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	00010002 	.word	0x00010002

080051b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	4608      	mov	r0, r1
 80051be:	4611      	mov	r1, r2
 80051c0:	461a      	mov	r2, r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	817b      	strh	r3, [r7, #10]
 80051c6:	460b      	mov	r3, r1
 80051c8:	813b      	strh	r3, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f96a 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00d      	beq.n	8005222 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005214:	d103      	bne.n	800521e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e0aa      	b.n	8005378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005230:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	4952      	ldr	r1, [pc, #328]	; (8005380 <I2C_RequestMemoryRead+0x1cc>)
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f9c5 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e097      	b.n	8005378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005260:	6a39      	ldr	r1, [r7, #32]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fa50 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b04      	cmp	r3, #4
 8005274:	d107      	bne.n	8005286 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005284:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e076      	b.n	8005378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005290:	893b      	ldrh	r3, [r7, #8]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	611a      	str	r2, [r3, #16]
 800529a:	e021      	b.n	80052e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800529c:	893b      	ldrh	r3, [r7, #8]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	6a39      	ldr	r1, [r7, #32]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fa2a 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d107      	bne.n	80052d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e050      	b.n	8005378 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052d6:	893b      	ldrh	r3, [r7, #8]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e2:	6a39      	ldr	r1, [r7, #32]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fa0f 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d107      	bne.n	8005308 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005306:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e035      	b.n	8005378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2200      	movs	r2, #0
 8005324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f8d3 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d103      	bne.n	800534c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e013      	b.n	8005378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005350:	897b      	ldrh	r3, [r7, #10]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	b2da      	uxtb	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	4906      	ldr	r1, [pc, #24]	; (8005380 <I2C_RequestMemoryRead+0x1cc>)
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f92e 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	00010002 	.word	0x00010002

08005384 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800539e:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <I2C_DMAAbort+0x148>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	08db      	lsrs	r3, r3, #3
 80053a4:	4a4a      	ldr	r2, [pc, #296]	; (80054d0 <I2C_DMAAbort+0x14c>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0a1a      	lsrs	r2, r3, #8
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	00da      	lsls	r2, r3, #3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80053ca:	e00a      	b.n	80053e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d0ea      	beq.n	80053b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ee:	2200      	movs	r2, #0
 80053f0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	2200      	movs	r2, #0
 8005400:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2200      	movs	r2, #0
 8005416:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	2200      	movs	r2, #0
 8005426:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	2200      	movs	r2, #0
 8005436:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b60      	cmp	r3, #96	; 0x60
 8005452:	d10e      	bne.n	8005472 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7fe fd02 	bl	8003e74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005470:	e027      	b.n	80054c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005478:	2b28      	cmp	r3, #40	; 0x28
 800547a:	d117      	bne.n	80054ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800549a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2228      	movs	r2, #40	; 0x28
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054aa:	e007      	b.n	80054bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80054bc:	6978      	ldr	r0, [r7, #20]
 80054be:	f7fe fcd0 	bl	8003e62 <HAL_I2C_ErrorCallback>
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000004 	.word	0x20000004
 80054d0:	14f8b589 	.word	0x14f8b589

080054d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e4:	e048      	b.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d044      	beq.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ee:	f7fd f979 	bl	80027e4 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d139      	bne.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	0c1b      	lsrs	r3, r3, #16
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10d      	bne.n	800552a <I2C_WaitOnFlagUntilTimeout+0x56>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	43da      	mvns	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	e00c      	b.n	8005544 <I2C_WaitOnFlagUntilTimeout+0x70>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	43da      	mvns	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4013      	ands	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	429a      	cmp	r2, r3
 8005548:	d116      	bne.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e023      	b.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d10d      	bne.n	800559e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	43da      	mvns	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	e00c      	b.n	80055b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	43da      	mvns	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d093      	beq.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055d6:	e071      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e6:	d123      	bne.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f043 0204 	orr.w	r2, r3, #4
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e067      	b.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d041      	beq.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fd f8d4 	bl	80027e4 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d136      	bne.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10c      	bne.n	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	43da      	mvns	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf14      	ite	ne
 800566a:	2301      	movne	r3, #1
 800566c:	2300      	moveq	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	e00b      	b.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	43da      	mvns	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4013      	ands	r3, r2
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e021      	b.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10c      	bne.n	80056e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	43da      	mvns	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	e00b      	b.n	80056f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	43da      	mvns	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf14      	ite	ne
 80056f2:	2301      	movne	r3, #1
 80056f4:	2300      	moveq	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f47f af6d 	bne.w	80055d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005714:	e034      	b.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f915 	bl	8005946 <I2C_IsAcknowledgeFailed>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e034      	b.n	8005790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d028      	beq.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572e:	f7fd f859 	bl	80027e4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11d      	bne.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d016      	beq.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	f043 0220 	orr.w	r2, r3, #32
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e007      	b.n	8005790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d1c3      	bne.n	8005716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a4:	e034      	b.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f8cd 	bl	8005946 <I2C_IsAcknowledgeFailed>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e034      	b.n	8005820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d028      	beq.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fd f811 	bl	80027e4 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11d      	bne.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d016      	beq.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d1c3      	bne.n	80057a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	0a1a      	lsrs	r2, r3, #8
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3b01      	subs	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e008      	b.n	8005878 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005874:	d0e9      	beq.n	800584a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000004 	.word	0x20000004
 8005888:	14f8b589 	.word	0x14f8b589

0800588c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005898:	e049      	b.n	800592e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d119      	bne.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0210 	mvn.w	r2, #16
 80058b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e030      	b.n	800593e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058dc:	f7fc ff82 	bl	80027e4 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d302      	bcc.n	80058f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11d      	bne.n	800592e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d016      	beq.n	800592e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f043 0220 	orr.w	r2, r3, #32
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e007      	b.n	800593e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d1ae      	bne.n	800589a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d11b      	bne.n	8005996 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005966:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80059b2:	d103      	bne.n	80059bc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80059ba:	e007      	b.n	80059cc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80059c4:	d102      	bne.n	80059cc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2208      	movs	r2, #8
 80059ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e26c      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8087 	beq.w	8005b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059f8:	4b92      	ldr	r3, [pc, #584]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 030c 	and.w	r3, r3, #12
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d00c      	beq.n	8005a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a04:	4b8f      	ldr	r3, [pc, #572]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d112      	bne.n	8005a36 <HAL_RCC_OscConfig+0x5e>
 8005a10:	4b8c      	ldr	r3, [pc, #560]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1c:	d10b      	bne.n	8005a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1e:	4b89      	ldr	r3, [pc, #548]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d06c      	beq.n	8005b04 <HAL_RCC_OscConfig+0x12c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d168      	bne.n	8005b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e246      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d106      	bne.n	8005a4e <HAL_RCC_OscConfig+0x76>
 8005a40:	4b80      	ldr	r3, [pc, #512]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a7f      	ldr	r2, [pc, #508]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	e02e      	b.n	8005aac <HAL_RCC_OscConfig+0xd4>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x98>
 8005a56:	4b7b      	ldr	r3, [pc, #492]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7a      	ldr	r2, [pc, #488]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a77      	ldr	r2, [pc, #476]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e01d      	b.n	8005aac <HAL_RCC_OscConfig+0xd4>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0xbc>
 8005a7a:	4b72      	ldr	r3, [pc, #456]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a71      	ldr	r2, [pc, #452]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b6f      	ldr	r3, [pc, #444]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a6e      	ldr	r2, [pc, #440]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0xd4>
 8005a94:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6a      	ldr	r2, [pc, #424]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b68      	ldr	r3, [pc, #416]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a67      	ldr	r2, [pc, #412]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab4:	f7fc fe96 	bl	80027e4 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005abc:	f7fc fe92 	bl	80027e4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e1fa      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b5d      	ldr	r3, [pc, #372]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0xe4>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fc fe82 	bl	80027e4 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fc fe7e 	bl	80027e4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e1e6      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x10c>
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d063      	beq.n	8005bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b12:	4b4c      	ldr	r3, [pc, #304]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b1e:	4b49      	ldr	r3, [pc, #292]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d11c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x18c>
 8005b2a:	4b46      	ldr	r3, [pc, #280]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_RCC_OscConfig+0x176>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d001      	beq.n	8005b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e1ba      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4e:	4b3d      	ldr	r3, [pc, #244]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4939      	ldr	r1, [pc, #228]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	e03a      	b.n	8005bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d020      	beq.n	8005bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fc fe37 	bl	80027e4 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7a:	f7fc fe33 	bl	80027e4 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e19b      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b98:	4b2a      	ldr	r3, [pc, #168]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4927      	ldr	r1, [pc, #156]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]
 8005bac:	e015      	b.n	8005bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <HAL_RCC_OscConfig+0x270>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fc fe16 	bl	80027e4 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bbc:	f7fc fe12 	bl	80027e4 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e17a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bce:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d03a      	beq.n	8005c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d019      	beq.n	8005c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bee:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <HAL_RCC_OscConfig+0x274>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf4:	f7fc fdf6 	bl	80027e4 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bfc:	f7fc fdf2 	bl	80027e4 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e15a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f000 facc 	bl	80061b8 <RCC_Delay>
 8005c20:	e01c      	b.n	8005c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_RCC_OscConfig+0x274>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c28:	f7fc fddc 	bl	80027e4 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c2e:	e00f      	b.n	8005c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c30:	f7fc fdd8 	bl	80027e4 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d908      	bls.n	8005c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e140      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	42420000 	.word	0x42420000
 8005c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c50:	4b9e      	ldr	r3, [pc, #632]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e9      	bne.n	8005c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80a6 	beq.w	8005db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6e:	4b97      	ldr	r3, [pc, #604]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10d      	bne.n	8005c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c7a:	4b94      	ldr	r3, [pc, #592]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	4a93      	ldr	r2, [pc, #588]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	61d3      	str	r3, [r2, #28]
 8005c86:	4b91      	ldr	r3, [pc, #580]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c96:	4b8e      	ldr	r3, [pc, #568]	; (8005ed0 <HAL_RCC_OscConfig+0x4f8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d118      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca2:	4b8b      	ldr	r3, [pc, #556]	; (8005ed0 <HAL_RCC_OscConfig+0x4f8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a8a      	ldr	r2, [pc, #552]	; (8005ed0 <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cae:	f7fc fd99 	bl	80027e4 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb6:	f7fc fd95 	bl	80027e4 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b64      	cmp	r3, #100	; 0x64
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0fd      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	4b81      	ldr	r3, [pc, #516]	; (8005ed0 <HAL_RCC_OscConfig+0x4f8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d106      	bne.n	8005cea <HAL_RCC_OscConfig+0x312>
 8005cdc:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	4a7a      	ldr	r2, [pc, #488]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	6213      	str	r3, [r2, #32]
 8005ce8:	e02d      	b.n	8005d46 <HAL_RCC_OscConfig+0x36e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0x334>
 8005cf2:	4b76      	ldr	r3, [pc, #472]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	4a75      	ldr	r2, [pc, #468]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	6213      	str	r3, [r2, #32]
 8005cfe:	4b73      	ldr	r3, [pc, #460]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	4a72      	ldr	r2, [pc, #456]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d04:	f023 0304 	bic.w	r3, r3, #4
 8005d08:	6213      	str	r3, [r2, #32]
 8005d0a:	e01c      	b.n	8005d46 <HAL_RCC_OscConfig+0x36e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d10c      	bne.n	8005d2e <HAL_RCC_OscConfig+0x356>
 8005d14:	4b6d      	ldr	r3, [pc, #436]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	4a6c      	ldr	r2, [pc, #432]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d1a:	f043 0304 	orr.w	r3, r3, #4
 8005d1e:	6213      	str	r3, [r2, #32]
 8005d20:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	4a69      	ldr	r2, [pc, #420]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6213      	str	r3, [r2, #32]
 8005d2c:	e00b      	b.n	8005d46 <HAL_RCC_OscConfig+0x36e>
 8005d2e:	4b67      	ldr	r3, [pc, #412]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	4a66      	ldr	r2, [pc, #408]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	6213      	str	r3, [r2, #32]
 8005d3a:	4b64      	ldr	r3, [pc, #400]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	4a63      	ldr	r2, [pc, #396]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d015      	beq.n	8005d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d4e:	f7fc fd49 	bl	80027e4 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d54:	e00a      	b.n	8005d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d56:	f7fc fd45 	bl	80027e4 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e0ab      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6c:	4b57      	ldr	r3, [pc, #348]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0ee      	beq.n	8005d56 <HAL_RCC_OscConfig+0x37e>
 8005d78:	e014      	b.n	8005da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7a:	f7fc fd33 	bl	80027e4 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d80:	e00a      	b.n	8005d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fc fd2f 	bl	80027e4 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e095      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d98:	4b4c      	ldr	r3, [pc, #304]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1ee      	bne.n	8005d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005daa:	4b48      	ldr	r3, [pc, #288]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	4a47      	ldr	r2, [pc, #284]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8081 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d061      	beq.n	8005e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d146      	bne.n	8005e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <HAL_RCC_OscConfig+0x4fc>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fc fd03 	bl	80027e4 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de2:	f7fc fcff 	bl	80027e4 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e067      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df4:	4b35      	ldr	r3, [pc, #212]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f0      	bne.n	8005de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d108      	bne.n	8005e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e0a:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	492d      	ldr	r1, [pc, #180]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a19      	ldr	r1, [r3, #32]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	4927      	ldr	r1, [pc, #156]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e34:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <HAL_RCC_OscConfig+0x4fc>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fc fcd3 	bl	80027e4 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e42:	f7fc fccf 	bl	80027e4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e037      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e54:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x46a>
 8005e60:	e02f      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <HAL_RCC_OscConfig+0x4fc>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fc fcbc 	bl	80027e4 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fc fcb8 	bl	80027e4 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e020      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e82:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x498>
 8005e8e:	e018      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e013      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_RCC_OscConfig+0x4f4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d106      	bne.n	8005ebe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d001      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	42420060 	.word	0x42420060

08005ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0d0      	b.n	800608e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eec:	4b6a      	ldr	r3, [pc, #424]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d910      	bls.n	8005f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b67      	ldr	r3, [pc, #412]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f023 0207 	bic.w	r2, r3, #7
 8005f02:	4965      	ldr	r1, [pc, #404]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0a:	4b63      	ldr	r3, [pc, #396]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0b8      	b.n	800608e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d020      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f34:	4b59      	ldr	r3, [pc, #356]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a58      	ldr	r2, [pc, #352]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f4c:	4b53      	ldr	r3, [pc, #332]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a52      	ldr	r2, [pc, #328]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f58:	4b50      	ldr	r3, [pc, #320]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	494d      	ldr	r1, [pc, #308]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d040      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d107      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7e:	4b47      	ldr	r3, [pc, #284]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d115      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e07f      	b.n	800608e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f96:	4b41      	ldr	r3, [pc, #260]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e073      	b.n	800608e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa6:	4b3d      	ldr	r3, [pc, #244]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e06b      	b.n	800608e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb6:	4b39      	ldr	r3, [pc, #228]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f023 0203 	bic.w	r2, r3, #3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4936      	ldr	r1, [pc, #216]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc8:	f7fc fc0c 	bl	80027e4 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd0:	f7fc fc08 	bl	80027e4 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e053      	b.n	800608e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe6:	4b2d      	ldr	r3, [pc, #180]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 020c 	and.w	r2, r3, #12
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d1eb      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff8:	4b27      	ldr	r3, [pc, #156]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d210      	bcs.n	8006028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 0207 	bic.w	r2, r3, #7
 800600e:	4922      	ldr	r1, [pc, #136]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006016:	4b20      	ldr	r3, [pc, #128]	; (8006098 <HAL_RCC_ClockConfig+0x1c0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d001      	beq.n	8006028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e032      	b.n	800608e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006034:	4b19      	ldr	r3, [pc, #100]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4916      	ldr	r1, [pc, #88]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	490e      	ldr	r1, [pc, #56]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006066:	f000 f821 	bl	80060ac <HAL_RCC_GetSysClockFreq>
 800606a:	4602      	mov	r2, r0
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_ClockConfig+0x1c4>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	490a      	ldr	r1, [pc, #40]	; (80060a0 <HAL_RCC_ClockConfig+0x1c8>)
 8006078:	5ccb      	ldrb	r3, [r1, r3]
 800607a:	fa22 f303 	lsr.w	r3, r2, r3
 800607e:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <HAL_RCC_ClockConfig+0x1cc>)
 8006080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <HAL_RCC_ClockConfig+0x1d0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f7fc fb6a 	bl	8002760 <HAL_InitTick>

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40022000 	.word	0x40022000
 800609c:	40021000 	.word	0x40021000
 80060a0:	0800affc 	.word	0x0800affc
 80060a4:	20000004 	.word	0x20000004
 80060a8:	20000008 	.word	0x20000008

080060ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	2300      	movs	r3, #0
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	2300      	movs	r3, #0
 80060c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060c6:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <HAL_RCC_GetSysClockFreq+0x94>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 030c 	and.w	r3, r3, #12
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d002      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0x30>
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d003      	beq.n	80060e2 <HAL_RCC_GetSysClockFreq+0x36>
 80060da:	e027      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060dc:	4b19      	ldr	r3, [pc, #100]	; (8006144 <HAL_RCC_GetSysClockFreq+0x98>)
 80060de:	613b      	str	r3, [r7, #16]
      break;
 80060e0:	e027      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	0c9b      	lsrs	r3, r3, #18
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	4a17      	ldr	r2, [pc, #92]	; (8006148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80060ec:	5cd3      	ldrb	r3, [r2, r3]
 80060ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d010      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <HAL_RCC_GetSysClockFreq+0x94>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	0c5b      	lsrs	r3, r3, #17
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	4a11      	ldr	r2, [pc, #68]	; (800614c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006106:	5cd3      	ldrb	r3, [r2, r3]
 8006108:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <HAL_RCC_GetSysClockFreq+0x98>)
 800610e:	fb02 f203 	mul.w	r2, r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e004      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a0c      	ldr	r2, [pc, #48]	; (8006150 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006120:	fb02 f303 	mul.w	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	613b      	str	r3, [r7, #16]
      break;
 800612a:	e002      	b.n	8006132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_RCC_GetSysClockFreq+0x98>)
 800612e:	613b      	str	r3, [r7, #16]
      break;
 8006130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006132:	693b      	ldr	r3, [r7, #16]
}
 8006134:	4618      	mov	r0, r3
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000
 8006144:	007a1200 	.word	0x007a1200
 8006148:	0800b014 	.word	0x0800b014
 800614c:	0800b024 	.word	0x0800b024
 8006150:	003d0900 	.word	0x003d0900

08006154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006158:	4b02      	ldr	r3, [pc, #8]	; (8006164 <HAL_RCC_GetHCLKFreq+0x10>)
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr
 8006164:	20000004 	.word	0x20000004

08006168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800616c:	f7ff fff2 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006170:	4602      	mov	r2, r0
 8006172:	4b05      	ldr	r3, [pc, #20]	; (8006188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	4903      	ldr	r1, [pc, #12]	; (800618c <HAL_RCC_GetPCLK1Freq+0x24>)
 800617e:	5ccb      	ldrb	r3, [r1, r3]
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006184:	4618      	mov	r0, r3
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40021000 	.word	0x40021000
 800618c:	0800b00c 	.word	0x0800b00c

08006190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006194:	f7ff ffde 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006198:	4602      	mov	r2, r0
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	0adb      	lsrs	r3, r3, #11
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	4903      	ldr	r1, [pc, #12]	; (80061b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061a6:	5ccb      	ldrb	r3, [r1, r3]
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40021000 	.word	0x40021000
 80061b4:	0800b00c 	.word	0x0800b00c

080061b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <RCC_Delay+0x34>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a0a      	ldr	r2, [pc, #40]	; (80061f0 <RCC_Delay+0x38>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	0a5b      	lsrs	r3, r3, #9
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061d4:	bf00      	nop
  }
  while (Delay --);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1e5a      	subs	r2, r3, #1
 80061da:	60fa      	str	r2, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f9      	bne.n	80061d4 <RCC_Delay+0x1c>
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr
 80061ec:	20000004 	.word	0x20000004
 80061f0:	10624dd3 	.word	0x10624dd3

080061f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e042      	b.n	800628c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fc f91c 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f91d 	bl	8006478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d16d      	bne.n	8006390 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_UART_Transmit+0x2c>
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e066      	b.n	8006392 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2221      	movs	r2, #33	; 0x21
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062d2:	f7fc fa87 	bl	80027e4 <HAL_GetTick>
 80062d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	88fa      	ldrh	r2, [r7, #6]
 80062dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ec:	d108      	bne.n	8006300 <HAL_UART_Transmit+0x6c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e003      	b.n	8006308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006308:	e02a      	b.n	8006360 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f840 	bl	800639a <UART_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e036      	b.n	8006392 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006338:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	3302      	adds	r3, #2
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	e007      	b.n	8006352 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	781a      	ldrb	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3301      	adds	r3, #1
 8006350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1cf      	bne.n	800630a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2200      	movs	r2, #0
 8006372:	2140      	movs	r1, #64	; 0x40
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f810 	bl	800639a <UART_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e006      	b.n	8006392 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	e000      	b.n	8006392 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006390:	2302      	movs	r3, #2
  }
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b090      	sub	sp, #64	; 0x40
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063aa:	e050      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d04c      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <UART_WaitOnFlagUntilTimeout+0x30>
 80063ba:	f7fc fa13 	bl	80027e4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d241      	bcs.n	800644e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	330c      	adds	r3, #12
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ea:	637a      	str	r2, [r7, #52]	; 0x34
 80063ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e5      	bne.n	80063ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3314      	adds	r3, #20
 8006404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	613b      	str	r3, [r7, #16]
   return(result);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	63bb      	str	r3, [r7, #56]	; 0x38
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3314      	adds	r3, #20
 800641c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800641e:	623a      	str	r2, [r7, #32]
 8006420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	69f9      	ldr	r1, [r7, #28]
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	61bb      	str	r3, [r7, #24]
   return(result);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e00f      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	bf0c      	ite	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	2300      	movne	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	429a      	cmp	r2, r3
 800646a:	d09f      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3740      	adds	r7, #64	; 0x40
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064b2:	f023 030c 	bic.w	r3, r3, #12
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	430b      	orrs	r3, r1
 80064be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2c      	ldr	r2, [pc, #176]	; (800658c <UART_SetConfig+0x114>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d103      	bne.n	80064e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064e0:	f7ff fe56 	bl	8006190 <HAL_RCC_GetPCLK2Freq>
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	e002      	b.n	80064ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7ff fe3e 	bl	8006168 <HAL_RCC_GetPCLK1Freq>
 80064ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009a      	lsls	r2, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	fbb2 f3f3 	udiv	r3, r2, r3
 8006504:	4a22      	ldr	r2, [pc, #136]	; (8006590 <UART_SetConfig+0x118>)
 8006506:	fba2 2303 	umull	r2, r3, r2, r3
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	0119      	lsls	r1, r3, #4
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009a      	lsls	r2, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	fbb2 f2f3 	udiv	r2, r2, r3
 8006524:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <UART_SetConfig+0x118>)
 8006526:	fba3 0302 	umull	r0, r3, r3, r2
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	2064      	movs	r0, #100	; 0x64
 800652e:	fb00 f303 	mul.w	r3, r0, r3
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	3332      	adds	r3, #50	; 0x32
 8006538:	4a15      	ldr	r2, [pc, #84]	; (8006590 <UART_SetConfig+0x118>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006544:	4419      	add	r1, r3
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009a      	lsls	r2, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	fbb2 f2f3 	udiv	r2, r2, r3
 800655c:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <UART_SetConfig+0x118>)
 800655e:	fba3 0302 	umull	r0, r3, r3, r2
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	2064      	movs	r0, #100	; 0x64
 8006566:	fb00 f303 	mul.w	r3, r0, r3
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	3332      	adds	r3, #50	; 0x32
 8006570:	4a07      	ldr	r2, [pc, #28]	; (8006590 <UART_SetConfig+0x118>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	f003 020f 	and.w	r2, r3, #15
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	440a      	add	r2, r1
 8006582:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40013800 	.word	0x40013800
 8006590:	51eb851f 	.word	0x51eb851f

08006594 <__errno>:
 8006594:	4b01      	ldr	r3, [pc, #4]	; (800659c <__errno+0x8>)
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000010 	.word	0x20000010

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	2600      	movs	r6, #0
 80065a4:	4d0c      	ldr	r5, [pc, #48]	; (80065d8 <__libc_init_array+0x38>)
 80065a6:	4c0d      	ldr	r4, [pc, #52]	; (80065dc <__libc_init_array+0x3c>)
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	f004 fc28 	bl	800ae04 <_init>
 80065b4:	2600      	movs	r6, #0
 80065b6:	4d0a      	ldr	r5, [pc, #40]	; (80065e0 <__libc_init_array+0x40>)
 80065b8:	4c0a      	ldr	r4, [pc, #40]	; (80065e4 <__libc_init_array+0x44>)
 80065ba:	1b64      	subs	r4, r4, r5
 80065bc:	10a4      	asrs	r4, r4, #2
 80065be:	42a6      	cmp	r6, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c8:	4798      	blx	r3
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d2:	4798      	blx	r3
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	0800b4e4 	.word	0x0800b4e4
 80065dc:	0800b4e4 	.word	0x0800b4e4
 80065e0:	0800b4e4 	.word	0x0800b4e4
 80065e4:	0800b4e8 	.word	0x0800b4e8

080065e8 <memset>:
 80065e8:	4603      	mov	r3, r0
 80065ea:	4402      	add	r2, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <__cvt>:
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065fe:	461f      	mov	r7, r3
 8006600:	bfbb      	ittet	lt
 8006602:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006606:	461f      	movlt	r7, r3
 8006608:	2300      	movge	r3, #0
 800660a:	232d      	movlt	r3, #45	; 0x2d
 800660c:	b088      	sub	sp, #32
 800660e:	4614      	mov	r4, r2
 8006610:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006612:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006614:	7013      	strb	r3, [r2, #0]
 8006616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006618:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800661c:	f023 0820 	bic.w	r8, r3, #32
 8006620:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006624:	d005      	beq.n	8006632 <__cvt+0x3a>
 8006626:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800662a:	d100      	bne.n	800662e <__cvt+0x36>
 800662c:	3501      	adds	r5, #1
 800662e:	2302      	movs	r3, #2
 8006630:	e000      	b.n	8006634 <__cvt+0x3c>
 8006632:	2303      	movs	r3, #3
 8006634:	aa07      	add	r2, sp, #28
 8006636:	9204      	str	r2, [sp, #16]
 8006638:	aa06      	add	r2, sp, #24
 800663a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800663e:	e9cd 3500 	strd	r3, r5, [sp]
 8006642:	4622      	mov	r2, r4
 8006644:	463b      	mov	r3, r7
 8006646:	f001 fd9f 	bl	8008188 <_dtoa_r>
 800664a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800664e:	4606      	mov	r6, r0
 8006650:	d102      	bne.n	8006658 <__cvt+0x60>
 8006652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d522      	bpl.n	800669e <__cvt+0xa6>
 8006658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800665c:	eb06 0905 	add.w	r9, r6, r5
 8006660:	d110      	bne.n	8006684 <__cvt+0x8c>
 8006662:	7833      	ldrb	r3, [r6, #0]
 8006664:	2b30      	cmp	r3, #48	; 0x30
 8006666:	d10a      	bne.n	800667e <__cvt+0x86>
 8006668:	2200      	movs	r2, #0
 800666a:	2300      	movs	r3, #0
 800666c:	4620      	mov	r0, r4
 800666e:	4639      	mov	r1, r7
 8006670:	f7fa f99a 	bl	80009a8 <__aeabi_dcmpeq>
 8006674:	b918      	cbnz	r0, 800667e <__cvt+0x86>
 8006676:	f1c5 0501 	rsb	r5, r5, #1
 800667a:	f8ca 5000 	str.w	r5, [sl]
 800667e:	f8da 3000 	ldr.w	r3, [sl]
 8006682:	4499      	add	r9, r3
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	4620      	mov	r0, r4
 800668a:	4639      	mov	r1, r7
 800668c:	f7fa f98c 	bl	80009a8 <__aeabi_dcmpeq>
 8006690:	b108      	cbz	r0, 8006696 <__cvt+0x9e>
 8006692:	f8cd 901c 	str.w	r9, [sp, #28]
 8006696:	2230      	movs	r2, #48	; 0x30
 8006698:	9b07      	ldr	r3, [sp, #28]
 800669a:	454b      	cmp	r3, r9
 800669c:	d307      	bcc.n	80066ae <__cvt+0xb6>
 800669e:	4630      	mov	r0, r6
 80066a0:	9b07      	ldr	r3, [sp, #28]
 80066a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066a4:	1b9b      	subs	r3, r3, r6
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	b008      	add	sp, #32
 80066aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ae:	1c59      	adds	r1, r3, #1
 80066b0:	9107      	str	r1, [sp, #28]
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	e7f0      	b.n	8006698 <__cvt+0xa0>

080066b6 <__exponent>:
 80066b6:	4603      	mov	r3, r0
 80066b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ba:	2900      	cmp	r1, #0
 80066bc:	f803 2b02 	strb.w	r2, [r3], #2
 80066c0:	bfb6      	itet	lt
 80066c2:	222d      	movlt	r2, #45	; 0x2d
 80066c4:	222b      	movge	r2, #43	; 0x2b
 80066c6:	4249      	neglt	r1, r1
 80066c8:	2909      	cmp	r1, #9
 80066ca:	7042      	strb	r2, [r0, #1]
 80066cc:	dd2b      	ble.n	8006726 <__exponent+0x70>
 80066ce:	f10d 0407 	add.w	r4, sp, #7
 80066d2:	46a4      	mov	ip, r4
 80066d4:	270a      	movs	r7, #10
 80066d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80066da:	460a      	mov	r2, r1
 80066dc:	46a6      	mov	lr, r4
 80066de:	fb07 1516 	mls	r5, r7, r6, r1
 80066e2:	2a63      	cmp	r2, #99	; 0x63
 80066e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80066e8:	4631      	mov	r1, r6
 80066ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80066ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066f2:	dcf0      	bgt.n	80066d6 <__exponent+0x20>
 80066f4:	3130      	adds	r1, #48	; 0x30
 80066f6:	f1ae 0502 	sub.w	r5, lr, #2
 80066fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066fe:	4629      	mov	r1, r5
 8006700:	1c44      	adds	r4, r0, #1
 8006702:	4561      	cmp	r1, ip
 8006704:	d30a      	bcc.n	800671c <__exponent+0x66>
 8006706:	f10d 0209 	add.w	r2, sp, #9
 800670a:	eba2 020e 	sub.w	r2, r2, lr
 800670e:	4565      	cmp	r5, ip
 8006710:	bf88      	it	hi
 8006712:	2200      	movhi	r2, #0
 8006714:	4413      	add	r3, r2
 8006716:	1a18      	subs	r0, r3, r0
 8006718:	b003      	add	sp, #12
 800671a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006720:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006724:	e7ed      	b.n	8006702 <__exponent+0x4c>
 8006726:	2330      	movs	r3, #48	; 0x30
 8006728:	3130      	adds	r1, #48	; 0x30
 800672a:	7083      	strb	r3, [r0, #2]
 800672c:	70c1      	strb	r1, [r0, #3]
 800672e:	1d03      	adds	r3, r0, #4
 8006730:	e7f1      	b.n	8006716 <__exponent+0x60>
	...

08006734 <_printf_float>:
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	b091      	sub	sp, #68	; 0x44
 800673a:	460c      	mov	r4, r1
 800673c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006740:	4616      	mov	r6, r2
 8006742:	461f      	mov	r7, r3
 8006744:	4605      	mov	r5, r0
 8006746:	f002 fe73 	bl	8009430 <_localeconv_r>
 800674a:	6803      	ldr	r3, [r0, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	9309      	str	r3, [sp, #36]	; 0x24
 8006750:	f7f9 fcfe 	bl	8000150 <strlen>
 8006754:	2300      	movs	r3, #0
 8006756:	930e      	str	r3, [sp, #56]	; 0x38
 8006758:	f8d8 3000 	ldr.w	r3, [r8]
 800675c:	900a      	str	r0, [sp, #40]	; 0x28
 800675e:	3307      	adds	r3, #7
 8006760:	f023 0307 	bic.w	r3, r3, #7
 8006764:	f103 0208 	add.w	r2, r3, #8
 8006768:	f894 9018 	ldrb.w	r9, [r4, #24]
 800676c:	f8d4 b000 	ldr.w	fp, [r4]
 8006770:	f8c8 2000 	str.w	r2, [r8]
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800677c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006780:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006784:	930b      	str	r3, [sp, #44]	; 0x2c
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	4640      	mov	r0, r8
 800678c:	4b9c      	ldr	r3, [pc, #624]	; (8006a00 <_printf_float+0x2cc>)
 800678e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006790:	f7fa f93c 	bl	8000a0c <__aeabi_dcmpun>
 8006794:	bb70      	cbnz	r0, 80067f4 <_printf_float+0xc0>
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	4640      	mov	r0, r8
 800679c:	4b98      	ldr	r3, [pc, #608]	; (8006a00 <_printf_float+0x2cc>)
 800679e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067a0:	f7fa f916 	bl	80009d0 <__aeabi_dcmple>
 80067a4:	bb30      	cbnz	r0, 80067f4 <_printf_float+0xc0>
 80067a6:	2200      	movs	r2, #0
 80067a8:	2300      	movs	r3, #0
 80067aa:	4640      	mov	r0, r8
 80067ac:	4651      	mov	r1, sl
 80067ae:	f7fa f905 	bl	80009bc <__aeabi_dcmplt>
 80067b2:	b110      	cbz	r0, 80067ba <_printf_float+0x86>
 80067b4:	232d      	movs	r3, #45	; 0x2d
 80067b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ba:	4b92      	ldr	r3, [pc, #584]	; (8006a04 <_printf_float+0x2d0>)
 80067bc:	4892      	ldr	r0, [pc, #584]	; (8006a08 <_printf_float+0x2d4>)
 80067be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80067c2:	bf94      	ite	ls
 80067c4:	4698      	movls	r8, r3
 80067c6:	4680      	movhi	r8, r0
 80067c8:	2303      	movs	r3, #3
 80067ca:	f04f 0a00 	mov.w	sl, #0
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	f02b 0304 	bic.w	r3, fp, #4
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	4633      	mov	r3, r6
 80067d8:	4621      	mov	r1, r4
 80067da:	4628      	mov	r0, r5
 80067dc:	9700      	str	r7, [sp, #0]
 80067de:	aa0f      	add	r2, sp, #60	; 0x3c
 80067e0:	f000 f9d4 	bl	8006b8c <_printf_common>
 80067e4:	3001      	adds	r0, #1
 80067e6:	f040 8090 	bne.w	800690a <_printf_float+0x1d6>
 80067ea:	f04f 30ff 	mov.w	r0, #4294967295
 80067ee:	b011      	add	sp, #68	; 0x44
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	4642      	mov	r2, r8
 80067f6:	4653      	mov	r3, sl
 80067f8:	4640      	mov	r0, r8
 80067fa:	4651      	mov	r1, sl
 80067fc:	f7fa f906 	bl	8000a0c <__aeabi_dcmpun>
 8006800:	b148      	cbz	r0, 8006816 <_printf_float+0xe2>
 8006802:	f1ba 0f00 	cmp.w	sl, #0
 8006806:	bfb8      	it	lt
 8006808:	232d      	movlt	r3, #45	; 0x2d
 800680a:	4880      	ldr	r0, [pc, #512]	; (8006a0c <_printf_float+0x2d8>)
 800680c:	bfb8      	it	lt
 800680e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006812:	4b7f      	ldr	r3, [pc, #508]	; (8006a10 <_printf_float+0x2dc>)
 8006814:	e7d3      	b.n	80067be <_printf_float+0x8a>
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	d142      	bne.n	80068a6 <_printf_float+0x172>
 8006820:	2306      	movs	r3, #6
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	9206      	str	r2, [sp, #24]
 8006828:	aa0e      	add	r2, sp, #56	; 0x38
 800682a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800682e:	aa0d      	add	r2, sp, #52	; 0x34
 8006830:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006834:	9203      	str	r2, [sp, #12]
 8006836:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800683a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	4642      	mov	r2, r8
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4628      	mov	r0, r5
 8006848:	4653      	mov	r3, sl
 800684a:	910b      	str	r1, [sp, #44]	; 0x2c
 800684c:	f7ff fed4 	bl	80065f8 <__cvt>
 8006850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006852:	4680      	mov	r8, r0
 8006854:	2947      	cmp	r1, #71	; 0x47
 8006856:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006858:	d108      	bne.n	800686c <_printf_float+0x138>
 800685a:	1cc8      	adds	r0, r1, #3
 800685c:	db02      	blt.n	8006864 <_printf_float+0x130>
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	4299      	cmp	r1, r3
 8006862:	dd40      	ble.n	80068e6 <_printf_float+0x1b2>
 8006864:	f1a9 0902 	sub.w	r9, r9, #2
 8006868:	fa5f f989 	uxtb.w	r9, r9
 800686c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006870:	d81f      	bhi.n	80068b2 <_printf_float+0x17e>
 8006872:	464a      	mov	r2, r9
 8006874:	3901      	subs	r1, #1
 8006876:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800687a:	910d      	str	r1, [sp, #52]	; 0x34
 800687c:	f7ff ff1b 	bl	80066b6 <__exponent>
 8006880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006882:	4682      	mov	sl, r0
 8006884:	1813      	adds	r3, r2, r0
 8006886:	2a01      	cmp	r2, #1
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	dc02      	bgt.n	8006892 <_printf_float+0x15e>
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	07d2      	lsls	r2, r2, #31
 8006890:	d501      	bpl.n	8006896 <_printf_float+0x162>
 8006892:	3301      	adds	r3, #1
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800689a:	2b00      	cmp	r3, #0
 800689c:	d09b      	beq.n	80067d6 <_printf_float+0xa2>
 800689e:	232d      	movs	r3, #45	; 0x2d
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a4:	e797      	b.n	80067d6 <_printf_float+0xa2>
 80068a6:	2947      	cmp	r1, #71	; 0x47
 80068a8:	d1bc      	bne.n	8006824 <_printf_float+0xf0>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1ba      	bne.n	8006824 <_printf_float+0xf0>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e7b7      	b.n	8006822 <_printf_float+0xee>
 80068b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068b6:	d118      	bne.n	80068ea <_printf_float+0x1b6>
 80068b8:	2900      	cmp	r1, #0
 80068ba:	6863      	ldr	r3, [r4, #4]
 80068bc:	dd0b      	ble.n	80068d6 <_printf_float+0x1a2>
 80068be:	6121      	str	r1, [r4, #16]
 80068c0:	b913      	cbnz	r3, 80068c8 <_printf_float+0x194>
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	07d0      	lsls	r0, r2, #31
 80068c6:	d502      	bpl.n	80068ce <_printf_float+0x19a>
 80068c8:	3301      	adds	r3, #1
 80068ca:	440b      	add	r3, r1
 80068cc:	6123      	str	r3, [r4, #16]
 80068ce:	f04f 0a00 	mov.w	sl, #0
 80068d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80068d4:	e7df      	b.n	8006896 <_printf_float+0x162>
 80068d6:	b913      	cbnz	r3, 80068de <_printf_float+0x1aa>
 80068d8:	6822      	ldr	r2, [r4, #0]
 80068da:	07d2      	lsls	r2, r2, #31
 80068dc:	d501      	bpl.n	80068e2 <_printf_float+0x1ae>
 80068de:	3302      	adds	r3, #2
 80068e0:	e7f4      	b.n	80068cc <_printf_float+0x198>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e7f2      	b.n	80068cc <_printf_float+0x198>
 80068e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ec:	4299      	cmp	r1, r3
 80068ee:	db05      	blt.n	80068fc <_printf_float+0x1c8>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	6121      	str	r1, [r4, #16]
 80068f4:	07d8      	lsls	r0, r3, #31
 80068f6:	d5ea      	bpl.n	80068ce <_printf_float+0x19a>
 80068f8:	1c4b      	adds	r3, r1, #1
 80068fa:	e7e7      	b.n	80068cc <_printf_float+0x198>
 80068fc:	2900      	cmp	r1, #0
 80068fe:	bfcc      	ite	gt
 8006900:	2201      	movgt	r2, #1
 8006902:	f1c1 0202 	rsble	r2, r1, #2
 8006906:	4413      	add	r3, r2
 8006908:	e7e0      	b.n	80068cc <_printf_float+0x198>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	055a      	lsls	r2, r3, #21
 800690e:	d407      	bmi.n	8006920 <_printf_float+0x1ec>
 8006910:	6923      	ldr	r3, [r4, #16]
 8006912:	4642      	mov	r2, r8
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	d12b      	bne.n	8006976 <_printf_float+0x242>
 800691e:	e764      	b.n	80067ea <_printf_float+0xb6>
 8006920:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006924:	f240 80dd 	bls.w	8006ae2 <_printf_float+0x3ae>
 8006928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800692c:	2200      	movs	r2, #0
 800692e:	2300      	movs	r3, #0
 8006930:	f7fa f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8006934:	2800      	cmp	r0, #0
 8006936:	d033      	beq.n	80069a0 <_printf_float+0x26c>
 8006938:	2301      	movs	r3, #1
 800693a:	4631      	mov	r1, r6
 800693c:	4628      	mov	r0, r5
 800693e:	4a35      	ldr	r2, [pc, #212]	; (8006a14 <_printf_float+0x2e0>)
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	f43f af51 	beq.w	80067ea <_printf_float+0xb6>
 8006948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800694c:	429a      	cmp	r2, r3
 800694e:	db02      	blt.n	8006956 <_printf_float+0x222>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	07d8      	lsls	r0, r3, #31
 8006954:	d50f      	bpl.n	8006976 <_printf_float+0x242>
 8006956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	f43f af42 	beq.w	80067ea <_printf_float+0xb6>
 8006966:	f04f 0800 	mov.w	r8, #0
 800696a:	f104 091a 	add.w	r9, r4, #26
 800696e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006970:	3b01      	subs	r3, #1
 8006972:	4543      	cmp	r3, r8
 8006974:	dc09      	bgt.n	800698a <_printf_float+0x256>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	079b      	lsls	r3, r3, #30
 800697a:	f100 8102 	bmi.w	8006b82 <_printf_float+0x44e>
 800697e:	68e0      	ldr	r0, [r4, #12]
 8006980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006982:	4298      	cmp	r0, r3
 8006984:	bfb8      	it	lt
 8006986:	4618      	movlt	r0, r3
 8006988:	e731      	b.n	80067ee <_printf_float+0xba>
 800698a:	2301      	movs	r3, #1
 800698c:	464a      	mov	r2, r9
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	f43f af28 	beq.w	80067ea <_printf_float+0xb6>
 800699a:	f108 0801 	add.w	r8, r8, #1
 800699e:	e7e6      	b.n	800696e <_printf_float+0x23a>
 80069a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dc38      	bgt.n	8006a18 <_printf_float+0x2e4>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <_printf_float+0x2e0>)
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f af1a 	beq.w	80067ea <_printf_float+0xb6>
 80069b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069ba:	4313      	orrs	r3, r2
 80069bc:	d102      	bne.n	80069c4 <_printf_float+0x290>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	07d9      	lsls	r1, r3, #31
 80069c2:	d5d8      	bpl.n	8006976 <_printf_float+0x242>
 80069c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f af0b 	beq.w	80067ea <_printf_float+0xb6>
 80069d4:	f04f 0900 	mov.w	r9, #0
 80069d8:	f104 0a1a 	add.w	sl, r4, #26
 80069dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069de:	425b      	negs	r3, r3
 80069e0:	454b      	cmp	r3, r9
 80069e2:	dc01      	bgt.n	80069e8 <_printf_float+0x2b4>
 80069e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069e6:	e794      	b.n	8006912 <_printf_float+0x1de>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4652      	mov	r2, sl
 80069ec:	4631      	mov	r1, r6
 80069ee:	4628      	mov	r0, r5
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	f43f aef9 	beq.w	80067ea <_printf_float+0xb6>
 80069f8:	f109 0901 	add.w	r9, r9, #1
 80069fc:	e7ee      	b.n	80069dc <_printf_float+0x2a8>
 80069fe:	bf00      	nop
 8006a00:	7fefffff 	.word	0x7fefffff
 8006a04:	0800b02c 	.word	0x0800b02c
 8006a08:	0800b030 	.word	0x0800b030
 8006a0c:	0800b038 	.word	0x0800b038
 8006a10:	0800b034 	.word	0x0800b034
 8006a14:	0800b03c 	.word	0x0800b03c
 8006a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	bfa8      	it	ge
 8006a20:	461a      	movge	r2, r3
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	4691      	mov	r9, r2
 8006a26:	dc37      	bgt.n	8006a98 <_printf_float+0x364>
 8006a28:	f04f 0b00 	mov.w	fp, #0
 8006a2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a30:	f104 021a 	add.w	r2, r4, #26
 8006a34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a38:	ebaa 0309 	sub.w	r3, sl, r9
 8006a3c:	455b      	cmp	r3, fp
 8006a3e:	dc33      	bgt.n	8006aa8 <_printf_float+0x374>
 8006a40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a44:	429a      	cmp	r2, r3
 8006a46:	db3b      	blt.n	8006ac0 <_printf_float+0x38c>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	07da      	lsls	r2, r3, #31
 8006a4c:	d438      	bmi.n	8006ac0 <_printf_float+0x38c>
 8006a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a52:	eba2 030a 	sub.w	r3, r2, sl
 8006a56:	eba2 0901 	sub.w	r9, r2, r1
 8006a5a:	4599      	cmp	r9, r3
 8006a5c:	bfa8      	it	ge
 8006a5e:	4699      	movge	r9, r3
 8006a60:	f1b9 0f00 	cmp.w	r9, #0
 8006a64:	dc34      	bgt.n	8006ad0 <_printf_float+0x39c>
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a6e:	f104 0a1a 	add.w	sl, r4, #26
 8006a72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	eba3 0309 	sub.w	r3, r3, r9
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	f77f af7a 	ble.w	8006976 <_printf_float+0x242>
 8006a82:	2301      	movs	r3, #1
 8006a84:	4652      	mov	r2, sl
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	f43f aeac 	beq.w	80067ea <_printf_float+0xb6>
 8006a92:	f108 0801 	add.w	r8, r8, #1
 8006a96:	e7ec      	b.n	8006a72 <_printf_float+0x33e>
 8006a98:	4613      	mov	r3, r2
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d1c0      	bne.n	8006a28 <_printf_float+0x2f4>
 8006aa6:	e6a0      	b.n	80067ea <_printf_float+0xb6>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	f43f ae99 	beq.w	80067ea <_printf_float+0xb6>
 8006ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aba:	f10b 0b01 	add.w	fp, fp, #1
 8006abe:	e7b9      	b.n	8006a34 <_printf_float+0x300>
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	d1bf      	bne.n	8006a4e <_printf_float+0x31a>
 8006ace:	e68c      	b.n	80067ea <_printf_float+0xb6>
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	eb08 020a 	add.w	r2, r8, sl
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	d1c2      	bne.n	8006a66 <_printf_float+0x332>
 8006ae0:	e683      	b.n	80067ea <_printf_float+0xb6>
 8006ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ae4:	2a01      	cmp	r2, #1
 8006ae6:	dc01      	bgt.n	8006aec <_printf_float+0x3b8>
 8006ae8:	07db      	lsls	r3, r3, #31
 8006aea:	d537      	bpl.n	8006b5c <_printf_float+0x428>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4642      	mov	r2, r8
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f ae77 	beq.w	80067ea <_printf_float+0xb6>
 8006afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	f43f ae6f 	beq.w	80067ea <_printf_float+0xb6>
 8006b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b10:	2200      	movs	r2, #0
 8006b12:	2300      	movs	r3, #0
 8006b14:	f7f9 ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8006b18:	b9d8      	cbnz	r0, 8006b52 <_printf_float+0x41e>
 8006b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b1c:	f108 0201 	add.w	r2, r8, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d10e      	bne.n	8006b4a <_printf_float+0x416>
 8006b2c:	e65d      	b.n	80067ea <_printf_float+0xb6>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	464a      	mov	r2, r9
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f ae56 	beq.w	80067ea <_printf_float+0xb6>
 8006b3e:	f108 0801 	add.w	r8, r8, #1
 8006b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b44:	3b01      	subs	r3, #1
 8006b46:	4543      	cmp	r3, r8
 8006b48:	dcf1      	bgt.n	8006b2e <_printf_float+0x3fa>
 8006b4a:	4653      	mov	r3, sl
 8006b4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b50:	e6e0      	b.n	8006914 <_printf_float+0x1e0>
 8006b52:	f04f 0800 	mov.w	r8, #0
 8006b56:	f104 091a 	add.w	r9, r4, #26
 8006b5a:	e7f2      	b.n	8006b42 <_printf_float+0x40e>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4642      	mov	r2, r8
 8006b60:	e7df      	b.n	8006b22 <_printf_float+0x3ee>
 8006b62:	2301      	movs	r3, #1
 8006b64:	464a      	mov	r2, r9
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f ae3c 	beq.w	80067ea <_printf_float+0xb6>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b7a:	1a5b      	subs	r3, r3, r1
 8006b7c:	4543      	cmp	r3, r8
 8006b7e:	dcf0      	bgt.n	8006b62 <_printf_float+0x42e>
 8006b80:	e6fd      	b.n	800697e <_printf_float+0x24a>
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	f104 0919 	add.w	r9, r4, #25
 8006b8a:	e7f4      	b.n	8006b76 <_printf_float+0x442>

08006b8c <_printf_common>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	4616      	mov	r6, r2
 8006b92:	4699      	mov	r9, r3
 8006b94:	688a      	ldr	r2, [r1, #8]
 8006b96:	690b      	ldr	r3, [r1, #16]
 8006b98:	4607      	mov	r7, r0
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	bfb8      	it	lt
 8006b9e:	4613      	movlt	r3, r2
 8006ba0:	6033      	str	r3, [r6, #0]
 8006ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bac:	b10a      	cbz	r2, 8006bb2 <_printf_common+0x26>
 8006bae:	3301      	adds	r3, #1
 8006bb0:	6033      	str	r3, [r6, #0]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	0699      	lsls	r1, r3, #26
 8006bb6:	bf42      	ittt	mi
 8006bb8:	6833      	ldrmi	r3, [r6, #0]
 8006bba:	3302      	addmi	r3, #2
 8006bbc:	6033      	strmi	r3, [r6, #0]
 8006bbe:	6825      	ldr	r5, [r4, #0]
 8006bc0:	f015 0506 	ands.w	r5, r5, #6
 8006bc4:	d106      	bne.n	8006bd4 <_printf_common+0x48>
 8006bc6:	f104 0a19 	add.w	sl, r4, #25
 8006bca:	68e3      	ldr	r3, [r4, #12]
 8006bcc:	6832      	ldr	r2, [r6, #0]
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dc28      	bgt.n	8006c26 <_printf_common+0x9a>
 8006bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bd8:	1e13      	subs	r3, r2, #0
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	bf18      	it	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	0692      	lsls	r2, r2, #26
 8006be2:	d42d      	bmi.n	8006c40 <_printf_common+0xb4>
 8006be4:	4649      	mov	r1, r9
 8006be6:	4638      	mov	r0, r7
 8006be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d020      	beq.n	8006c34 <_printf_common+0xa8>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	68e5      	ldr	r5, [r4, #12]
 8006bf6:	f003 0306 	and.w	r3, r3, #6
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	bf18      	it	ne
 8006bfe:	2500      	movne	r5, #0
 8006c00:	6832      	ldr	r2, [r6, #0]
 8006c02:	f04f 0600 	mov.w	r6, #0
 8006c06:	68a3      	ldr	r3, [r4, #8]
 8006c08:	bf08      	it	eq
 8006c0a:	1aad      	subeq	r5, r5, r2
 8006c0c:	6922      	ldr	r2, [r4, #16]
 8006c0e:	bf08      	it	eq
 8006c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bfc4      	itt	gt
 8006c18:	1a9b      	subgt	r3, r3, r2
 8006c1a:	18ed      	addgt	r5, r5, r3
 8006c1c:	341a      	adds	r4, #26
 8006c1e:	42b5      	cmp	r5, r6
 8006c20:	d11a      	bne.n	8006c58 <_printf_common+0xcc>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e008      	b.n	8006c38 <_printf_common+0xac>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	47c0      	blx	r8
 8006c30:	3001      	adds	r0, #1
 8006c32:	d103      	bne.n	8006c3c <_printf_common+0xb0>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7c4      	b.n	8006bca <_printf_common+0x3e>
 8006c40:	2030      	movs	r0, #48	; 0x30
 8006c42:	18e1      	adds	r1, r4, r3
 8006c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c4e:	4422      	add	r2, r4
 8006c50:	3302      	adds	r3, #2
 8006c52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c56:	e7c5      	b.n	8006be4 <_printf_common+0x58>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	4638      	mov	r0, r7
 8006c60:	47c0      	blx	r8
 8006c62:	3001      	adds	r0, #1
 8006c64:	d0e6      	beq.n	8006c34 <_printf_common+0xa8>
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7d9      	b.n	8006c1e <_printf_common+0x92>
	...

08006c6c <_printf_i>:
 8006c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	460c      	mov	r4, r1
 8006c72:	7e27      	ldrb	r7, [r4, #24]
 8006c74:	4691      	mov	r9, r2
 8006c76:	2f78      	cmp	r7, #120	; 0x78
 8006c78:	4680      	mov	r8, r0
 8006c7a:	469a      	mov	sl, r3
 8006c7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c82:	d807      	bhi.n	8006c94 <_printf_i+0x28>
 8006c84:	2f62      	cmp	r7, #98	; 0x62
 8006c86:	d80a      	bhi.n	8006c9e <_printf_i+0x32>
 8006c88:	2f00      	cmp	r7, #0
 8006c8a:	f000 80d9 	beq.w	8006e40 <_printf_i+0x1d4>
 8006c8e:	2f58      	cmp	r7, #88	; 0x58
 8006c90:	f000 80a4 	beq.w	8006ddc <_printf_i+0x170>
 8006c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c9c:	e03a      	b.n	8006d14 <_printf_i+0xa8>
 8006c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ca2:	2b15      	cmp	r3, #21
 8006ca4:	d8f6      	bhi.n	8006c94 <_printf_i+0x28>
 8006ca6:	a001      	add	r0, pc, #4	; (adr r0, 8006cac <_printf_i+0x40>)
 8006ca8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cac:	08006d05 	.word	0x08006d05
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006c95 	.word	0x08006c95
 8006cb8:	08006c95 	.word	0x08006c95
 8006cbc:	08006c95 	.word	0x08006c95
 8006cc0:	08006c95 	.word	0x08006c95
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006c95 	.word	0x08006c95
 8006ccc:	08006c95 	.word	0x08006c95
 8006cd0:	08006c95 	.word	0x08006c95
 8006cd4:	08006c95 	.word	0x08006c95
 8006cd8:	08006e27 	.word	0x08006e27
 8006cdc:	08006d49 	.word	0x08006d49
 8006ce0:	08006e09 	.word	0x08006e09
 8006ce4:	08006c95 	.word	0x08006c95
 8006ce8:	08006c95 	.word	0x08006c95
 8006cec:	08006e49 	.word	0x08006e49
 8006cf0:	08006c95 	.word	0x08006c95
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006c95 	.word	0x08006c95
 8006cfc:	08006c95 	.word	0x08006c95
 8006d00:	08006e11 	.word	0x08006e11
 8006d04:	680b      	ldr	r3, [r1, #0]
 8006d06:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	600a      	str	r2, [r1, #0]
 8006d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0a4      	b.n	8006e62 <_printf_i+0x1f6>
 8006d18:	6825      	ldr	r5, [r4, #0]
 8006d1a:	6808      	ldr	r0, [r1, #0]
 8006d1c:	062e      	lsls	r6, r5, #24
 8006d1e:	f100 0304 	add.w	r3, r0, #4
 8006d22:	d50a      	bpl.n	8006d3a <_printf_i+0xce>
 8006d24:	6805      	ldr	r5, [r0, #0]
 8006d26:	600b      	str	r3, [r1, #0]
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	da03      	bge.n	8006d34 <_printf_i+0xc8>
 8006d2c:	232d      	movs	r3, #45	; 0x2d
 8006d2e:	426d      	negs	r5, r5
 8006d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d34:	230a      	movs	r3, #10
 8006d36:	485e      	ldr	r0, [pc, #376]	; (8006eb0 <_printf_i+0x244>)
 8006d38:	e019      	b.n	8006d6e <_printf_i+0x102>
 8006d3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d3e:	6805      	ldr	r5, [r0, #0]
 8006d40:	600b      	str	r3, [r1, #0]
 8006d42:	bf18      	it	ne
 8006d44:	b22d      	sxthne	r5, r5
 8006d46:	e7ef      	b.n	8006d28 <_printf_i+0xbc>
 8006d48:	680b      	ldr	r3, [r1, #0]
 8006d4a:	6825      	ldr	r5, [r4, #0]
 8006d4c:	1d18      	adds	r0, r3, #4
 8006d4e:	6008      	str	r0, [r1, #0]
 8006d50:	0628      	lsls	r0, r5, #24
 8006d52:	d501      	bpl.n	8006d58 <_printf_i+0xec>
 8006d54:	681d      	ldr	r5, [r3, #0]
 8006d56:	e002      	b.n	8006d5e <_printf_i+0xf2>
 8006d58:	0669      	lsls	r1, r5, #25
 8006d5a:	d5fb      	bpl.n	8006d54 <_printf_i+0xe8>
 8006d5c:	881d      	ldrh	r5, [r3, #0]
 8006d5e:	2f6f      	cmp	r7, #111	; 0x6f
 8006d60:	bf0c      	ite	eq
 8006d62:	2308      	moveq	r3, #8
 8006d64:	230a      	movne	r3, #10
 8006d66:	4852      	ldr	r0, [pc, #328]	; (8006eb0 <_printf_i+0x244>)
 8006d68:	2100      	movs	r1, #0
 8006d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d6e:	6866      	ldr	r6, [r4, #4]
 8006d70:	2e00      	cmp	r6, #0
 8006d72:	bfa8      	it	ge
 8006d74:	6821      	ldrge	r1, [r4, #0]
 8006d76:	60a6      	str	r6, [r4, #8]
 8006d78:	bfa4      	itt	ge
 8006d7a:	f021 0104 	bicge.w	r1, r1, #4
 8006d7e:	6021      	strge	r1, [r4, #0]
 8006d80:	b90d      	cbnz	r5, 8006d86 <_printf_i+0x11a>
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d04d      	beq.n	8006e22 <_printf_i+0x1b6>
 8006d86:	4616      	mov	r6, r2
 8006d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8006d90:	5dc7      	ldrb	r7, [r0, r7]
 8006d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d96:	462f      	mov	r7, r5
 8006d98:	42bb      	cmp	r3, r7
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	d9f4      	bls.n	8006d88 <_printf_i+0x11c>
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d10b      	bne.n	8006dba <_printf_i+0x14e>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	07df      	lsls	r7, r3, #31
 8006da6:	d508      	bpl.n	8006dba <_printf_i+0x14e>
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	6861      	ldr	r1, [r4, #4]
 8006dac:	4299      	cmp	r1, r3
 8006dae:	bfde      	ittt	le
 8006db0:	2330      	movle	r3, #48	; 0x30
 8006db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006db6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dba:	1b92      	subs	r2, r2, r6
 8006dbc:	6122      	str	r2, [r4, #16]
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f8cd a000 	str.w	sl, [sp]
 8006dc8:	aa03      	add	r2, sp, #12
 8006dca:	f7ff fedf 	bl	8006b8c <_printf_common>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d14c      	bne.n	8006e6c <_printf_i+0x200>
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	b004      	add	sp, #16
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	4834      	ldr	r0, [pc, #208]	; (8006eb0 <_printf_i+0x244>)
 8006dde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006de2:	680e      	ldr	r6, [r1, #0]
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006dea:	061f      	lsls	r7, r3, #24
 8006dec:	600e      	str	r6, [r1, #0]
 8006dee:	d514      	bpl.n	8006e1a <_printf_i+0x1ae>
 8006df0:	07d9      	lsls	r1, r3, #31
 8006df2:	bf44      	itt	mi
 8006df4:	f043 0320 	orrmi.w	r3, r3, #32
 8006df8:	6023      	strmi	r3, [r4, #0]
 8006dfa:	b91d      	cbnz	r5, 8006e04 <_printf_i+0x198>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	f023 0320 	bic.w	r3, r3, #32
 8006e02:	6023      	str	r3, [r4, #0]
 8006e04:	2310      	movs	r3, #16
 8006e06:	e7af      	b.n	8006d68 <_printf_i+0xfc>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	f043 0320 	orr.w	r3, r3, #32
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	2378      	movs	r3, #120	; 0x78
 8006e12:	4828      	ldr	r0, [pc, #160]	; (8006eb4 <_printf_i+0x248>)
 8006e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e18:	e7e3      	b.n	8006de2 <_printf_i+0x176>
 8006e1a:	065e      	lsls	r6, r3, #25
 8006e1c:	bf48      	it	mi
 8006e1e:	b2ad      	uxthmi	r5, r5
 8006e20:	e7e6      	b.n	8006df0 <_printf_i+0x184>
 8006e22:	4616      	mov	r6, r2
 8006e24:	e7bb      	b.n	8006d9e <_printf_i+0x132>
 8006e26:	680b      	ldr	r3, [r1, #0]
 8006e28:	6826      	ldr	r6, [r4, #0]
 8006e2a:	1d1d      	adds	r5, r3, #4
 8006e2c:	6960      	ldr	r0, [r4, #20]
 8006e2e:	600d      	str	r5, [r1, #0]
 8006e30:	0635      	lsls	r5, r6, #24
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	d501      	bpl.n	8006e3a <_printf_i+0x1ce>
 8006e36:	6018      	str	r0, [r3, #0]
 8006e38:	e002      	b.n	8006e40 <_printf_i+0x1d4>
 8006e3a:	0671      	lsls	r1, r6, #25
 8006e3c:	d5fb      	bpl.n	8006e36 <_printf_i+0x1ca>
 8006e3e:	8018      	strh	r0, [r3, #0]
 8006e40:	2300      	movs	r3, #0
 8006e42:	4616      	mov	r6, r2
 8006e44:	6123      	str	r3, [r4, #16]
 8006e46:	e7ba      	b.n	8006dbe <_printf_i+0x152>
 8006e48:	680b      	ldr	r3, [r1, #0]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	600a      	str	r2, [r1, #0]
 8006e4e:	681e      	ldr	r6, [r3, #0]
 8006e50:	2100      	movs	r1, #0
 8006e52:	4630      	mov	r0, r6
 8006e54:	6862      	ldr	r2, [r4, #4]
 8006e56:	f002 fb09 	bl	800946c <memchr>
 8006e5a:	b108      	cbz	r0, 8006e60 <_printf_i+0x1f4>
 8006e5c:	1b80      	subs	r0, r0, r6
 8006e5e:	6060      	str	r0, [r4, #4]
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	2300      	movs	r3, #0
 8006e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6a:	e7a8      	b.n	8006dbe <_printf_i+0x152>
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	4649      	mov	r1, r9
 8006e70:	4640      	mov	r0, r8
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	47d0      	blx	sl
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0ab      	beq.n	8006dd2 <_printf_i+0x166>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	079b      	lsls	r3, r3, #30
 8006e7e:	d413      	bmi.n	8006ea8 <_printf_i+0x23c>
 8006e80:	68e0      	ldr	r0, [r4, #12]
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	4298      	cmp	r0, r3
 8006e86:	bfb8      	it	lt
 8006e88:	4618      	movlt	r0, r3
 8006e8a:	e7a4      	b.n	8006dd6 <_printf_i+0x16a>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4632      	mov	r2, r6
 8006e90:	4649      	mov	r1, r9
 8006e92:	4640      	mov	r0, r8
 8006e94:	47d0      	blx	sl
 8006e96:	3001      	adds	r0, #1
 8006e98:	d09b      	beq.n	8006dd2 <_printf_i+0x166>
 8006e9a:	3501      	adds	r5, #1
 8006e9c:	68e3      	ldr	r3, [r4, #12]
 8006e9e:	9903      	ldr	r1, [sp, #12]
 8006ea0:	1a5b      	subs	r3, r3, r1
 8006ea2:	42ab      	cmp	r3, r5
 8006ea4:	dcf2      	bgt.n	8006e8c <_printf_i+0x220>
 8006ea6:	e7eb      	b.n	8006e80 <_printf_i+0x214>
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	f104 0619 	add.w	r6, r4, #25
 8006eae:	e7f5      	b.n	8006e9c <_printf_i+0x230>
 8006eb0:	0800b03e 	.word	0x0800b03e
 8006eb4:	0800b04f 	.word	0x0800b04f

08006eb8 <_scanf_float>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	b087      	sub	sp, #28
 8006ebe:	9303      	str	r3, [sp, #12]
 8006ec0:	688b      	ldr	r3, [r1, #8]
 8006ec2:	4617      	mov	r7, r2
 8006ec4:	1e5a      	subs	r2, r3, #1
 8006ec6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006eca:	bf85      	ittet	hi
 8006ecc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ed0:	195b      	addhi	r3, r3, r5
 8006ed2:	2300      	movls	r3, #0
 8006ed4:	9302      	strhi	r3, [sp, #8]
 8006ed6:	bf88      	it	hi
 8006ed8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006edc:	468b      	mov	fp, r1
 8006ede:	f04f 0500 	mov.w	r5, #0
 8006ee2:	bf8c      	ite	hi
 8006ee4:	608b      	strhi	r3, [r1, #8]
 8006ee6:	9302      	strls	r3, [sp, #8]
 8006ee8:	680b      	ldr	r3, [r1, #0]
 8006eea:	4680      	mov	r8, r0
 8006eec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ef0:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	465e      	mov	r6, fp
 8006ef8:	46aa      	mov	sl, r5
 8006efa:	46a9      	mov	r9, r5
 8006efc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f00:	9501      	str	r5, [sp, #4]
 8006f02:	68a2      	ldr	r2, [r4, #8]
 8006f04:	b152      	cbz	r2, 8006f1c <_scanf_float+0x64>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b4e      	cmp	r3, #78	; 0x4e
 8006f0c:	d864      	bhi.n	8006fd8 <_scanf_float+0x120>
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d83c      	bhi.n	8006f8c <_scanf_float+0xd4>
 8006f12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006f16:	b2c8      	uxtb	r0, r1
 8006f18:	280e      	cmp	r0, #14
 8006f1a:	d93a      	bls.n	8006f92 <_scanf_float+0xda>
 8006f1c:	f1b9 0f00 	cmp.w	r9, #0
 8006f20:	d003      	beq.n	8006f2a <_scanf_float+0x72>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f2e:	f1ba 0f01 	cmp.w	sl, #1
 8006f32:	f200 8113 	bhi.w	800715c <_scanf_float+0x2a4>
 8006f36:	455e      	cmp	r6, fp
 8006f38:	f200 8105 	bhi.w	8007146 <_scanf_float+0x28e>
 8006f3c:	2501      	movs	r5, #1
 8006f3e:	4628      	mov	r0, r5
 8006f40:	b007      	add	sp, #28
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f4a:	2a0d      	cmp	r2, #13
 8006f4c:	d8e6      	bhi.n	8006f1c <_scanf_float+0x64>
 8006f4e:	a101      	add	r1, pc, #4	; (adr r1, 8006f54 <_scanf_float+0x9c>)
 8006f50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f54:	08007093 	.word	0x08007093
 8006f58:	08006f1d 	.word	0x08006f1d
 8006f5c:	08006f1d 	.word	0x08006f1d
 8006f60:	08006f1d 	.word	0x08006f1d
 8006f64:	080070f3 	.word	0x080070f3
 8006f68:	080070cb 	.word	0x080070cb
 8006f6c:	08006f1d 	.word	0x08006f1d
 8006f70:	08006f1d 	.word	0x08006f1d
 8006f74:	080070a1 	.word	0x080070a1
 8006f78:	08006f1d 	.word	0x08006f1d
 8006f7c:	08006f1d 	.word	0x08006f1d
 8006f80:	08006f1d 	.word	0x08006f1d
 8006f84:	08006f1d 	.word	0x08006f1d
 8006f88:	08007059 	.word	0x08007059
 8006f8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f90:	e7db      	b.n	8006f4a <_scanf_float+0x92>
 8006f92:	290e      	cmp	r1, #14
 8006f94:	d8c2      	bhi.n	8006f1c <_scanf_float+0x64>
 8006f96:	a001      	add	r0, pc, #4	; (adr r0, 8006f9c <_scanf_float+0xe4>)
 8006f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f9c:	0800704b 	.word	0x0800704b
 8006fa0:	08006f1d 	.word	0x08006f1d
 8006fa4:	0800704b 	.word	0x0800704b
 8006fa8:	080070df 	.word	0x080070df
 8006fac:	08006f1d 	.word	0x08006f1d
 8006fb0:	08006ff9 	.word	0x08006ff9
 8006fb4:	08007035 	.word	0x08007035
 8006fb8:	08007035 	.word	0x08007035
 8006fbc:	08007035 	.word	0x08007035
 8006fc0:	08007035 	.word	0x08007035
 8006fc4:	08007035 	.word	0x08007035
 8006fc8:	08007035 	.word	0x08007035
 8006fcc:	08007035 	.word	0x08007035
 8006fd0:	08007035 	.word	0x08007035
 8006fd4:	08007035 	.word	0x08007035
 8006fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8006fda:	d809      	bhi.n	8006ff0 <_scanf_float+0x138>
 8006fdc:	2b60      	cmp	r3, #96	; 0x60
 8006fde:	d8b2      	bhi.n	8006f46 <_scanf_float+0x8e>
 8006fe0:	2b54      	cmp	r3, #84	; 0x54
 8006fe2:	d077      	beq.n	80070d4 <_scanf_float+0x21c>
 8006fe4:	2b59      	cmp	r3, #89	; 0x59
 8006fe6:	d199      	bne.n	8006f1c <_scanf_float+0x64>
 8006fe8:	2d07      	cmp	r5, #7
 8006fea:	d197      	bne.n	8006f1c <_scanf_float+0x64>
 8006fec:	2508      	movs	r5, #8
 8006fee:	e029      	b.n	8007044 <_scanf_float+0x18c>
 8006ff0:	2b74      	cmp	r3, #116	; 0x74
 8006ff2:	d06f      	beq.n	80070d4 <_scanf_float+0x21c>
 8006ff4:	2b79      	cmp	r3, #121	; 0x79
 8006ff6:	e7f6      	b.n	8006fe6 <_scanf_float+0x12e>
 8006ff8:	6821      	ldr	r1, [r4, #0]
 8006ffa:	05c8      	lsls	r0, r1, #23
 8006ffc:	d51a      	bpl.n	8007034 <_scanf_float+0x17c>
 8006ffe:	9b02      	ldr	r3, [sp, #8]
 8007000:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007004:	6021      	str	r1, [r4, #0]
 8007006:	f109 0901 	add.w	r9, r9, #1
 800700a:	b11b      	cbz	r3, 8007014 <_scanf_float+0x15c>
 800700c:	3b01      	subs	r3, #1
 800700e:	3201      	adds	r2, #1
 8007010:	9302      	str	r3, [sp, #8]
 8007012:	60a2      	str	r2, [r4, #8]
 8007014:	68a3      	ldr	r3, [r4, #8]
 8007016:	3b01      	subs	r3, #1
 8007018:	60a3      	str	r3, [r4, #8]
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	3301      	adds	r3, #1
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3b01      	subs	r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	f340 8084 	ble.w	8007134 <_scanf_float+0x27c>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	3301      	adds	r3, #1
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	e766      	b.n	8006f02 <_scanf_float+0x4a>
 8007034:	eb1a 0f05 	cmn.w	sl, r5
 8007038:	f47f af70 	bne.w	8006f1c <_scanf_float+0x64>
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007042:	6022      	str	r2, [r4, #0]
 8007044:	f806 3b01 	strb.w	r3, [r6], #1
 8007048:	e7e4      	b.n	8007014 <_scanf_float+0x15c>
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	0610      	lsls	r0, r2, #24
 800704e:	f57f af65 	bpl.w	8006f1c <_scanf_float+0x64>
 8007052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007056:	e7f4      	b.n	8007042 <_scanf_float+0x18a>
 8007058:	f1ba 0f00 	cmp.w	sl, #0
 800705c:	d10e      	bne.n	800707c <_scanf_float+0x1c4>
 800705e:	f1b9 0f00 	cmp.w	r9, #0
 8007062:	d10e      	bne.n	8007082 <_scanf_float+0x1ca>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800706a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800706e:	d108      	bne.n	8007082 <_scanf_float+0x1ca>
 8007070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007074:	f04f 0a01 	mov.w	sl, #1
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	e7e3      	b.n	8007044 <_scanf_float+0x18c>
 800707c:	f1ba 0f02 	cmp.w	sl, #2
 8007080:	d055      	beq.n	800712e <_scanf_float+0x276>
 8007082:	2d01      	cmp	r5, #1
 8007084:	d002      	beq.n	800708c <_scanf_float+0x1d4>
 8007086:	2d04      	cmp	r5, #4
 8007088:	f47f af48 	bne.w	8006f1c <_scanf_float+0x64>
 800708c:	3501      	adds	r5, #1
 800708e:	b2ed      	uxtb	r5, r5
 8007090:	e7d8      	b.n	8007044 <_scanf_float+0x18c>
 8007092:	f1ba 0f01 	cmp.w	sl, #1
 8007096:	f47f af41 	bne.w	8006f1c <_scanf_float+0x64>
 800709a:	f04f 0a02 	mov.w	sl, #2
 800709e:	e7d1      	b.n	8007044 <_scanf_float+0x18c>
 80070a0:	b97d      	cbnz	r5, 80070c2 <_scanf_float+0x20a>
 80070a2:	f1b9 0f00 	cmp.w	r9, #0
 80070a6:	f47f af3c 	bne.w	8006f22 <_scanf_float+0x6a>
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80070b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80070b4:	f47f af39 	bne.w	8006f2a <_scanf_float+0x72>
 80070b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070bc:	2501      	movs	r5, #1
 80070be:	6022      	str	r2, [r4, #0]
 80070c0:	e7c0      	b.n	8007044 <_scanf_float+0x18c>
 80070c2:	2d03      	cmp	r5, #3
 80070c4:	d0e2      	beq.n	800708c <_scanf_float+0x1d4>
 80070c6:	2d05      	cmp	r5, #5
 80070c8:	e7de      	b.n	8007088 <_scanf_float+0x1d0>
 80070ca:	2d02      	cmp	r5, #2
 80070cc:	f47f af26 	bne.w	8006f1c <_scanf_float+0x64>
 80070d0:	2503      	movs	r5, #3
 80070d2:	e7b7      	b.n	8007044 <_scanf_float+0x18c>
 80070d4:	2d06      	cmp	r5, #6
 80070d6:	f47f af21 	bne.w	8006f1c <_scanf_float+0x64>
 80070da:	2507      	movs	r5, #7
 80070dc:	e7b2      	b.n	8007044 <_scanf_float+0x18c>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	0591      	lsls	r1, r2, #22
 80070e2:	f57f af1b 	bpl.w	8006f1c <_scanf_float+0x64>
 80070e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80070f0:	e7a8      	b.n	8007044 <_scanf_float+0x18c>
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070fc:	d006      	beq.n	800710c <_scanf_float+0x254>
 80070fe:	0550      	lsls	r0, r2, #21
 8007100:	f57f af0c 	bpl.w	8006f1c <_scanf_float+0x64>
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	f43f af0f 	beq.w	8006f2a <_scanf_float+0x72>
 800710c:	0591      	lsls	r1, r2, #22
 800710e:	bf58      	it	pl
 8007110:	9901      	ldrpl	r1, [sp, #4]
 8007112:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007116:	bf58      	it	pl
 8007118:	eba9 0101 	subpl.w	r1, r9, r1
 800711c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007120:	f04f 0900 	mov.w	r9, #0
 8007124:	bf58      	it	pl
 8007126:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800712a:	6022      	str	r2, [r4, #0]
 800712c:	e78a      	b.n	8007044 <_scanf_float+0x18c>
 800712e:	f04f 0a03 	mov.w	sl, #3
 8007132:	e787      	b.n	8007044 <_scanf_float+0x18c>
 8007134:	4639      	mov	r1, r7
 8007136:	4640      	mov	r0, r8
 8007138:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800713c:	4798      	blx	r3
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f aedf 	beq.w	8006f02 <_scanf_float+0x4a>
 8007144:	e6ea      	b.n	8006f1c <_scanf_float+0x64>
 8007146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800714a:	463a      	mov	r2, r7
 800714c:	4640      	mov	r0, r8
 800714e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007152:	4798      	blx	r3
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	3b01      	subs	r3, #1
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	e6ec      	b.n	8006f36 <_scanf_float+0x7e>
 800715c:	1e6b      	subs	r3, r5, #1
 800715e:	2b06      	cmp	r3, #6
 8007160:	d825      	bhi.n	80071ae <_scanf_float+0x2f6>
 8007162:	2d02      	cmp	r5, #2
 8007164:	d836      	bhi.n	80071d4 <_scanf_float+0x31c>
 8007166:	455e      	cmp	r6, fp
 8007168:	f67f aee8 	bls.w	8006f3c <_scanf_float+0x84>
 800716c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007170:	463a      	mov	r2, r7
 8007172:	4640      	mov	r0, r8
 8007174:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007178:	4798      	blx	r3
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	3b01      	subs	r3, #1
 800717e:	6123      	str	r3, [r4, #16]
 8007180:	e7f1      	b.n	8007166 <_scanf_float+0x2ae>
 8007182:	9802      	ldr	r0, [sp, #8]
 8007184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007188:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800718c:	463a      	mov	r2, r7
 800718e:	9002      	str	r0, [sp, #8]
 8007190:	4640      	mov	r0, r8
 8007192:	4798      	blx	r3
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	3b01      	subs	r3, #1
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800719e:	fa5f fa8a 	uxtb.w	sl, sl
 80071a2:	f1ba 0f02 	cmp.w	sl, #2
 80071a6:	d1ec      	bne.n	8007182 <_scanf_float+0x2ca>
 80071a8:	3d03      	subs	r5, #3
 80071aa:	b2ed      	uxtb	r5, r5
 80071ac:	1b76      	subs	r6, r6, r5
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	05da      	lsls	r2, r3, #23
 80071b2:	d52f      	bpl.n	8007214 <_scanf_float+0x35c>
 80071b4:	055b      	lsls	r3, r3, #21
 80071b6:	d510      	bpl.n	80071da <_scanf_float+0x322>
 80071b8:	455e      	cmp	r6, fp
 80071ba:	f67f aebf 	bls.w	8006f3c <_scanf_float+0x84>
 80071be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071c2:	463a      	mov	r2, r7
 80071c4:	4640      	mov	r0, r8
 80071c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071ca:	4798      	blx	r3
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	e7f1      	b.n	80071b8 <_scanf_float+0x300>
 80071d4:	46aa      	mov	sl, r5
 80071d6:	9602      	str	r6, [sp, #8]
 80071d8:	e7df      	b.n	800719a <_scanf_float+0x2e2>
 80071da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	2965      	cmp	r1, #101	; 0x65
 80071e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80071e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	d00c      	beq.n	8007208 <_scanf_float+0x350>
 80071ee:	2945      	cmp	r1, #69	; 0x45
 80071f0:	d00a      	beq.n	8007208 <_scanf_float+0x350>
 80071f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071f6:	463a      	mov	r2, r7
 80071f8:	4640      	mov	r0, r8
 80071fa:	4798      	blx	r3
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007202:	3b01      	subs	r3, #1
 8007204:	1eb5      	subs	r5, r6, #2
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	463a      	mov	r2, r7
 800720a:	4640      	mov	r0, r8
 800720c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007210:	4798      	blx	r3
 8007212:	462e      	mov	r6, r5
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	f015 0510 	ands.w	r5, r5, #16
 800721a:	d159      	bne.n	80072d0 <_scanf_float+0x418>
 800721c:	7035      	strb	r5, [r6, #0]
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007228:	d11c      	bne.n	8007264 <_scanf_float+0x3ac>
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	454b      	cmp	r3, r9
 800722e:	eba3 0209 	sub.w	r2, r3, r9
 8007232:	d124      	bne.n	800727e <_scanf_float+0x3c6>
 8007234:	2200      	movs	r2, #0
 8007236:	4659      	mov	r1, fp
 8007238:	4640      	mov	r0, r8
 800723a:	f000 fe89 	bl	8007f50 <_strtod_r>
 800723e:	f8d4 c000 	ldr.w	ip, [r4]
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	f01c 0f02 	tst.w	ip, #2
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	d021      	beq.n	8007294 <_scanf_float+0x3dc>
 8007250:	9903      	ldr	r1, [sp, #12]
 8007252:	1d1a      	adds	r2, r3, #4
 8007254:	600a      	str	r2, [r1, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	e9c3 6700 	strd	r6, r7, [r3]
 800725c:	68e3      	ldr	r3, [r4, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60e3      	str	r3, [r4, #12]
 8007262:	e66c      	b.n	8006f3e <_scanf_float+0x86>
 8007264:	9b04      	ldr	r3, [sp, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0e4      	beq.n	8007234 <_scanf_float+0x37c>
 800726a:	9905      	ldr	r1, [sp, #20]
 800726c:	230a      	movs	r3, #10
 800726e:	462a      	mov	r2, r5
 8007270:	4640      	mov	r0, r8
 8007272:	3101      	adds	r1, #1
 8007274:	f000 fef8 	bl	8008068 <_strtol_r>
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	9e05      	ldr	r6, [sp, #20]
 800727c:	1ac2      	subs	r2, r0, r3
 800727e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007282:	429e      	cmp	r6, r3
 8007284:	bf28      	it	cs
 8007286:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800728a:	4630      	mov	r0, r6
 800728c:	4911      	ldr	r1, [pc, #68]	; (80072d4 <_scanf_float+0x41c>)
 800728e:	f000 f829 	bl	80072e4 <siprintf>
 8007292:	e7cf      	b.n	8007234 <_scanf_float+0x37c>
 8007294:	f01c 0f04 	tst.w	ip, #4
 8007298:	f103 0e04 	add.w	lr, r3, #4
 800729c:	d003      	beq.n	80072a6 <_scanf_float+0x3ee>
 800729e:	9903      	ldr	r1, [sp, #12]
 80072a0:	f8c1 e000 	str.w	lr, [r1]
 80072a4:	e7d7      	b.n	8007256 <_scanf_float+0x39e>
 80072a6:	9a03      	ldr	r2, [sp, #12]
 80072a8:	f8c2 e000 	str.w	lr, [r2]
 80072ac:	f8d3 8000 	ldr.w	r8, [r3]
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	f7f9 fbaa 	bl	8000a0c <__aeabi_dcmpun>
 80072b8:	b128      	cbz	r0, 80072c6 <_scanf_float+0x40e>
 80072ba:	4807      	ldr	r0, [pc, #28]	; (80072d8 <_scanf_float+0x420>)
 80072bc:	f000 f80e 	bl	80072dc <nanf>
 80072c0:	f8c8 0000 	str.w	r0, [r8]
 80072c4:	e7ca      	b.n	800725c <_scanf_float+0x3a4>
 80072c6:	4630      	mov	r0, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	f7f9 fbfd 	bl	8000ac8 <__aeabi_d2f>
 80072ce:	e7f7      	b.n	80072c0 <_scanf_float+0x408>
 80072d0:	2500      	movs	r5, #0
 80072d2:	e634      	b.n	8006f3e <_scanf_float+0x86>
 80072d4:	0800b060 	.word	0x0800b060
 80072d8:	0800b478 	.word	0x0800b478

080072dc <nanf>:
 80072dc:	4800      	ldr	r0, [pc, #0]	; (80072e0 <nanf+0x4>)
 80072de:	4770      	bx	lr
 80072e0:	7fc00000 	.word	0x7fc00000

080072e4 <siprintf>:
 80072e4:	b40e      	push	{r1, r2, r3}
 80072e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072ea:	b500      	push	{lr}
 80072ec:	b09c      	sub	sp, #112	; 0x70
 80072ee:	ab1d      	add	r3, sp, #116	; 0x74
 80072f0:	9002      	str	r0, [sp, #8]
 80072f2:	9006      	str	r0, [sp, #24]
 80072f4:	9107      	str	r1, [sp, #28]
 80072f6:	9104      	str	r1, [sp, #16]
 80072f8:	4808      	ldr	r0, [pc, #32]	; (800731c <siprintf+0x38>)
 80072fa:	4909      	ldr	r1, [pc, #36]	; (8007320 <siprintf+0x3c>)
 80072fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007300:	9105      	str	r1, [sp, #20]
 8007302:	6800      	ldr	r0, [r0, #0]
 8007304:	a902      	add	r1, sp, #8
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f002 fe94 	bl	800a034 <_svfiprintf_r>
 800730c:	2200      	movs	r2, #0
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	b01c      	add	sp, #112	; 0x70
 8007314:	f85d eb04 	ldr.w	lr, [sp], #4
 8007318:	b003      	add	sp, #12
 800731a:	4770      	bx	lr
 800731c:	20000010 	.word	0x20000010
 8007320:	ffff0208 	.word	0xffff0208

08007324 <sulp>:
 8007324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	460f      	mov	r7, r1
 800732a:	4690      	mov	r8, r2
 800732c:	f002 fc2a 	bl	8009b84 <__ulp>
 8007330:	4604      	mov	r4, r0
 8007332:	460d      	mov	r5, r1
 8007334:	f1b8 0f00 	cmp.w	r8, #0
 8007338:	d011      	beq.n	800735e <sulp+0x3a>
 800733a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800733e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd0b      	ble.n	800735e <sulp+0x3a>
 8007346:	2400      	movs	r4, #0
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800734e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007352:	4622      	mov	r2, r4
 8007354:	462b      	mov	r3, r5
 8007356:	f7f9 f8bf 	bl	80004d8 <__aeabi_dmul>
 800735a:	4604      	mov	r4, r0
 800735c:	460d      	mov	r5, r1
 800735e:	4620      	mov	r0, r4
 8007360:	4629      	mov	r1, r5
 8007362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007368 <_strtod_l>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	469b      	mov	fp, r3
 800736e:	2300      	movs	r3, #0
 8007370:	b0a1      	sub	sp, #132	; 0x84
 8007372:	931c      	str	r3, [sp, #112]	; 0x70
 8007374:	4ba1      	ldr	r3, [pc, #644]	; (80075fc <_strtod_l+0x294>)
 8007376:	4682      	mov	sl, r0
 8007378:	681f      	ldr	r7, [r3, #0]
 800737a:	460e      	mov	r6, r1
 800737c:	4638      	mov	r0, r7
 800737e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007380:	f7f8 fee6 	bl	8000150 <strlen>
 8007384:	f04f 0800 	mov.w	r8, #0
 8007388:	4604      	mov	r4, r0
 800738a:	f04f 0900 	mov.w	r9, #0
 800738e:	961b      	str	r6, [sp, #108]	; 0x6c
 8007390:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	2a2b      	cmp	r2, #43	; 0x2b
 8007396:	d04c      	beq.n	8007432 <_strtod_l+0xca>
 8007398:	d83a      	bhi.n	8007410 <_strtod_l+0xa8>
 800739a:	2a0d      	cmp	r2, #13
 800739c:	d833      	bhi.n	8007406 <_strtod_l+0x9e>
 800739e:	2a08      	cmp	r2, #8
 80073a0:	d833      	bhi.n	800740a <_strtod_l+0xa2>
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	d03d      	beq.n	8007422 <_strtod_l+0xba>
 80073a6:	2300      	movs	r3, #0
 80073a8:	930c      	str	r3, [sp, #48]	; 0x30
 80073aa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80073ac:	782b      	ldrb	r3, [r5, #0]
 80073ae:	2b30      	cmp	r3, #48	; 0x30
 80073b0:	f040 80af 	bne.w	8007512 <_strtod_l+0x1aa>
 80073b4:	786b      	ldrb	r3, [r5, #1]
 80073b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073ba:	2b58      	cmp	r3, #88	; 0x58
 80073bc:	d16c      	bne.n	8007498 <_strtod_l+0x130>
 80073be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073c0:	4650      	mov	r0, sl
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	ab1c      	add	r3, sp, #112	; 0x70
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	4a8d      	ldr	r2, [pc, #564]	; (8007600 <_strtod_l+0x298>)
 80073ca:	f8cd b008 	str.w	fp, [sp, #8]
 80073ce:	ab1d      	add	r3, sp, #116	; 0x74
 80073d0:	a91b      	add	r1, sp, #108	; 0x6c
 80073d2:	f001 fd2f 	bl	8008e34 <__gethex>
 80073d6:	f010 0607 	ands.w	r6, r0, #7
 80073da:	4604      	mov	r4, r0
 80073dc:	d005      	beq.n	80073ea <_strtod_l+0x82>
 80073de:	2e06      	cmp	r6, #6
 80073e0:	d129      	bne.n	8007436 <_strtod_l+0xce>
 80073e2:	2300      	movs	r3, #0
 80073e4:	3501      	adds	r5, #1
 80073e6:	951b      	str	r5, [sp, #108]	; 0x6c
 80073e8:	930c      	str	r3, [sp, #48]	; 0x30
 80073ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 8596 	bne.w	8007f1e <_strtod_l+0xbb6>
 80073f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073f4:	b1d3      	cbz	r3, 800742c <_strtod_l+0xc4>
 80073f6:	4642      	mov	r2, r8
 80073f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073fc:	4610      	mov	r0, r2
 80073fe:	4619      	mov	r1, r3
 8007400:	b021      	add	sp, #132	; 0x84
 8007402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007406:	2a20      	cmp	r2, #32
 8007408:	d1cd      	bne.n	80073a6 <_strtod_l+0x3e>
 800740a:	3301      	adds	r3, #1
 800740c:	931b      	str	r3, [sp, #108]	; 0x6c
 800740e:	e7bf      	b.n	8007390 <_strtod_l+0x28>
 8007410:	2a2d      	cmp	r2, #45	; 0x2d
 8007412:	d1c8      	bne.n	80073a6 <_strtod_l+0x3e>
 8007414:	2201      	movs	r2, #1
 8007416:	920c      	str	r2, [sp, #48]	; 0x30
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	921b      	str	r2, [sp, #108]	; 0x6c
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1c3      	bne.n	80073aa <_strtod_l+0x42>
 8007422:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007424:	961b      	str	r6, [sp, #108]	; 0x6c
 8007426:	2b00      	cmp	r3, #0
 8007428:	f040 8577 	bne.w	8007f1a <_strtod_l+0xbb2>
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	e7e4      	b.n	80073fc <_strtod_l+0x94>
 8007432:	2200      	movs	r2, #0
 8007434:	e7ef      	b.n	8007416 <_strtod_l+0xae>
 8007436:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007438:	b13a      	cbz	r2, 800744a <_strtod_l+0xe2>
 800743a:	2135      	movs	r1, #53	; 0x35
 800743c:	a81e      	add	r0, sp, #120	; 0x78
 800743e:	f002 fca5 	bl	8009d8c <__copybits>
 8007442:	4650      	mov	r0, sl
 8007444:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007446:	f002 f86d 	bl	8009524 <_Bfree>
 800744a:	3e01      	subs	r6, #1
 800744c:	2e05      	cmp	r6, #5
 800744e:	d807      	bhi.n	8007460 <_strtod_l+0xf8>
 8007450:	e8df f006 	tbb	[pc, r6]
 8007454:	1d180b0e 	.word	0x1d180b0e
 8007458:	030e      	.short	0x030e
 800745a:	f04f 0900 	mov.w	r9, #0
 800745e:	46c8      	mov	r8, r9
 8007460:	0721      	lsls	r1, r4, #28
 8007462:	d5c2      	bpl.n	80073ea <_strtod_l+0x82>
 8007464:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007468:	e7bf      	b.n	80073ea <_strtod_l+0x82>
 800746a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800746e:	e7f7      	b.n	8007460 <_strtod_l+0xf8>
 8007470:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007472:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007476:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800747a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800747e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007482:	e7ed      	b.n	8007460 <_strtod_l+0xf8>
 8007484:	f04f 0800 	mov.w	r8, #0
 8007488:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007604 <_strtod_l+0x29c>
 800748c:	e7e8      	b.n	8007460 <_strtod_l+0xf8>
 800748e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007492:	f04f 38ff 	mov.w	r8, #4294967295
 8007496:	e7e3      	b.n	8007460 <_strtod_l+0xf8>
 8007498:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	921b      	str	r2, [sp, #108]	; 0x6c
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b30      	cmp	r3, #48	; 0x30
 80074a2:	d0f9      	beq.n	8007498 <_strtod_l+0x130>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0a0      	beq.n	80073ea <_strtod_l+0x82>
 80074a8:	2301      	movs	r3, #1
 80074aa:	9307      	str	r3, [sp, #28]
 80074ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074ae:	220a      	movs	r2, #10
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	2300      	movs	r3, #0
 80074b4:	469b      	mov	fp, r3
 80074b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80074ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80074bc:	7805      	ldrb	r5, [r0, #0]
 80074be:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80074c2:	b2d9      	uxtb	r1, r3
 80074c4:	2909      	cmp	r1, #9
 80074c6:	d926      	bls.n	8007516 <_strtod_l+0x1ae>
 80074c8:	4622      	mov	r2, r4
 80074ca:	4639      	mov	r1, r7
 80074cc:	f002 fec8 	bl	800a260 <strncmp>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d032      	beq.n	800753a <_strtod_l+0x1d2>
 80074d4:	2000      	movs	r0, #0
 80074d6:	462b      	mov	r3, r5
 80074d8:	465c      	mov	r4, fp
 80074da:	4602      	mov	r2, r0
 80074dc:	9004      	str	r0, [sp, #16]
 80074de:	2b65      	cmp	r3, #101	; 0x65
 80074e0:	d001      	beq.n	80074e6 <_strtod_l+0x17e>
 80074e2:	2b45      	cmp	r3, #69	; 0x45
 80074e4:	d113      	bne.n	800750e <_strtod_l+0x1a6>
 80074e6:	b91c      	cbnz	r4, 80074f0 <_strtod_l+0x188>
 80074e8:	9b07      	ldr	r3, [sp, #28]
 80074ea:	4303      	orrs	r3, r0
 80074ec:	d099      	beq.n	8007422 <_strtod_l+0xba>
 80074ee:	2400      	movs	r4, #0
 80074f0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80074f2:	1c73      	adds	r3, r6, #1
 80074f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80074f6:	7873      	ldrb	r3, [r6, #1]
 80074f8:	2b2b      	cmp	r3, #43	; 0x2b
 80074fa:	d078      	beq.n	80075ee <_strtod_l+0x286>
 80074fc:	2b2d      	cmp	r3, #45	; 0x2d
 80074fe:	d07b      	beq.n	80075f8 <_strtod_l+0x290>
 8007500:	2700      	movs	r7, #0
 8007502:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007506:	2909      	cmp	r1, #9
 8007508:	f240 8082 	bls.w	8007610 <_strtod_l+0x2a8>
 800750c:	961b      	str	r6, [sp, #108]	; 0x6c
 800750e:	2500      	movs	r5, #0
 8007510:	e09e      	b.n	8007650 <_strtod_l+0x2e8>
 8007512:	2300      	movs	r3, #0
 8007514:	e7c9      	b.n	80074aa <_strtod_l+0x142>
 8007516:	f1bb 0f08 	cmp.w	fp, #8
 800751a:	bfd5      	itete	le
 800751c:	9906      	ldrle	r1, [sp, #24]
 800751e:	9905      	ldrgt	r1, [sp, #20]
 8007520:	fb02 3301 	mlale	r3, r2, r1, r3
 8007524:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007528:	f100 0001 	add.w	r0, r0, #1
 800752c:	bfd4      	ite	le
 800752e:	9306      	strle	r3, [sp, #24]
 8007530:	9305      	strgt	r3, [sp, #20]
 8007532:	f10b 0b01 	add.w	fp, fp, #1
 8007536:	901b      	str	r0, [sp, #108]	; 0x6c
 8007538:	e7bf      	b.n	80074ba <_strtod_l+0x152>
 800753a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800753c:	191a      	adds	r2, r3, r4
 800753e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007540:	5d1b      	ldrb	r3, [r3, r4]
 8007542:	f1bb 0f00 	cmp.w	fp, #0
 8007546:	d036      	beq.n	80075b6 <_strtod_l+0x24e>
 8007548:	465c      	mov	r4, fp
 800754a:	9004      	str	r0, [sp, #16]
 800754c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007550:	2a09      	cmp	r2, #9
 8007552:	d912      	bls.n	800757a <_strtod_l+0x212>
 8007554:	2201      	movs	r2, #1
 8007556:	e7c2      	b.n	80074de <_strtod_l+0x176>
 8007558:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800755a:	3001      	adds	r0, #1
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	2b30      	cmp	r3, #48	; 0x30
 8007564:	d0f8      	beq.n	8007558 <_strtod_l+0x1f0>
 8007566:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800756a:	2a08      	cmp	r2, #8
 800756c:	f200 84dc 	bhi.w	8007f28 <_strtod_l+0xbc0>
 8007570:	9004      	str	r0, [sp, #16]
 8007572:	2000      	movs	r0, #0
 8007574:	4604      	mov	r4, r0
 8007576:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007578:	9208      	str	r2, [sp, #32]
 800757a:	3b30      	subs	r3, #48	; 0x30
 800757c:	f100 0201 	add.w	r2, r0, #1
 8007580:	d013      	beq.n	80075aa <_strtod_l+0x242>
 8007582:	9904      	ldr	r1, [sp, #16]
 8007584:	1905      	adds	r5, r0, r4
 8007586:	4411      	add	r1, r2
 8007588:	9104      	str	r1, [sp, #16]
 800758a:	4622      	mov	r2, r4
 800758c:	210a      	movs	r1, #10
 800758e:	42aa      	cmp	r2, r5
 8007590:	d113      	bne.n	80075ba <_strtod_l+0x252>
 8007592:	1822      	adds	r2, r4, r0
 8007594:	2a08      	cmp	r2, #8
 8007596:	f104 0401 	add.w	r4, r4, #1
 800759a:	4404      	add	r4, r0
 800759c:	dc1b      	bgt.n	80075d6 <_strtod_l+0x26e>
 800759e:	220a      	movs	r2, #10
 80075a0:	9906      	ldr	r1, [sp, #24]
 80075a2:	fb02 3301 	mla	r3, r2, r1, r3
 80075a6:	9306      	str	r3, [sp, #24]
 80075a8:	2200      	movs	r2, #0
 80075aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075ac:	4610      	mov	r0, r2
 80075ae:	1c59      	adds	r1, r3, #1
 80075b0:	911b      	str	r1, [sp, #108]	; 0x6c
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	e7ca      	b.n	800754c <_strtod_l+0x1e4>
 80075b6:	4658      	mov	r0, fp
 80075b8:	e7d3      	b.n	8007562 <_strtod_l+0x1fa>
 80075ba:	2a08      	cmp	r2, #8
 80075bc:	dc04      	bgt.n	80075c8 <_strtod_l+0x260>
 80075be:	9f06      	ldr	r7, [sp, #24]
 80075c0:	434f      	muls	r7, r1
 80075c2:	9706      	str	r7, [sp, #24]
 80075c4:	3201      	adds	r2, #1
 80075c6:	e7e2      	b.n	800758e <_strtod_l+0x226>
 80075c8:	1c57      	adds	r7, r2, #1
 80075ca:	2f10      	cmp	r7, #16
 80075cc:	bfde      	ittt	le
 80075ce:	9f05      	ldrle	r7, [sp, #20]
 80075d0:	434f      	mulle	r7, r1
 80075d2:	9705      	strle	r7, [sp, #20]
 80075d4:	e7f6      	b.n	80075c4 <_strtod_l+0x25c>
 80075d6:	2c10      	cmp	r4, #16
 80075d8:	bfdf      	itttt	le
 80075da:	220a      	movle	r2, #10
 80075dc:	9905      	ldrle	r1, [sp, #20]
 80075de:	fb02 3301 	mlale	r3, r2, r1, r3
 80075e2:	9305      	strle	r3, [sp, #20]
 80075e4:	e7e0      	b.n	80075a8 <_strtod_l+0x240>
 80075e6:	2300      	movs	r3, #0
 80075e8:	2201      	movs	r2, #1
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	e77c      	b.n	80074e8 <_strtod_l+0x180>
 80075ee:	2700      	movs	r7, #0
 80075f0:	1cb3      	adds	r3, r6, #2
 80075f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80075f4:	78b3      	ldrb	r3, [r6, #2]
 80075f6:	e784      	b.n	8007502 <_strtod_l+0x19a>
 80075f8:	2701      	movs	r7, #1
 80075fa:	e7f9      	b.n	80075f0 <_strtod_l+0x288>
 80075fc:	0800b2b8 	.word	0x0800b2b8
 8007600:	0800b068 	.word	0x0800b068
 8007604:	7ff00000 	.word	0x7ff00000
 8007608:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800760a:	1c59      	adds	r1, r3, #1
 800760c:	911b      	str	r1, [sp, #108]	; 0x6c
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d0f9      	beq.n	8007608 <_strtod_l+0x2a0>
 8007614:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007618:	2908      	cmp	r1, #8
 800761a:	f63f af78 	bhi.w	800750e <_strtod_l+0x1a6>
 800761e:	f04f 0e0a 	mov.w	lr, #10
 8007622:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007628:	9309      	str	r3, [sp, #36]	; 0x24
 800762a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800762c:	1c59      	adds	r1, r3, #1
 800762e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007636:	2d09      	cmp	r5, #9
 8007638:	d935      	bls.n	80076a6 <_strtod_l+0x33e>
 800763a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800763c:	1b49      	subs	r1, r1, r5
 800763e:	2908      	cmp	r1, #8
 8007640:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007644:	dc02      	bgt.n	800764c <_strtod_l+0x2e4>
 8007646:	4565      	cmp	r5, ip
 8007648:	bfa8      	it	ge
 800764a:	4665      	movge	r5, ip
 800764c:	b107      	cbz	r7, 8007650 <_strtod_l+0x2e8>
 800764e:	426d      	negs	r5, r5
 8007650:	2c00      	cmp	r4, #0
 8007652:	d14c      	bne.n	80076ee <_strtod_l+0x386>
 8007654:	9907      	ldr	r1, [sp, #28]
 8007656:	4301      	orrs	r1, r0
 8007658:	f47f aec7 	bne.w	80073ea <_strtod_l+0x82>
 800765c:	2a00      	cmp	r2, #0
 800765e:	f47f aee0 	bne.w	8007422 <_strtod_l+0xba>
 8007662:	2b69      	cmp	r3, #105	; 0x69
 8007664:	d026      	beq.n	80076b4 <_strtod_l+0x34c>
 8007666:	dc23      	bgt.n	80076b0 <_strtod_l+0x348>
 8007668:	2b49      	cmp	r3, #73	; 0x49
 800766a:	d023      	beq.n	80076b4 <_strtod_l+0x34c>
 800766c:	2b4e      	cmp	r3, #78	; 0x4e
 800766e:	f47f aed8 	bne.w	8007422 <_strtod_l+0xba>
 8007672:	499c      	ldr	r1, [pc, #624]	; (80078e4 <_strtod_l+0x57c>)
 8007674:	a81b      	add	r0, sp, #108	; 0x6c
 8007676:	f001 fe2b 	bl	80092d0 <__match>
 800767a:	2800      	cmp	r0, #0
 800767c:	f43f aed1 	beq.w	8007422 <_strtod_l+0xba>
 8007680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b28      	cmp	r3, #40	; 0x28
 8007686:	d12c      	bne.n	80076e2 <_strtod_l+0x37a>
 8007688:	4997      	ldr	r1, [pc, #604]	; (80078e8 <_strtod_l+0x580>)
 800768a:	aa1e      	add	r2, sp, #120	; 0x78
 800768c:	a81b      	add	r0, sp, #108	; 0x6c
 800768e:	f001 fe33 	bl	80092f8 <__hexnan>
 8007692:	2805      	cmp	r0, #5
 8007694:	d125      	bne.n	80076e2 <_strtod_l+0x37a>
 8007696:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007698:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800769c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80076a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80076a4:	e6a1      	b.n	80073ea <_strtod_l+0x82>
 80076a6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80076aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80076ae:	e7bc      	b.n	800762a <_strtod_l+0x2c2>
 80076b0:	2b6e      	cmp	r3, #110	; 0x6e
 80076b2:	e7dc      	b.n	800766e <_strtod_l+0x306>
 80076b4:	498d      	ldr	r1, [pc, #564]	; (80078ec <_strtod_l+0x584>)
 80076b6:	a81b      	add	r0, sp, #108	; 0x6c
 80076b8:	f001 fe0a 	bl	80092d0 <__match>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f43f aeb0 	beq.w	8007422 <_strtod_l+0xba>
 80076c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076c4:	498a      	ldr	r1, [pc, #552]	; (80078f0 <_strtod_l+0x588>)
 80076c6:	3b01      	subs	r3, #1
 80076c8:	a81b      	add	r0, sp, #108	; 0x6c
 80076ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80076cc:	f001 fe00 	bl	80092d0 <__match>
 80076d0:	b910      	cbnz	r0, 80076d8 <_strtod_l+0x370>
 80076d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076d4:	3301      	adds	r3, #1
 80076d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80076d8:	f04f 0800 	mov.w	r8, #0
 80076dc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007900 <_strtod_l+0x598>
 80076e0:	e683      	b.n	80073ea <_strtod_l+0x82>
 80076e2:	4884      	ldr	r0, [pc, #528]	; (80078f4 <_strtod_l+0x58c>)
 80076e4:	f002 fda6 	bl	800a234 <nan>
 80076e8:	4680      	mov	r8, r0
 80076ea:	4689      	mov	r9, r1
 80076ec:	e67d      	b.n	80073ea <_strtod_l+0x82>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	f1bb 0f00 	cmp.w	fp, #0
 80076f4:	bf08      	it	eq
 80076f6:	46a3      	moveq	fp, r4
 80076f8:	1aeb      	subs	r3, r5, r3
 80076fa:	2c10      	cmp	r4, #16
 80076fc:	9806      	ldr	r0, [sp, #24]
 80076fe:	4626      	mov	r6, r4
 8007700:	9307      	str	r3, [sp, #28]
 8007702:	bfa8      	it	ge
 8007704:	2610      	movge	r6, #16
 8007706:	f7f8 fe6d 	bl	80003e4 <__aeabi_ui2d>
 800770a:	2c09      	cmp	r4, #9
 800770c:	4680      	mov	r8, r0
 800770e:	4689      	mov	r9, r1
 8007710:	dd13      	ble.n	800773a <_strtod_l+0x3d2>
 8007712:	4b79      	ldr	r3, [pc, #484]	; (80078f8 <_strtod_l+0x590>)
 8007714:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007718:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800771c:	f7f8 fedc 	bl	80004d8 <__aeabi_dmul>
 8007720:	4680      	mov	r8, r0
 8007722:	9805      	ldr	r0, [sp, #20]
 8007724:	4689      	mov	r9, r1
 8007726:	f7f8 fe5d 	bl	80003e4 <__aeabi_ui2d>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f8 fd1b 	bl	800016c <__adddf3>
 8007736:	4680      	mov	r8, r0
 8007738:	4689      	mov	r9, r1
 800773a:	2c0f      	cmp	r4, #15
 800773c:	dc36      	bgt.n	80077ac <_strtod_l+0x444>
 800773e:	9b07      	ldr	r3, [sp, #28]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f43f ae52 	beq.w	80073ea <_strtod_l+0x82>
 8007746:	dd22      	ble.n	800778e <_strtod_l+0x426>
 8007748:	2b16      	cmp	r3, #22
 800774a:	dc09      	bgt.n	8007760 <_strtod_l+0x3f8>
 800774c:	4c6a      	ldr	r4, [pc, #424]	; (80078f8 <_strtod_l+0x590>)
 800774e:	4642      	mov	r2, r8
 8007750:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007754:	464b      	mov	r3, r9
 8007756:	e9d4 0100 	ldrd	r0, r1, [r4]
 800775a:	f7f8 febd 	bl	80004d8 <__aeabi_dmul>
 800775e:	e7c3      	b.n	80076e8 <_strtod_l+0x380>
 8007760:	9a07      	ldr	r2, [sp, #28]
 8007762:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007766:	4293      	cmp	r3, r2
 8007768:	db20      	blt.n	80077ac <_strtod_l+0x444>
 800776a:	4d63      	ldr	r5, [pc, #396]	; (80078f8 <_strtod_l+0x590>)
 800776c:	f1c4 040f 	rsb	r4, r4, #15
 8007770:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007774:	4642      	mov	r2, r8
 8007776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800777a:	464b      	mov	r3, r9
 800777c:	f7f8 feac 	bl	80004d8 <__aeabi_dmul>
 8007780:	9b07      	ldr	r3, [sp, #28]
 8007782:	1b1c      	subs	r4, r3, r4
 8007784:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800778c:	e7e5      	b.n	800775a <_strtod_l+0x3f2>
 800778e:	9b07      	ldr	r3, [sp, #28]
 8007790:	3316      	adds	r3, #22
 8007792:	db0b      	blt.n	80077ac <_strtod_l+0x444>
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	4a58      	ldr	r2, [pc, #352]	; (80078f8 <_strtod_l+0x590>)
 8007798:	1b5d      	subs	r5, r3, r5
 800779a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800779e:	4640      	mov	r0, r8
 80077a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077a4:	4649      	mov	r1, r9
 80077a6:	f7f8 ffc1 	bl	800072c <__aeabi_ddiv>
 80077aa:	e79d      	b.n	80076e8 <_strtod_l+0x380>
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	1ba6      	subs	r6, r4, r6
 80077b0:	441e      	add	r6, r3
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	dd71      	ble.n	800789a <_strtod_l+0x532>
 80077b6:	f016 030f 	ands.w	r3, r6, #15
 80077ba:	d00a      	beq.n	80077d2 <_strtod_l+0x46a>
 80077bc:	494e      	ldr	r1, [pc, #312]	; (80078f8 <_strtod_l+0x590>)
 80077be:	4642      	mov	r2, r8
 80077c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c8:	464b      	mov	r3, r9
 80077ca:	f7f8 fe85 	bl	80004d8 <__aeabi_dmul>
 80077ce:	4680      	mov	r8, r0
 80077d0:	4689      	mov	r9, r1
 80077d2:	f036 060f 	bics.w	r6, r6, #15
 80077d6:	d050      	beq.n	800787a <_strtod_l+0x512>
 80077d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80077dc:	dd27      	ble.n	800782e <_strtod_l+0x4c6>
 80077de:	f04f 0b00 	mov.w	fp, #0
 80077e2:	f8cd b010 	str.w	fp, [sp, #16]
 80077e6:	f8cd b020 	str.w	fp, [sp, #32]
 80077ea:	f8cd b018 	str.w	fp, [sp, #24]
 80077ee:	2322      	movs	r3, #34	; 0x22
 80077f0:	f04f 0800 	mov.w	r8, #0
 80077f4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007900 <_strtod_l+0x598>
 80077f8:	f8ca 3000 	str.w	r3, [sl]
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f43f adf3 	beq.w	80073ea <_strtod_l+0x82>
 8007804:	4650      	mov	r0, sl
 8007806:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007808:	f001 fe8c 	bl	8009524 <_Bfree>
 800780c:	4650      	mov	r0, sl
 800780e:	9906      	ldr	r1, [sp, #24]
 8007810:	f001 fe88 	bl	8009524 <_Bfree>
 8007814:	4650      	mov	r0, sl
 8007816:	9904      	ldr	r1, [sp, #16]
 8007818:	f001 fe84 	bl	8009524 <_Bfree>
 800781c:	4650      	mov	r0, sl
 800781e:	9908      	ldr	r1, [sp, #32]
 8007820:	f001 fe80 	bl	8009524 <_Bfree>
 8007824:	4659      	mov	r1, fp
 8007826:	4650      	mov	r0, sl
 8007828:	f001 fe7c 	bl	8009524 <_Bfree>
 800782c:	e5dd      	b.n	80073ea <_strtod_l+0x82>
 800782e:	2300      	movs	r3, #0
 8007830:	4640      	mov	r0, r8
 8007832:	4649      	mov	r1, r9
 8007834:	461f      	mov	r7, r3
 8007836:	1136      	asrs	r6, r6, #4
 8007838:	2e01      	cmp	r6, #1
 800783a:	dc21      	bgt.n	8007880 <_strtod_l+0x518>
 800783c:	b10b      	cbz	r3, 8007842 <_strtod_l+0x4da>
 800783e:	4680      	mov	r8, r0
 8007840:	4689      	mov	r9, r1
 8007842:	4b2e      	ldr	r3, [pc, #184]	; (80078fc <_strtod_l+0x594>)
 8007844:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007848:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800784c:	4642      	mov	r2, r8
 800784e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007852:	464b      	mov	r3, r9
 8007854:	f7f8 fe40 	bl	80004d8 <__aeabi_dmul>
 8007858:	4b29      	ldr	r3, [pc, #164]	; (8007900 <_strtod_l+0x598>)
 800785a:	460a      	mov	r2, r1
 800785c:	400b      	ands	r3, r1
 800785e:	4929      	ldr	r1, [pc, #164]	; (8007904 <_strtod_l+0x59c>)
 8007860:	4680      	mov	r8, r0
 8007862:	428b      	cmp	r3, r1
 8007864:	d8bb      	bhi.n	80077de <_strtod_l+0x476>
 8007866:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800786a:	428b      	cmp	r3, r1
 800786c:	bf86      	itte	hi
 800786e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007872:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007908 <_strtod_l+0x5a0>
 8007876:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800787a:	2300      	movs	r3, #0
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	e07e      	b.n	800797e <_strtod_l+0x616>
 8007880:	07f2      	lsls	r2, r6, #31
 8007882:	d507      	bpl.n	8007894 <_strtod_l+0x52c>
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <_strtod_l+0x594>)
 8007886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fe23 	bl	80004d8 <__aeabi_dmul>
 8007892:	2301      	movs	r3, #1
 8007894:	3701      	adds	r7, #1
 8007896:	1076      	asrs	r6, r6, #1
 8007898:	e7ce      	b.n	8007838 <_strtod_l+0x4d0>
 800789a:	d0ee      	beq.n	800787a <_strtod_l+0x512>
 800789c:	4276      	negs	r6, r6
 800789e:	f016 020f 	ands.w	r2, r6, #15
 80078a2:	d00a      	beq.n	80078ba <_strtod_l+0x552>
 80078a4:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <_strtod_l+0x590>)
 80078a6:	4640      	mov	r0, r8
 80078a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ac:	4649      	mov	r1, r9
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f7f8 ff3b 	bl	800072c <__aeabi_ddiv>
 80078b6:	4680      	mov	r8, r0
 80078b8:	4689      	mov	r9, r1
 80078ba:	1136      	asrs	r6, r6, #4
 80078bc:	d0dd      	beq.n	800787a <_strtod_l+0x512>
 80078be:	2e1f      	cmp	r6, #31
 80078c0:	dd24      	ble.n	800790c <_strtod_l+0x5a4>
 80078c2:	f04f 0b00 	mov.w	fp, #0
 80078c6:	f8cd b010 	str.w	fp, [sp, #16]
 80078ca:	f8cd b020 	str.w	fp, [sp, #32]
 80078ce:	f8cd b018 	str.w	fp, [sp, #24]
 80078d2:	2322      	movs	r3, #34	; 0x22
 80078d4:	f04f 0800 	mov.w	r8, #0
 80078d8:	f04f 0900 	mov.w	r9, #0
 80078dc:	f8ca 3000 	str.w	r3, [sl]
 80078e0:	e78c      	b.n	80077fc <_strtod_l+0x494>
 80078e2:	bf00      	nop
 80078e4:	0800b039 	.word	0x0800b039
 80078e8:	0800b07c 	.word	0x0800b07c
 80078ec:	0800b031 	.word	0x0800b031
 80078f0:	0800b1bc 	.word	0x0800b1bc
 80078f4:	0800b478 	.word	0x0800b478
 80078f8:	0800b358 	.word	0x0800b358
 80078fc:	0800b330 	.word	0x0800b330
 8007900:	7ff00000 	.word	0x7ff00000
 8007904:	7ca00000 	.word	0x7ca00000
 8007908:	7fefffff 	.word	0x7fefffff
 800790c:	f016 0310 	ands.w	r3, r6, #16
 8007910:	bf18      	it	ne
 8007912:	236a      	movne	r3, #106	; 0x6a
 8007914:	4640      	mov	r0, r8
 8007916:	9305      	str	r3, [sp, #20]
 8007918:	4649      	mov	r1, r9
 800791a:	2300      	movs	r3, #0
 800791c:	4fb2      	ldr	r7, [pc, #712]	; (8007be8 <_strtod_l+0x880>)
 800791e:	07f2      	lsls	r2, r6, #31
 8007920:	d504      	bpl.n	800792c <_strtod_l+0x5c4>
 8007922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007926:	f7f8 fdd7 	bl	80004d8 <__aeabi_dmul>
 800792a:	2301      	movs	r3, #1
 800792c:	1076      	asrs	r6, r6, #1
 800792e:	f107 0708 	add.w	r7, r7, #8
 8007932:	d1f4      	bne.n	800791e <_strtod_l+0x5b6>
 8007934:	b10b      	cbz	r3, 800793a <_strtod_l+0x5d2>
 8007936:	4680      	mov	r8, r0
 8007938:	4689      	mov	r9, r1
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	b1bb      	cbz	r3, 800796e <_strtod_l+0x606>
 800793e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007946:	2b00      	cmp	r3, #0
 8007948:	4649      	mov	r1, r9
 800794a:	dd10      	ble.n	800796e <_strtod_l+0x606>
 800794c:	2b1f      	cmp	r3, #31
 800794e:	f340 812b 	ble.w	8007ba8 <_strtod_l+0x840>
 8007952:	2b34      	cmp	r3, #52	; 0x34
 8007954:	bfd8      	it	le
 8007956:	f04f 32ff 	movle.w	r2, #4294967295
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	bfcf      	iteee	gt
 8007960:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007964:	3b20      	suble	r3, #32
 8007966:	fa02 f303 	lslle.w	r3, r2, r3
 800796a:	ea03 0901 	andle.w	r9, r3, r1
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f9 f817 	bl	80009a8 <__aeabi_dcmpeq>
 800797a:	2800      	cmp	r0, #0
 800797c:	d1a1      	bne.n	80078c2 <_strtod_l+0x55a>
 800797e:	9b06      	ldr	r3, [sp, #24]
 8007980:	465a      	mov	r2, fp
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	4650      	mov	r0, sl
 8007986:	4623      	mov	r3, r4
 8007988:	9908      	ldr	r1, [sp, #32]
 800798a:	f001 fe37 	bl	80095fc <__s2b>
 800798e:	9008      	str	r0, [sp, #32]
 8007990:	2800      	cmp	r0, #0
 8007992:	f43f af24 	beq.w	80077de <_strtod_l+0x476>
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	f04f 0b00 	mov.w	fp, #0
 800799c:	1b5d      	subs	r5, r3, r5
 800799e:	9b07      	ldr	r3, [sp, #28]
 80079a0:	f8cd b010 	str.w	fp, [sp, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bfb4      	ite	lt
 80079a8:	462b      	movlt	r3, r5
 80079aa:	2300      	movge	r3, #0
 80079ac:	930e      	str	r3, [sp, #56]	; 0x38
 80079ae:	9b07      	ldr	r3, [sp, #28]
 80079b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80079b4:	9316      	str	r3, [sp, #88]	; 0x58
 80079b6:	9b08      	ldr	r3, [sp, #32]
 80079b8:	4650      	mov	r0, sl
 80079ba:	6859      	ldr	r1, [r3, #4]
 80079bc:	f001 fd72 	bl	80094a4 <_Balloc>
 80079c0:	9006      	str	r0, [sp, #24]
 80079c2:	2800      	cmp	r0, #0
 80079c4:	f43f af13 	beq.w	80077ee <_strtod_l+0x486>
 80079c8:	9b08      	ldr	r3, [sp, #32]
 80079ca:	300c      	adds	r0, #12
 80079cc:	691a      	ldr	r2, [r3, #16]
 80079ce:	f103 010c 	add.w	r1, r3, #12
 80079d2:	3202      	adds	r2, #2
 80079d4:	0092      	lsls	r2, r2, #2
 80079d6:	f001 fd57 	bl	8009488 <memcpy>
 80079da:	ab1e      	add	r3, sp, #120	; 0x78
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	ab1d      	add	r3, sp, #116	; 0x74
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	4642      	mov	r2, r8
 80079e4:	464b      	mov	r3, r9
 80079e6:	4650      	mov	r0, sl
 80079e8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80079ec:	f002 f944 	bl	8009c78 <__d2b>
 80079f0:	901c      	str	r0, [sp, #112]	; 0x70
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f43f aefb 	beq.w	80077ee <_strtod_l+0x486>
 80079f8:	2101      	movs	r1, #1
 80079fa:	4650      	mov	r0, sl
 80079fc:	f001 fe96 	bl	800972c <__i2b>
 8007a00:	4603      	mov	r3, r0
 8007a02:	9004      	str	r0, [sp, #16]
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f43f aef2 	beq.w	80077ee <_strtod_l+0x486>
 8007a0a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007a0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	bfab      	itete	ge
 8007a12:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007a14:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007a16:	18ee      	addge	r6, r5, r3
 8007a18:	1b5c      	sublt	r4, r3, r5
 8007a1a:	9b05      	ldr	r3, [sp, #20]
 8007a1c:	bfa8      	it	ge
 8007a1e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007a20:	eba5 0503 	sub.w	r5, r5, r3
 8007a24:	4415      	add	r5, r2
 8007a26:	4b71      	ldr	r3, [pc, #452]	; (8007bec <_strtod_l+0x884>)
 8007a28:	f105 35ff 	add.w	r5, r5, #4294967295
 8007a2c:	bfb8      	it	lt
 8007a2e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007a30:	429d      	cmp	r5, r3
 8007a32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a36:	f280 80c9 	bge.w	8007bcc <_strtod_l+0x864>
 8007a3a:	1b5b      	subs	r3, r3, r5
 8007a3c:	2b1f      	cmp	r3, #31
 8007a3e:	f04f 0701 	mov.w	r7, #1
 8007a42:	eba2 0203 	sub.w	r2, r2, r3
 8007a46:	f300 80b6 	bgt.w	8007bb6 <_strtod_l+0x84e>
 8007a4a:	2500      	movs	r5, #0
 8007a4c:	fa07 f303 	lsl.w	r3, r7, r3
 8007a50:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a52:	18b7      	adds	r7, r6, r2
 8007a54:	9b05      	ldr	r3, [sp, #20]
 8007a56:	42be      	cmp	r6, r7
 8007a58:	4414      	add	r4, r2
 8007a5a:	441c      	add	r4, r3
 8007a5c:	4633      	mov	r3, r6
 8007a5e:	bfa8      	it	ge
 8007a60:	463b      	movge	r3, r7
 8007a62:	42a3      	cmp	r3, r4
 8007a64:	bfa8      	it	ge
 8007a66:	4623      	movge	r3, r4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bfc2      	ittt	gt
 8007a6c:	1aff      	subgt	r7, r7, r3
 8007a6e:	1ae4      	subgt	r4, r4, r3
 8007a70:	1af6      	subgt	r6, r6, r3
 8007a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd17      	ble.n	8007aa8 <_strtod_l+0x740>
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	9904      	ldr	r1, [sp, #16]
 8007a7e:	f001 ff0f 	bl	80098a0 <__pow5mult>
 8007a82:	9004      	str	r0, [sp, #16]
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f aeb2 	beq.w	80077ee <_strtod_l+0x486>
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a8e:	4650      	mov	r0, sl
 8007a90:	f001 fe62 	bl	8009758 <__multiply>
 8007a94:	9009      	str	r0, [sp, #36]	; 0x24
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f43f aea9 	beq.w	80077ee <_strtod_l+0x486>
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007aa0:	f001 fd40 	bl	8009524 <_Bfree>
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	931c      	str	r3, [sp, #112]	; 0x70
 8007aa8:	2f00      	cmp	r7, #0
 8007aaa:	f300 8093 	bgt.w	8007bd4 <_strtod_l+0x86c>
 8007aae:	9b07      	ldr	r3, [sp, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dd08      	ble.n	8007ac6 <_strtod_l+0x75e>
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ab8:	9906      	ldr	r1, [sp, #24]
 8007aba:	f001 fef1 	bl	80098a0 <__pow5mult>
 8007abe:	9006      	str	r0, [sp, #24]
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f43f ae94 	beq.w	80077ee <_strtod_l+0x486>
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	dd08      	ble.n	8007adc <_strtod_l+0x774>
 8007aca:	4622      	mov	r2, r4
 8007acc:	4650      	mov	r0, sl
 8007ace:	9906      	ldr	r1, [sp, #24]
 8007ad0:	f001 ff40 	bl	8009954 <__lshift>
 8007ad4:	9006      	str	r0, [sp, #24]
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f43f ae89 	beq.w	80077ee <_strtod_l+0x486>
 8007adc:	2e00      	cmp	r6, #0
 8007ade:	dd08      	ble.n	8007af2 <_strtod_l+0x78a>
 8007ae0:	4632      	mov	r2, r6
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	9904      	ldr	r1, [sp, #16]
 8007ae6:	f001 ff35 	bl	8009954 <__lshift>
 8007aea:	9004      	str	r0, [sp, #16]
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f43f ae7e 	beq.w	80077ee <_strtod_l+0x486>
 8007af2:	4650      	mov	r0, sl
 8007af4:	9a06      	ldr	r2, [sp, #24]
 8007af6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007af8:	f001 ffb4 	bl	8009a64 <__mdiff>
 8007afc:	4683      	mov	fp, r0
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f ae75 	beq.w	80077ee <_strtod_l+0x486>
 8007b04:	2400      	movs	r4, #0
 8007b06:	68c3      	ldr	r3, [r0, #12]
 8007b08:	9904      	ldr	r1, [sp, #16]
 8007b0a:	60c4      	str	r4, [r0, #12]
 8007b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b0e:	f001 ff8d 	bl	8009a2c <__mcmp>
 8007b12:	42a0      	cmp	r0, r4
 8007b14:	da70      	bge.n	8007bf8 <_strtod_l+0x890>
 8007b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b18:	ea53 0308 	orrs.w	r3, r3, r8
 8007b1c:	f040 8096 	bne.w	8007c4c <_strtod_l+0x8e4>
 8007b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f040 8091 	bne.w	8007c4c <_strtod_l+0x8e4>
 8007b2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b2e:	0d1b      	lsrs	r3, r3, #20
 8007b30:	051b      	lsls	r3, r3, #20
 8007b32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b36:	f240 8089 	bls.w	8007c4c <_strtod_l+0x8e4>
 8007b3a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007b3e:	b923      	cbnz	r3, 8007b4a <_strtod_l+0x7e2>
 8007b40:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f340 8081 	ble.w	8007c4c <_strtod_l+0x8e4>
 8007b4a:	4659      	mov	r1, fp
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	4650      	mov	r0, sl
 8007b50:	f001 ff00 	bl	8009954 <__lshift>
 8007b54:	9904      	ldr	r1, [sp, #16]
 8007b56:	4683      	mov	fp, r0
 8007b58:	f001 ff68 	bl	8009a2c <__mcmp>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	dd75      	ble.n	8007c4c <_strtod_l+0x8e4>
 8007b60:	9905      	ldr	r1, [sp, #20]
 8007b62:	464b      	mov	r3, r9
 8007b64:	4a22      	ldr	r2, [pc, #136]	; (8007bf0 <_strtod_l+0x888>)
 8007b66:	2900      	cmp	r1, #0
 8007b68:	f000 8091 	beq.w	8007c8e <_strtod_l+0x926>
 8007b6c:	ea02 0109 	and.w	r1, r2, r9
 8007b70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b74:	f300 808b 	bgt.w	8007c8e <_strtod_l+0x926>
 8007b78:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b7c:	f77f aea9 	ble.w	80078d2 <_strtod_l+0x56a>
 8007b80:	2300      	movs	r3, #0
 8007b82:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <_strtod_l+0x88c>)
 8007b84:	4640      	mov	r0, r8
 8007b86:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b90:	f7f8 fca2 	bl	80004d8 <__aeabi_dmul>
 8007b94:	460b      	mov	r3, r1
 8007b96:	4303      	orrs	r3, r0
 8007b98:	bf08      	it	eq
 8007b9a:	2322      	moveq	r3, #34	; 0x22
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	4689      	mov	r9, r1
 8007ba0:	bf08      	it	eq
 8007ba2:	f8ca 3000 	streq.w	r3, [sl]
 8007ba6:	e62d      	b.n	8007804 <_strtod_l+0x49c>
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	ea03 0808 	and.w	r8, r3, r8
 8007bb4:	e6db      	b.n	800796e <_strtod_l+0x606>
 8007bb6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007bba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007bbe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007bc2:	35e2      	adds	r5, #226	; 0xe2
 8007bc4:	fa07 f505 	lsl.w	r5, r7, r5
 8007bc8:	970f      	str	r7, [sp, #60]	; 0x3c
 8007bca:	e742      	b.n	8007a52 <_strtod_l+0x6ea>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	2500      	movs	r5, #0
 8007bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bd2:	e73e      	b.n	8007a52 <_strtod_l+0x6ea>
 8007bd4:	463a      	mov	r2, r7
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bda:	f001 febb 	bl	8009954 <__lshift>
 8007bde:	901c      	str	r0, [sp, #112]	; 0x70
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f47f af64 	bne.w	8007aae <_strtod_l+0x746>
 8007be6:	e602      	b.n	80077ee <_strtod_l+0x486>
 8007be8:	0800b090 	.word	0x0800b090
 8007bec:	fffffc02 	.word	0xfffffc02
 8007bf0:	7ff00000 	.word	0x7ff00000
 8007bf4:	39500000 	.word	0x39500000
 8007bf8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007bfc:	d166      	bne.n	8007ccc <_strtod_l+0x964>
 8007bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c04:	b35a      	cbz	r2, 8007c5e <_strtod_l+0x8f6>
 8007c06:	4a9c      	ldr	r2, [pc, #624]	; (8007e78 <_strtod_l+0xb10>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d12c      	bne.n	8007c66 <_strtod_l+0x8fe>
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	4640      	mov	r0, r8
 8007c10:	b303      	cbz	r3, 8007c54 <_strtod_l+0x8ec>
 8007c12:	464b      	mov	r3, r9
 8007c14:	4a99      	ldr	r2, [pc, #612]	; (8007e7c <_strtod_l+0xb14>)
 8007c16:	f04f 31ff 	mov.w	r1, #4294967295
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c20:	d81b      	bhi.n	8007c5a <_strtod_l+0x8f2>
 8007c22:	0d12      	lsrs	r2, r2, #20
 8007c24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c28:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2c:	4298      	cmp	r0, r3
 8007c2e:	d11a      	bne.n	8007c66 <_strtod_l+0x8fe>
 8007c30:	4b93      	ldr	r3, [pc, #588]	; (8007e80 <_strtod_l+0xb18>)
 8007c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d102      	bne.n	8007c3e <_strtod_l+0x8d6>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f add8 	beq.w	80077ee <_strtod_l+0x486>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	4b8e      	ldr	r3, [pc, #568]	; (8007e7c <_strtod_l+0xb14>)
 8007c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c46:	401a      	ands	r2, r3
 8007c48:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007c4c:	9b05      	ldr	r3, [sp, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d196      	bne.n	8007b80 <_strtod_l+0x818>
 8007c52:	e5d7      	b.n	8007804 <_strtod_l+0x49c>
 8007c54:	f04f 33ff 	mov.w	r3, #4294967295
 8007c58:	e7e8      	b.n	8007c2c <_strtod_l+0x8c4>
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	e7e6      	b.n	8007c2c <_strtod_l+0x8c4>
 8007c5e:	ea53 0308 	orrs.w	r3, r3, r8
 8007c62:	f43f af7d 	beq.w	8007b60 <_strtod_l+0x7f8>
 8007c66:	b1e5      	cbz	r5, 8007ca2 <_strtod_l+0x93a>
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	421d      	tst	r5, r3
 8007c6c:	d0ee      	beq.n	8007c4c <_strtod_l+0x8e4>
 8007c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	9a05      	ldr	r2, [sp, #20]
 8007c76:	b1c3      	cbz	r3, 8007caa <_strtod_l+0x942>
 8007c78:	f7ff fb54 	bl	8007324 <sulp>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c84:	f7f8 fa72 	bl	800016c <__adddf3>
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4689      	mov	r9, r1
 8007c8c:	e7de      	b.n	8007c4c <_strtod_l+0x8e4>
 8007c8e:	4013      	ands	r3, r2
 8007c90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c94:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c98:	f04f 38ff 	mov.w	r8, #4294967295
 8007c9c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007ca0:	e7d4      	b.n	8007c4c <_strtod_l+0x8e4>
 8007ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca4:	ea13 0f08 	tst.w	r3, r8
 8007ca8:	e7e0      	b.n	8007c6c <_strtod_l+0x904>
 8007caa:	f7ff fb3b 	bl	8007324 <sulp>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cb6:	f7f8 fa57 	bl	8000168 <__aeabi_dsub>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	4689      	mov	r9, r1
 8007cc2:	f7f8 fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0c0      	beq.n	8007c4c <_strtod_l+0x8e4>
 8007cca:	e602      	b.n	80078d2 <_strtod_l+0x56a>
 8007ccc:	4658      	mov	r0, fp
 8007cce:	9904      	ldr	r1, [sp, #16]
 8007cd0:	f002 f82e 	bl	8009d30 <__ratio>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	f7f8 fe77 	bl	80009d0 <__aeabi_dcmple>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d075      	beq.n	8007dd2 <_strtod_l+0xa6a>
 8007ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d047      	beq.n	8007d7c <_strtod_l+0xa14>
 8007cec:	2600      	movs	r6, #0
 8007cee:	4f65      	ldr	r7, [pc, #404]	; (8007e84 <_strtod_l+0xb1c>)
 8007cf0:	4d64      	ldr	r5, [pc, #400]	; (8007e84 <_strtod_l+0xb1c>)
 8007cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cf8:	0d1b      	lsrs	r3, r3, #20
 8007cfa:	051b      	lsls	r3, r3, #20
 8007cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d00:	4b61      	ldr	r3, [pc, #388]	; (8007e88 <_strtod_l+0xb20>)
 8007d02:	429a      	cmp	r2, r3
 8007d04:	f040 80c8 	bne.w	8007e98 <_strtod_l+0xb30>
 8007d08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d0c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d12:	4640      	mov	r0, r8
 8007d14:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007d18:	4649      	mov	r1, r9
 8007d1a:	f001 ff33 	bl	8009b84 <__ulp>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 fbd7 	bl	80004d8 <__aeabi_dmul>
 8007d2a:	4642      	mov	r2, r8
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	f7f8 fa1d 	bl	800016c <__adddf3>
 8007d32:	460b      	mov	r3, r1
 8007d34:	4951      	ldr	r1, [pc, #324]	; (8007e7c <_strtod_l+0xb14>)
 8007d36:	4a55      	ldr	r2, [pc, #340]	; (8007e8c <_strtod_l+0xb24>)
 8007d38:	4019      	ands	r1, r3
 8007d3a:	4291      	cmp	r1, r2
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	d95e      	bls.n	8007dfe <_strtod_l+0xa96>
 8007d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d103      	bne.n	8007d52 <_strtod_l+0x9ea>
 8007d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	f43f ad4e 	beq.w	80077ee <_strtod_l+0x486>
 8007d52:	f04f 38ff 	mov.w	r8, #4294967295
 8007d56:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007e80 <_strtod_l+0xb18>
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d5e:	f001 fbe1 	bl	8009524 <_Bfree>
 8007d62:	4650      	mov	r0, sl
 8007d64:	9906      	ldr	r1, [sp, #24]
 8007d66:	f001 fbdd 	bl	8009524 <_Bfree>
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	9904      	ldr	r1, [sp, #16]
 8007d6e:	f001 fbd9 	bl	8009524 <_Bfree>
 8007d72:	4659      	mov	r1, fp
 8007d74:	4650      	mov	r0, sl
 8007d76:	f001 fbd5 	bl	8009524 <_Bfree>
 8007d7a:	e61c      	b.n	80079b6 <_strtod_l+0x64e>
 8007d7c:	f1b8 0f00 	cmp.w	r8, #0
 8007d80:	d119      	bne.n	8007db6 <_strtod_l+0xa4e>
 8007d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d88:	b9e3      	cbnz	r3, 8007dc4 <_strtod_l+0xa5c>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	4639      	mov	r1, r7
 8007d90:	4b3c      	ldr	r3, [pc, #240]	; (8007e84 <_strtod_l+0xb1c>)
 8007d92:	f7f8 fe13 	bl	80009bc <__aeabi_dcmplt>
 8007d96:	b9c8      	cbnz	r0, 8007dcc <_strtod_l+0xa64>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4b3c      	ldr	r3, [pc, #240]	; (8007e90 <_strtod_l+0xb28>)
 8007da0:	f7f8 fb9a 	bl	80004d8 <__aeabi_dmul>
 8007da4:	4604      	mov	r4, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007dac:	9418      	str	r4, [sp, #96]	; 0x60
 8007dae:	9319      	str	r3, [sp, #100]	; 0x64
 8007db0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007db4:	e79d      	b.n	8007cf2 <_strtod_l+0x98a>
 8007db6:	f1b8 0f01 	cmp.w	r8, #1
 8007dba:	d103      	bne.n	8007dc4 <_strtod_l+0xa5c>
 8007dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f43f ad87 	beq.w	80078d2 <_strtod_l+0x56a>
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	2400      	movs	r4, #0
 8007dc8:	4f32      	ldr	r7, [pc, #200]	; (8007e94 <_strtod_l+0xb2c>)
 8007dca:	e791      	b.n	8007cf0 <_strtod_l+0x988>
 8007dcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007dce:	4d30      	ldr	r5, [pc, #192]	; (8007e90 <_strtod_l+0xb28>)
 8007dd0:	e7ea      	b.n	8007da8 <_strtod_l+0xa40>
 8007dd2:	4b2f      	ldr	r3, [pc, #188]	; (8007e90 <_strtod_l+0xb28>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	4639      	mov	r1, r7
 8007dda:	f7f8 fb7d 	bl	80004d8 <__aeabi_dmul>
 8007dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	b933      	cbnz	r3, 8007df4 <_strtod_l+0xa8c>
 8007de6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dea:	9010      	str	r0, [sp, #64]	; 0x40
 8007dec:	9311      	str	r3, [sp, #68]	; 0x44
 8007dee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007df2:	e77e      	b.n	8007cf2 <_strtod_l+0x98a>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007dfc:	e7f7      	b.n	8007dee <_strtod_l+0xa86>
 8007dfe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007e02:	9b05      	ldr	r3, [sp, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1a8      	bne.n	8007d5a <_strtod_l+0x9f2>
 8007e08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e0e:	0d1b      	lsrs	r3, r3, #20
 8007e10:	051b      	lsls	r3, r3, #20
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d1a1      	bne.n	8007d5a <_strtod_l+0x9f2>
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f9 f953 	bl	80010c4 <__aeabi_d2lz>
 8007e1e:	f7f8 fb2d 	bl	800047c <__aeabi_l2d>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4620      	mov	r0, r4
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7f8 f99d 	bl	8000168 <__aeabi_dsub>
 8007e2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e34:	ea43 0308 	orr.w	r3, r3, r8
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	460d      	mov	r5, r1
 8007e3e:	d066      	beq.n	8007f0e <_strtod_l+0xba6>
 8007e40:	a309      	add	r3, pc, #36	; (adr r3, 8007e68 <_strtod_l+0xb00>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 fdb9 	bl	80009bc <__aeabi_dcmplt>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f47f acda 	bne.w	8007804 <_strtod_l+0x49c>
 8007e50:	a307      	add	r3, pc, #28	; (adr r3, 8007e70 <_strtod_l+0xb08>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fdcd 	bl	80009f8 <__aeabi_dcmpgt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f af7b 	beq.w	8007d5a <_strtod_l+0x9f2>
 8007e64:	e4ce      	b.n	8007804 <_strtod_l+0x49c>
 8007e66:	bf00      	nop
 8007e68:	94a03595 	.word	0x94a03595
 8007e6c:	3fdfffff 	.word	0x3fdfffff
 8007e70:	35afe535 	.word	0x35afe535
 8007e74:	3fe00000 	.word	0x3fe00000
 8007e78:	000fffff 	.word	0x000fffff
 8007e7c:	7ff00000 	.word	0x7ff00000
 8007e80:	7fefffff 	.word	0x7fefffff
 8007e84:	3ff00000 	.word	0x3ff00000
 8007e88:	7fe00000 	.word	0x7fe00000
 8007e8c:	7c9fffff 	.word	0x7c9fffff
 8007e90:	3fe00000 	.word	0x3fe00000
 8007e94:	bff00000 	.word	0xbff00000
 8007e98:	9b05      	ldr	r3, [sp, #20]
 8007e9a:	b313      	cbz	r3, 8007ee2 <_strtod_l+0xb7a>
 8007e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ea2:	d81e      	bhi.n	8007ee2 <_strtod_l+0xb7a>
 8007ea4:	a326      	add	r3, pc, #152	; (adr r3, 8007f40 <_strtod_l+0xbd8>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 fd8f 	bl	80009d0 <__aeabi_dcmple>
 8007eb2:	b190      	cbz	r0, 8007eda <_strtod_l+0xb72>
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7f8 fde6 	bl	8000a88 <__aeabi_d2uiz>
 8007ebc:	2801      	cmp	r0, #1
 8007ebe:	bf38      	it	cc
 8007ec0:	2001      	movcc	r0, #1
 8007ec2:	f7f8 fa8f 	bl	80003e4 <__aeabi_ui2d>
 8007ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec8:	4604      	mov	r4, r0
 8007eca:	460d      	mov	r5, r1
 8007ecc:	b9d3      	cbnz	r3, 8007f04 <_strtod_l+0xb9c>
 8007ece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ed2:	9012      	str	r0, [sp, #72]	; 0x48
 8007ed4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ed6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007eda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007edc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007ee0:	1a9f      	subs	r7, r3, r2
 8007ee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ee6:	f001 fe4d 	bl	8009b84 <__ulp>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 faf1 	bl	80004d8 <__aeabi_dmul>
 8007ef6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007efa:	f7f8 f937 	bl	800016c <__adddf3>
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	e77e      	b.n	8007e02 <_strtod_l+0xa9a>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007f0c:	e7e3      	b.n	8007ed6 <_strtod_l+0xb6e>
 8007f0e:	a30e      	add	r3, pc, #56	; (adr r3, 8007f48 <_strtod_l+0xbe0>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f7f8 fd52 	bl	80009bc <__aeabi_dcmplt>
 8007f18:	e7a1      	b.n	8007e5e <_strtod_l+0xaf6>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007f1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	f7ff ba65 	b.w	80073f2 <_strtod_l+0x8a>
 8007f28:	2b65      	cmp	r3, #101	; 0x65
 8007f2a:	f43f ab5c 	beq.w	80075e6 <_strtod_l+0x27e>
 8007f2e:	2b45      	cmp	r3, #69	; 0x45
 8007f30:	f43f ab59 	beq.w	80075e6 <_strtod_l+0x27e>
 8007f34:	2201      	movs	r2, #1
 8007f36:	f7ff bb8d 	b.w	8007654 <_strtod_l+0x2ec>
 8007f3a:	bf00      	nop
 8007f3c:	f3af 8000 	nop.w
 8007f40:	ffc00000 	.word	0xffc00000
 8007f44:	41dfffff 	.word	0x41dfffff
 8007f48:	94a03595 	.word	0x94a03595
 8007f4c:	3fcfffff 	.word	0x3fcfffff

08007f50 <_strtod_r>:
 8007f50:	4b01      	ldr	r3, [pc, #4]	; (8007f58 <_strtod_r+0x8>)
 8007f52:	f7ff ba09 	b.w	8007368 <_strtod_l>
 8007f56:	bf00      	nop
 8007f58:	20000078 	.word	0x20000078

08007f5c <_strtol_l.isra.0>:
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f62:	4686      	mov	lr, r0
 8007f64:	d001      	beq.n	8007f6a <_strtol_l.isra.0+0xe>
 8007f66:	2b24      	cmp	r3, #36	; 0x24
 8007f68:	d906      	bls.n	8007f78 <_strtol_l.isra.0+0x1c>
 8007f6a:	f7fe fb13 	bl	8006594 <__errno>
 8007f6e:	2316      	movs	r3, #22
 8007f70:	6003      	str	r3, [r0, #0]
 8007f72:	2000      	movs	r0, #0
 8007f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f78:	468c      	mov	ip, r1
 8007f7a:	4e3a      	ldr	r6, [pc, #232]	; (8008064 <_strtol_l.isra.0+0x108>)
 8007f7c:	4660      	mov	r0, ip
 8007f7e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007f82:	5da5      	ldrb	r5, [r4, r6]
 8007f84:	f015 0508 	ands.w	r5, r5, #8
 8007f88:	d1f8      	bne.n	8007f7c <_strtol_l.isra.0+0x20>
 8007f8a:	2c2d      	cmp	r4, #45	; 0x2d
 8007f8c:	d133      	bne.n	8007ff6 <_strtol_l.isra.0+0x9a>
 8007f8e:	f04f 0801 	mov.w	r8, #1
 8007f92:	f89c 4000 	ldrb.w	r4, [ip]
 8007f96:	f100 0c02 	add.w	ip, r0, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d05d      	beq.n	800805a <_strtol_l.isra.0+0xfe>
 8007f9e:	2b10      	cmp	r3, #16
 8007fa0:	d10c      	bne.n	8007fbc <_strtol_l.isra.0+0x60>
 8007fa2:	2c30      	cmp	r4, #48	; 0x30
 8007fa4:	d10a      	bne.n	8007fbc <_strtol_l.isra.0+0x60>
 8007fa6:	f89c 0000 	ldrb.w	r0, [ip]
 8007faa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007fae:	2858      	cmp	r0, #88	; 0x58
 8007fb0:	d14e      	bne.n	8008050 <_strtol_l.isra.0+0xf4>
 8007fb2:	2310      	movs	r3, #16
 8007fb4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007fb8:	f10c 0c02 	add.w	ip, ip, #2
 8007fbc:	2500      	movs	r5, #0
 8007fbe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007fc2:	3f01      	subs	r7, #1
 8007fc4:	fbb7 f9f3 	udiv	r9, r7, r3
 8007fc8:	4628      	mov	r0, r5
 8007fca:	fb03 7a19 	mls	sl, r3, r9, r7
 8007fce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007fd2:	2e09      	cmp	r6, #9
 8007fd4:	d818      	bhi.n	8008008 <_strtol_l.isra.0+0xac>
 8007fd6:	4634      	mov	r4, r6
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	dd24      	ble.n	8008026 <_strtol_l.isra.0+0xca>
 8007fdc:	2d00      	cmp	r5, #0
 8007fde:	db1f      	blt.n	8008020 <_strtol_l.isra.0+0xc4>
 8007fe0:	4581      	cmp	r9, r0
 8007fe2:	d31d      	bcc.n	8008020 <_strtol_l.isra.0+0xc4>
 8007fe4:	d101      	bne.n	8007fea <_strtol_l.isra.0+0x8e>
 8007fe6:	45a2      	cmp	sl, r4
 8007fe8:	db1a      	blt.n	8008020 <_strtol_l.isra.0+0xc4>
 8007fea:	2501      	movs	r5, #1
 8007fec:	fb00 4003 	mla	r0, r0, r3, r4
 8007ff0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007ff4:	e7eb      	b.n	8007fce <_strtol_l.isra.0+0x72>
 8007ff6:	2c2b      	cmp	r4, #43	; 0x2b
 8007ff8:	bf08      	it	eq
 8007ffa:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007ffe:	46a8      	mov	r8, r5
 8008000:	bf08      	it	eq
 8008002:	f100 0c02 	addeq.w	ip, r0, #2
 8008006:	e7c8      	b.n	8007f9a <_strtol_l.isra.0+0x3e>
 8008008:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800800c:	2e19      	cmp	r6, #25
 800800e:	d801      	bhi.n	8008014 <_strtol_l.isra.0+0xb8>
 8008010:	3c37      	subs	r4, #55	; 0x37
 8008012:	e7e1      	b.n	8007fd8 <_strtol_l.isra.0+0x7c>
 8008014:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008018:	2e19      	cmp	r6, #25
 800801a:	d804      	bhi.n	8008026 <_strtol_l.isra.0+0xca>
 800801c:	3c57      	subs	r4, #87	; 0x57
 800801e:	e7db      	b.n	8007fd8 <_strtol_l.isra.0+0x7c>
 8008020:	f04f 35ff 	mov.w	r5, #4294967295
 8008024:	e7e4      	b.n	8007ff0 <_strtol_l.isra.0+0x94>
 8008026:	2d00      	cmp	r5, #0
 8008028:	da08      	bge.n	800803c <_strtol_l.isra.0+0xe0>
 800802a:	2322      	movs	r3, #34	; 0x22
 800802c:	4638      	mov	r0, r7
 800802e:	f8ce 3000 	str.w	r3, [lr]
 8008032:	2a00      	cmp	r2, #0
 8008034:	d09e      	beq.n	8007f74 <_strtol_l.isra.0+0x18>
 8008036:	f10c 31ff 	add.w	r1, ip, #4294967295
 800803a:	e007      	b.n	800804c <_strtol_l.isra.0+0xf0>
 800803c:	f1b8 0f00 	cmp.w	r8, #0
 8008040:	d000      	beq.n	8008044 <_strtol_l.isra.0+0xe8>
 8008042:	4240      	negs	r0, r0
 8008044:	2a00      	cmp	r2, #0
 8008046:	d095      	beq.n	8007f74 <_strtol_l.isra.0+0x18>
 8008048:	2d00      	cmp	r5, #0
 800804a:	d1f4      	bne.n	8008036 <_strtol_l.isra.0+0xda>
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	e791      	b.n	8007f74 <_strtol_l.isra.0+0x18>
 8008050:	2430      	movs	r4, #48	; 0x30
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1b2      	bne.n	8007fbc <_strtol_l.isra.0+0x60>
 8008056:	2308      	movs	r3, #8
 8008058:	e7b0      	b.n	8007fbc <_strtol_l.isra.0+0x60>
 800805a:	2c30      	cmp	r4, #48	; 0x30
 800805c:	d0a3      	beq.n	8007fa6 <_strtol_l.isra.0+0x4a>
 800805e:	230a      	movs	r3, #10
 8008060:	e7ac      	b.n	8007fbc <_strtol_l.isra.0+0x60>
 8008062:	bf00      	nop
 8008064:	0800b0b9 	.word	0x0800b0b9

08008068 <_strtol_r>:
 8008068:	f7ff bf78 	b.w	8007f5c <_strtol_l.isra.0>

0800806c <quorem>:
 800806c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	6903      	ldr	r3, [r0, #16]
 8008072:	690c      	ldr	r4, [r1, #16]
 8008074:	4607      	mov	r7, r0
 8008076:	42a3      	cmp	r3, r4
 8008078:	f2c0 8083 	blt.w	8008182 <quorem+0x116>
 800807c:	3c01      	subs	r4, #1
 800807e:	f100 0514 	add.w	r5, r0, #20
 8008082:	f101 0814 	add.w	r8, r1, #20
 8008086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008094:	3301      	adds	r3, #1
 8008096:	429a      	cmp	r2, r3
 8008098:	fbb2 f6f3 	udiv	r6, r2, r3
 800809c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080a4:	d332      	bcc.n	800810c <quorem+0xa0>
 80080a6:	f04f 0e00 	mov.w	lr, #0
 80080aa:	4640      	mov	r0, r8
 80080ac:	46ac      	mov	ip, r5
 80080ae:	46f2      	mov	sl, lr
 80080b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80080b4:	b293      	uxth	r3, r2
 80080b6:	fb06 e303 	mla	r3, r6, r3, lr
 80080ba:	0c12      	lsrs	r2, r2, #16
 80080bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080c0:	fb06 e202 	mla	r2, r6, r2, lr
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	ebaa 0303 	sub.w	r3, sl, r3
 80080ca:	f8dc a000 	ldr.w	sl, [ip]
 80080ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080d2:	fa1f fa8a 	uxth.w	sl, sl
 80080d6:	4453      	add	r3, sl
 80080d8:	fa1f fa82 	uxth.w	sl, r2
 80080dc:	f8dc 2000 	ldr.w	r2, [ip]
 80080e0:	4581      	cmp	r9, r0
 80080e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80080e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080f4:	f84c 3b04 	str.w	r3, [ip], #4
 80080f8:	d2da      	bcs.n	80080b0 <quorem+0x44>
 80080fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80080fe:	b92b      	cbnz	r3, 800810c <quorem+0xa0>
 8008100:	9b01      	ldr	r3, [sp, #4]
 8008102:	3b04      	subs	r3, #4
 8008104:	429d      	cmp	r5, r3
 8008106:	461a      	mov	r2, r3
 8008108:	d32f      	bcc.n	800816a <quorem+0xfe>
 800810a:	613c      	str	r4, [r7, #16]
 800810c:	4638      	mov	r0, r7
 800810e:	f001 fc8d 	bl	8009a2c <__mcmp>
 8008112:	2800      	cmp	r0, #0
 8008114:	db25      	blt.n	8008162 <quorem+0xf6>
 8008116:	4628      	mov	r0, r5
 8008118:	f04f 0c00 	mov.w	ip, #0
 800811c:	3601      	adds	r6, #1
 800811e:	f858 1b04 	ldr.w	r1, [r8], #4
 8008122:	f8d0 e000 	ldr.w	lr, [r0]
 8008126:	b28b      	uxth	r3, r1
 8008128:	ebac 0303 	sub.w	r3, ip, r3
 800812c:	fa1f f28e 	uxth.w	r2, lr
 8008130:	4413      	add	r3, r2
 8008132:	0c0a      	lsrs	r2, r1, #16
 8008134:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800813c:	b29b      	uxth	r3, r3
 800813e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008142:	45c1      	cmp	r9, r8
 8008144:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008148:	f840 3b04 	str.w	r3, [r0], #4
 800814c:	d2e7      	bcs.n	800811e <quorem+0xb2>
 800814e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008156:	b922      	cbnz	r2, 8008162 <quorem+0xf6>
 8008158:	3b04      	subs	r3, #4
 800815a:	429d      	cmp	r5, r3
 800815c:	461a      	mov	r2, r3
 800815e:	d30a      	bcc.n	8008176 <quorem+0x10a>
 8008160:	613c      	str	r4, [r7, #16]
 8008162:	4630      	mov	r0, r6
 8008164:	b003      	add	sp, #12
 8008166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	3b04      	subs	r3, #4
 800816e:	2a00      	cmp	r2, #0
 8008170:	d1cb      	bne.n	800810a <quorem+0x9e>
 8008172:	3c01      	subs	r4, #1
 8008174:	e7c6      	b.n	8008104 <quorem+0x98>
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	3b04      	subs	r3, #4
 800817a:	2a00      	cmp	r2, #0
 800817c:	d1f0      	bne.n	8008160 <quorem+0xf4>
 800817e:	3c01      	subs	r4, #1
 8008180:	e7eb      	b.n	800815a <quorem+0xee>
 8008182:	2000      	movs	r0, #0
 8008184:	e7ee      	b.n	8008164 <quorem+0xf8>
	...

08008188 <_dtoa_r>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	4616      	mov	r6, r2
 800818e:	461f      	mov	r7, r3
 8008190:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008192:	b099      	sub	sp, #100	; 0x64
 8008194:	4605      	mov	r5, r0
 8008196:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800819a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800819e:	b974      	cbnz	r4, 80081be <_dtoa_r+0x36>
 80081a0:	2010      	movs	r0, #16
 80081a2:	f001 f949 	bl	8009438 <malloc>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6268      	str	r0, [r5, #36]	; 0x24
 80081aa:	b920      	cbnz	r0, 80081b6 <_dtoa_r+0x2e>
 80081ac:	21ea      	movs	r1, #234	; 0xea
 80081ae:	4bae      	ldr	r3, [pc, #696]	; (8008468 <_dtoa_r+0x2e0>)
 80081b0:	48ae      	ldr	r0, [pc, #696]	; (800846c <_dtoa_r+0x2e4>)
 80081b2:	f002 f875 	bl	800a2a0 <__assert_func>
 80081b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081ba:	6004      	str	r4, [r0, #0]
 80081bc:	60c4      	str	r4, [r0, #12]
 80081be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081c0:	6819      	ldr	r1, [r3, #0]
 80081c2:	b151      	cbz	r1, 80081da <_dtoa_r+0x52>
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	2301      	movs	r3, #1
 80081c8:	4093      	lsls	r3, r2
 80081ca:	604a      	str	r2, [r1, #4]
 80081cc:	608b      	str	r3, [r1, #8]
 80081ce:	4628      	mov	r0, r5
 80081d0:	f001 f9a8 	bl	8009524 <_Bfree>
 80081d4:	2200      	movs	r2, #0
 80081d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	1e3b      	subs	r3, r7, #0
 80081dc:	bfaf      	iteee	ge
 80081de:	2300      	movge	r3, #0
 80081e0:	2201      	movlt	r2, #1
 80081e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081e6:	9305      	strlt	r3, [sp, #20]
 80081e8:	bfa8      	it	ge
 80081ea:	f8c8 3000 	strge.w	r3, [r8]
 80081ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80081f2:	4b9f      	ldr	r3, [pc, #636]	; (8008470 <_dtoa_r+0x2e8>)
 80081f4:	bfb8      	it	lt
 80081f6:	f8c8 2000 	strlt.w	r2, [r8]
 80081fa:	ea33 0309 	bics.w	r3, r3, r9
 80081fe:	d119      	bne.n	8008234 <_dtoa_r+0xac>
 8008200:	f242 730f 	movw	r3, #9999	; 0x270f
 8008204:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800820c:	4333      	orrs	r3, r6
 800820e:	f000 8580 	beq.w	8008d12 <_dtoa_r+0xb8a>
 8008212:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008214:	b953      	cbnz	r3, 800822c <_dtoa_r+0xa4>
 8008216:	4b97      	ldr	r3, [pc, #604]	; (8008474 <_dtoa_r+0x2ec>)
 8008218:	e022      	b.n	8008260 <_dtoa_r+0xd8>
 800821a:	4b97      	ldr	r3, [pc, #604]	; (8008478 <_dtoa_r+0x2f0>)
 800821c:	9308      	str	r3, [sp, #32]
 800821e:	3308      	adds	r3, #8
 8008220:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	9808      	ldr	r0, [sp, #32]
 8008226:	b019      	add	sp, #100	; 0x64
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822c:	4b91      	ldr	r3, [pc, #580]	; (8008474 <_dtoa_r+0x2ec>)
 800822e:	9308      	str	r3, [sp, #32]
 8008230:	3303      	adds	r3, #3
 8008232:	e7f5      	b.n	8008220 <_dtoa_r+0x98>
 8008234:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008238:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800823c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008240:	2200      	movs	r2, #0
 8008242:	2300      	movs	r3, #0
 8008244:	f7f8 fbb0 	bl	80009a8 <__aeabi_dcmpeq>
 8008248:	4680      	mov	r8, r0
 800824a:	b158      	cbz	r0, 8008264 <_dtoa_r+0xdc>
 800824c:	2301      	movs	r3, #1
 800824e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8559 	beq.w	8008d0c <_dtoa_r+0xb84>
 800825a:	4888      	ldr	r0, [pc, #544]	; (800847c <_dtoa_r+0x2f4>)
 800825c:	6018      	str	r0, [r3, #0]
 800825e:	1e43      	subs	r3, r0, #1
 8008260:	9308      	str	r3, [sp, #32]
 8008262:	e7df      	b.n	8008224 <_dtoa_r+0x9c>
 8008264:	ab16      	add	r3, sp, #88	; 0x58
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	ab17      	add	r3, sp, #92	; 0x5c
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	4628      	mov	r0, r5
 800826e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008272:	f001 fd01 	bl	8009c78 <__d2b>
 8008276:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800827a:	4682      	mov	sl, r0
 800827c:	2c00      	cmp	r4, #0
 800827e:	d07e      	beq.n	800837e <_dtoa_r+0x1f6>
 8008280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008286:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800828a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800828e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008292:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008296:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800829a:	2200      	movs	r2, #0
 800829c:	4b78      	ldr	r3, [pc, #480]	; (8008480 <_dtoa_r+0x2f8>)
 800829e:	f7f7 ff63 	bl	8000168 <__aeabi_dsub>
 80082a2:	a36b      	add	r3, pc, #428	; (adr r3, 8008450 <_dtoa_r+0x2c8>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f916 	bl	80004d8 <__aeabi_dmul>
 80082ac:	a36a      	add	r3, pc, #424	; (adr r3, 8008458 <_dtoa_r+0x2d0>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 ff5b 	bl	800016c <__adddf3>
 80082b6:	4606      	mov	r6, r0
 80082b8:	4620      	mov	r0, r4
 80082ba:	460f      	mov	r7, r1
 80082bc:	f7f8 f8a2 	bl	8000404 <__aeabi_i2d>
 80082c0:	a367      	add	r3, pc, #412	; (adr r3, 8008460 <_dtoa_r+0x2d8>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f8 f907 	bl	80004d8 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4630      	mov	r0, r6
 80082d0:	4639      	mov	r1, r7
 80082d2:	f7f7 ff4b 	bl	800016c <__adddf3>
 80082d6:	4606      	mov	r6, r0
 80082d8:	460f      	mov	r7, r1
 80082da:	f7f8 fbad 	bl	8000a38 <__aeabi_d2iz>
 80082de:	2200      	movs	r2, #0
 80082e0:	4681      	mov	r9, r0
 80082e2:	2300      	movs	r3, #0
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f8 fb68 	bl	80009bc <__aeabi_dcmplt>
 80082ec:	b148      	cbz	r0, 8008302 <_dtoa_r+0x17a>
 80082ee:	4648      	mov	r0, r9
 80082f0:	f7f8 f888 	bl	8000404 <__aeabi_i2d>
 80082f4:	4632      	mov	r2, r6
 80082f6:	463b      	mov	r3, r7
 80082f8:	f7f8 fb56 	bl	80009a8 <__aeabi_dcmpeq>
 80082fc:	b908      	cbnz	r0, 8008302 <_dtoa_r+0x17a>
 80082fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8008302:	f1b9 0f16 	cmp.w	r9, #22
 8008306:	d857      	bhi.n	80083b8 <_dtoa_r+0x230>
 8008308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800830c:	4b5d      	ldr	r3, [pc, #372]	; (8008484 <_dtoa_r+0x2fc>)
 800830e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f8 fb51 	bl	80009bc <__aeabi_dcmplt>
 800831a:	2800      	cmp	r0, #0
 800831c:	d04e      	beq.n	80083bc <_dtoa_r+0x234>
 800831e:	2300      	movs	r3, #0
 8008320:	f109 39ff 	add.w	r9, r9, #4294967295
 8008324:	930f      	str	r3, [sp, #60]	; 0x3c
 8008326:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008328:	1b1c      	subs	r4, r3, r4
 800832a:	1e63      	subs	r3, r4, #1
 800832c:	9309      	str	r3, [sp, #36]	; 0x24
 800832e:	bf49      	itett	mi
 8008330:	f1c4 0301 	rsbmi	r3, r4, #1
 8008334:	2300      	movpl	r3, #0
 8008336:	9306      	strmi	r3, [sp, #24]
 8008338:	2300      	movmi	r3, #0
 800833a:	bf54      	ite	pl
 800833c:	9306      	strpl	r3, [sp, #24]
 800833e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	db3c      	blt.n	80083c0 <_dtoa_r+0x238>
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800834c:	444b      	add	r3, r9
 800834e:	9309      	str	r3, [sp, #36]	; 0x24
 8008350:	2300      	movs	r3, #0
 8008352:	930a      	str	r3, [sp, #40]	; 0x28
 8008354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008356:	2b09      	cmp	r3, #9
 8008358:	d86c      	bhi.n	8008434 <_dtoa_r+0x2ac>
 800835a:	2b05      	cmp	r3, #5
 800835c:	bfc4      	itt	gt
 800835e:	3b04      	subgt	r3, #4
 8008360:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008362:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008364:	bfc8      	it	gt
 8008366:	2400      	movgt	r4, #0
 8008368:	f1a3 0302 	sub.w	r3, r3, #2
 800836c:	bfd8      	it	le
 800836e:	2401      	movle	r4, #1
 8008370:	2b03      	cmp	r3, #3
 8008372:	f200 808b 	bhi.w	800848c <_dtoa_r+0x304>
 8008376:	e8df f003 	tbb	[pc, r3]
 800837a:	4f2d      	.short	0x4f2d
 800837c:	5b4d      	.short	0x5b4d
 800837e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008382:	441c      	add	r4, r3
 8008384:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008388:	2b20      	cmp	r3, #32
 800838a:	bfc3      	ittte	gt
 800838c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008390:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008394:	fa09 f303 	lslgt.w	r3, r9, r3
 8008398:	f1c3 0320 	rsble	r3, r3, #32
 800839c:	bfc6      	itte	gt
 800839e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083a2:	4318      	orrgt	r0, r3
 80083a4:	fa06 f003 	lslle.w	r0, r6, r3
 80083a8:	f7f8 f81c 	bl	80003e4 <__aeabi_ui2d>
 80083ac:	2301      	movs	r3, #1
 80083ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80083b2:	3c01      	subs	r4, #1
 80083b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80083b6:	e770      	b.n	800829a <_dtoa_r+0x112>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7b3      	b.n	8008324 <_dtoa_r+0x19c>
 80083bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80083be:	e7b2      	b.n	8008326 <_dtoa_r+0x19e>
 80083c0:	9b06      	ldr	r3, [sp, #24]
 80083c2:	eba3 0309 	sub.w	r3, r3, r9
 80083c6:	9306      	str	r3, [sp, #24]
 80083c8:	f1c9 0300 	rsb	r3, r9, #0
 80083cc:	930a      	str	r3, [sp, #40]	; 0x28
 80083ce:	2300      	movs	r3, #0
 80083d0:	930e      	str	r3, [sp, #56]	; 0x38
 80083d2:	e7bf      	b.n	8008354 <_dtoa_r+0x1cc>
 80083d4:	2300      	movs	r3, #0
 80083d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dc59      	bgt.n	8008492 <_dtoa_r+0x30a>
 80083de:	f04f 0b01 	mov.w	fp, #1
 80083e2:	465b      	mov	r3, fp
 80083e4:	f8cd b008 	str.w	fp, [sp, #8]
 80083e8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80083ec:	2200      	movs	r2, #0
 80083ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80083f0:	6042      	str	r2, [r0, #4]
 80083f2:	2204      	movs	r2, #4
 80083f4:	f102 0614 	add.w	r6, r2, #20
 80083f8:	429e      	cmp	r6, r3
 80083fa:	6841      	ldr	r1, [r0, #4]
 80083fc:	d94f      	bls.n	800849e <_dtoa_r+0x316>
 80083fe:	4628      	mov	r0, r5
 8008400:	f001 f850 	bl	80094a4 <_Balloc>
 8008404:	9008      	str	r0, [sp, #32]
 8008406:	2800      	cmp	r0, #0
 8008408:	d14d      	bne.n	80084a6 <_dtoa_r+0x31e>
 800840a:	4602      	mov	r2, r0
 800840c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008410:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <_dtoa_r+0x300>)
 8008412:	e6cd      	b.n	80081b0 <_dtoa_r+0x28>
 8008414:	2301      	movs	r3, #1
 8008416:	e7de      	b.n	80083d6 <_dtoa_r+0x24e>
 8008418:	2300      	movs	r3, #0
 800841a:	930b      	str	r3, [sp, #44]	; 0x2c
 800841c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800841e:	eb09 0b03 	add.w	fp, r9, r3
 8008422:	f10b 0301 	add.w	r3, fp, #1
 8008426:	2b01      	cmp	r3, #1
 8008428:	9302      	str	r3, [sp, #8]
 800842a:	bfb8      	it	lt
 800842c:	2301      	movlt	r3, #1
 800842e:	e7dd      	b.n	80083ec <_dtoa_r+0x264>
 8008430:	2301      	movs	r3, #1
 8008432:	e7f2      	b.n	800841a <_dtoa_r+0x292>
 8008434:	2401      	movs	r4, #1
 8008436:	2300      	movs	r3, #0
 8008438:	940b      	str	r4, [sp, #44]	; 0x2c
 800843a:	9322      	str	r3, [sp, #136]	; 0x88
 800843c:	f04f 3bff 	mov.w	fp, #4294967295
 8008440:	2200      	movs	r2, #0
 8008442:	2312      	movs	r3, #18
 8008444:	f8cd b008 	str.w	fp, [sp, #8]
 8008448:	9223      	str	r2, [sp, #140]	; 0x8c
 800844a:	e7cf      	b.n	80083ec <_dtoa_r+0x264>
 800844c:	f3af 8000 	nop.w
 8008450:	636f4361 	.word	0x636f4361
 8008454:	3fd287a7 	.word	0x3fd287a7
 8008458:	8b60c8b3 	.word	0x8b60c8b3
 800845c:	3fc68a28 	.word	0x3fc68a28
 8008460:	509f79fb 	.word	0x509f79fb
 8008464:	3fd34413 	.word	0x3fd34413
 8008468:	0800b1c6 	.word	0x0800b1c6
 800846c:	0800b1dd 	.word	0x0800b1dd
 8008470:	7ff00000 	.word	0x7ff00000
 8008474:	0800b1c2 	.word	0x0800b1c2
 8008478:	0800b1b9 	.word	0x0800b1b9
 800847c:	0800b03d 	.word	0x0800b03d
 8008480:	3ff80000 	.word	0x3ff80000
 8008484:	0800b358 	.word	0x0800b358
 8008488:	0800b23c 	.word	0x0800b23c
 800848c:	2301      	movs	r3, #1
 800848e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008490:	e7d4      	b.n	800843c <_dtoa_r+0x2b4>
 8008492:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008496:	465b      	mov	r3, fp
 8008498:	f8cd b008 	str.w	fp, [sp, #8]
 800849c:	e7a6      	b.n	80083ec <_dtoa_r+0x264>
 800849e:	3101      	adds	r1, #1
 80084a0:	6041      	str	r1, [r0, #4]
 80084a2:	0052      	lsls	r2, r2, #1
 80084a4:	e7a6      	b.n	80083f4 <_dtoa_r+0x26c>
 80084a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084a8:	9a08      	ldr	r2, [sp, #32]
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	9b02      	ldr	r3, [sp, #8]
 80084ae:	2b0e      	cmp	r3, #14
 80084b0:	f200 80a8 	bhi.w	8008604 <_dtoa_r+0x47c>
 80084b4:	2c00      	cmp	r4, #0
 80084b6:	f000 80a5 	beq.w	8008604 <_dtoa_r+0x47c>
 80084ba:	f1b9 0f00 	cmp.w	r9, #0
 80084be:	dd34      	ble.n	800852a <_dtoa_r+0x3a2>
 80084c0:	4a9a      	ldr	r2, [pc, #616]	; (800872c <_dtoa_r+0x5a4>)
 80084c2:	f009 030f 	and.w	r3, r9, #15
 80084c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084ca:	f419 7f80 	tst.w	r9, #256	; 0x100
 80084ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80084d6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80084da:	d016      	beq.n	800850a <_dtoa_r+0x382>
 80084dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084e0:	4b93      	ldr	r3, [pc, #588]	; (8008730 <_dtoa_r+0x5a8>)
 80084e2:	2703      	movs	r7, #3
 80084e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084e8:	f7f8 f920 	bl	800072c <__aeabi_ddiv>
 80084ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084f0:	f004 040f 	and.w	r4, r4, #15
 80084f4:	4e8e      	ldr	r6, [pc, #568]	; (8008730 <_dtoa_r+0x5a8>)
 80084f6:	b954      	cbnz	r4, 800850e <_dtoa_r+0x386>
 80084f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008500:	f7f8 f914 	bl	800072c <__aeabi_ddiv>
 8008504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008508:	e029      	b.n	800855e <_dtoa_r+0x3d6>
 800850a:	2702      	movs	r7, #2
 800850c:	e7f2      	b.n	80084f4 <_dtoa_r+0x36c>
 800850e:	07e1      	lsls	r1, r4, #31
 8008510:	d508      	bpl.n	8008524 <_dtoa_r+0x39c>
 8008512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008516:	e9d6 2300 	ldrd	r2, r3, [r6]
 800851a:	f7f7 ffdd 	bl	80004d8 <__aeabi_dmul>
 800851e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008522:	3701      	adds	r7, #1
 8008524:	1064      	asrs	r4, r4, #1
 8008526:	3608      	adds	r6, #8
 8008528:	e7e5      	b.n	80084f6 <_dtoa_r+0x36e>
 800852a:	f000 80a5 	beq.w	8008678 <_dtoa_r+0x4f0>
 800852e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008532:	f1c9 0400 	rsb	r4, r9, #0
 8008536:	4b7d      	ldr	r3, [pc, #500]	; (800872c <_dtoa_r+0x5a4>)
 8008538:	f004 020f 	and.w	r2, r4, #15
 800853c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f7f7 ffc8 	bl	80004d8 <__aeabi_dmul>
 8008548:	2702      	movs	r7, #2
 800854a:	2300      	movs	r3, #0
 800854c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008550:	4e77      	ldr	r6, [pc, #476]	; (8008730 <_dtoa_r+0x5a8>)
 8008552:	1124      	asrs	r4, r4, #4
 8008554:	2c00      	cmp	r4, #0
 8008556:	f040 8084 	bne.w	8008662 <_dtoa_r+0x4da>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1d2      	bne.n	8008504 <_dtoa_r+0x37c>
 800855e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 808b 	beq.w	800867c <_dtoa_r+0x4f4>
 8008566:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800856a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800856e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008572:	2200      	movs	r2, #0
 8008574:	4b6f      	ldr	r3, [pc, #444]	; (8008734 <_dtoa_r+0x5ac>)
 8008576:	f7f8 fa21 	bl	80009bc <__aeabi_dcmplt>
 800857a:	2800      	cmp	r0, #0
 800857c:	d07e      	beq.n	800867c <_dtoa_r+0x4f4>
 800857e:	9b02      	ldr	r3, [sp, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d07b      	beq.n	800867c <_dtoa_r+0x4f4>
 8008584:	f1bb 0f00 	cmp.w	fp, #0
 8008588:	dd38      	ble.n	80085fc <_dtoa_r+0x474>
 800858a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800858e:	2200      	movs	r2, #0
 8008590:	4b69      	ldr	r3, [pc, #420]	; (8008738 <_dtoa_r+0x5b0>)
 8008592:	f7f7 ffa1 	bl	80004d8 <__aeabi_dmul>
 8008596:	465c      	mov	r4, fp
 8008598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800859c:	f109 38ff 	add.w	r8, r9, #4294967295
 80085a0:	3701      	adds	r7, #1
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7f7 ff2e 	bl	8000404 <__aeabi_i2d>
 80085a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ac:	f7f7 ff94 	bl	80004d8 <__aeabi_dmul>
 80085b0:	2200      	movs	r2, #0
 80085b2:	4b62      	ldr	r3, [pc, #392]	; (800873c <_dtoa_r+0x5b4>)
 80085b4:	f7f7 fdda 	bl	800016c <__adddf3>
 80085b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80085bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085c0:	9611      	str	r6, [sp, #68]	; 0x44
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	d15d      	bne.n	8008682 <_dtoa_r+0x4fa>
 80085c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ca:	2200      	movs	r2, #0
 80085cc:	4b5c      	ldr	r3, [pc, #368]	; (8008740 <_dtoa_r+0x5b8>)
 80085ce:	f7f7 fdcb 	bl	8000168 <__aeabi_dsub>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085da:	4633      	mov	r3, r6
 80085dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085de:	f7f8 fa0b 	bl	80009f8 <__aeabi_dcmpgt>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f040 829e 	bne.w	8008b24 <_dtoa_r+0x99c>
 80085e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80085f2:	f7f8 f9e3 	bl	80009bc <__aeabi_dcmplt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f040 8292 	bne.w	8008b20 <_dtoa_r+0x998>
 80085fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008600:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008606:	2b00      	cmp	r3, #0
 8008608:	f2c0 8153 	blt.w	80088b2 <_dtoa_r+0x72a>
 800860c:	f1b9 0f0e 	cmp.w	r9, #14
 8008610:	f300 814f 	bgt.w	80088b2 <_dtoa_r+0x72a>
 8008614:	4b45      	ldr	r3, [pc, #276]	; (800872c <_dtoa_r+0x5a4>)
 8008616:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800861a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800861e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008622:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008624:	2b00      	cmp	r3, #0
 8008626:	f280 80db 	bge.w	80087e0 <_dtoa_r+0x658>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f300 80d7 	bgt.w	80087e0 <_dtoa_r+0x658>
 8008632:	f040 8274 	bne.w	8008b1e <_dtoa_r+0x996>
 8008636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800863a:	2200      	movs	r2, #0
 800863c:	4b40      	ldr	r3, [pc, #256]	; (8008740 <_dtoa_r+0x5b8>)
 800863e:	f7f7 ff4b 	bl	80004d8 <__aeabi_dmul>
 8008642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008646:	f7f8 f9cd 	bl	80009e4 <__aeabi_dcmpge>
 800864a:	9c02      	ldr	r4, [sp, #8]
 800864c:	4626      	mov	r6, r4
 800864e:	2800      	cmp	r0, #0
 8008650:	f040 824a 	bne.w	8008ae8 <_dtoa_r+0x960>
 8008654:	2331      	movs	r3, #49	; 0x31
 8008656:	9f08      	ldr	r7, [sp, #32]
 8008658:	f109 0901 	add.w	r9, r9, #1
 800865c:	f807 3b01 	strb.w	r3, [r7], #1
 8008660:	e246      	b.n	8008af0 <_dtoa_r+0x968>
 8008662:	07e2      	lsls	r2, r4, #31
 8008664:	d505      	bpl.n	8008672 <_dtoa_r+0x4ea>
 8008666:	e9d6 2300 	ldrd	r2, r3, [r6]
 800866a:	f7f7 ff35 	bl	80004d8 <__aeabi_dmul>
 800866e:	2301      	movs	r3, #1
 8008670:	3701      	adds	r7, #1
 8008672:	1064      	asrs	r4, r4, #1
 8008674:	3608      	adds	r6, #8
 8008676:	e76d      	b.n	8008554 <_dtoa_r+0x3cc>
 8008678:	2702      	movs	r7, #2
 800867a:	e770      	b.n	800855e <_dtoa_r+0x3d6>
 800867c:	46c8      	mov	r8, r9
 800867e:	9c02      	ldr	r4, [sp, #8]
 8008680:	e78f      	b.n	80085a2 <_dtoa_r+0x41a>
 8008682:	9908      	ldr	r1, [sp, #32]
 8008684:	4b29      	ldr	r3, [pc, #164]	; (800872c <_dtoa_r+0x5a4>)
 8008686:	4421      	add	r1, r4
 8008688:	9112      	str	r1, [sp, #72]	; 0x48
 800868a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800868c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008690:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008694:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008698:	2900      	cmp	r1, #0
 800869a:	d055      	beq.n	8008748 <_dtoa_r+0x5c0>
 800869c:	2000      	movs	r0, #0
 800869e:	4929      	ldr	r1, [pc, #164]	; (8008744 <_dtoa_r+0x5bc>)
 80086a0:	f7f8 f844 	bl	800072c <__aeabi_ddiv>
 80086a4:	463b      	mov	r3, r7
 80086a6:	4632      	mov	r2, r6
 80086a8:	f7f7 fd5e 	bl	8000168 <__aeabi_dsub>
 80086ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086b0:	9f08      	ldr	r7, [sp, #32]
 80086b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086b6:	f7f8 f9bf 	bl	8000a38 <__aeabi_d2iz>
 80086ba:	4604      	mov	r4, r0
 80086bc:	f7f7 fea2 	bl	8000404 <__aeabi_i2d>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086c8:	f7f7 fd4e 	bl	8000168 <__aeabi_dsub>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	3430      	adds	r4, #48	; 0x30
 80086d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086da:	f807 4b01 	strb.w	r4, [r7], #1
 80086de:	f7f8 f96d 	bl	80009bc <__aeabi_dcmplt>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d174      	bne.n	80087d0 <_dtoa_r+0x648>
 80086e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ea:	2000      	movs	r0, #0
 80086ec:	4911      	ldr	r1, [pc, #68]	; (8008734 <_dtoa_r+0x5ac>)
 80086ee:	f7f7 fd3b 	bl	8000168 <__aeabi_dsub>
 80086f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086f6:	f7f8 f961 	bl	80009bc <__aeabi_dcmplt>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f040 80b6 	bne.w	800886c <_dtoa_r+0x6e4>
 8008700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008702:	429f      	cmp	r7, r3
 8008704:	f43f af7a 	beq.w	80085fc <_dtoa_r+0x474>
 8008708:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800870c:	2200      	movs	r2, #0
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <_dtoa_r+0x5b0>)
 8008710:	f7f7 fee2 	bl	80004d8 <__aeabi_dmul>
 8008714:	2200      	movs	r2, #0
 8008716:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800871a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800871e:	4b06      	ldr	r3, [pc, #24]	; (8008738 <_dtoa_r+0x5b0>)
 8008720:	f7f7 feda 	bl	80004d8 <__aeabi_dmul>
 8008724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008728:	e7c3      	b.n	80086b2 <_dtoa_r+0x52a>
 800872a:	bf00      	nop
 800872c:	0800b358 	.word	0x0800b358
 8008730:	0800b330 	.word	0x0800b330
 8008734:	3ff00000 	.word	0x3ff00000
 8008738:	40240000 	.word	0x40240000
 800873c:	401c0000 	.word	0x401c0000
 8008740:	40140000 	.word	0x40140000
 8008744:	3fe00000 	.word	0x3fe00000
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fec4 	bl	80004d8 <__aeabi_dmul>
 8008750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008752:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008756:	9c08      	ldr	r4, [sp, #32]
 8008758:	9314      	str	r3, [sp, #80]	; 0x50
 800875a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800875e:	f7f8 f96b 	bl	8000a38 <__aeabi_d2iz>
 8008762:	9015      	str	r0, [sp, #84]	; 0x54
 8008764:	f7f7 fe4e 	bl	8000404 <__aeabi_i2d>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008770:	f7f7 fcfa 	bl	8000168 <__aeabi_dsub>
 8008774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008776:	4606      	mov	r6, r0
 8008778:	3330      	adds	r3, #48	; 0x30
 800877a:	f804 3b01 	strb.w	r3, [r4], #1
 800877e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008780:	460f      	mov	r7, r1
 8008782:	429c      	cmp	r4, r3
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	d124      	bne.n	80087d4 <_dtoa_r+0x64c>
 800878a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800878e:	4bb3      	ldr	r3, [pc, #716]	; (8008a5c <_dtoa_r+0x8d4>)
 8008790:	f7f7 fcec 	bl	800016c <__adddf3>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f92c 	bl	80009f8 <__aeabi_dcmpgt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d162      	bne.n	800886a <_dtoa_r+0x6e2>
 80087a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087a8:	2000      	movs	r0, #0
 80087aa:	49ac      	ldr	r1, [pc, #688]	; (8008a5c <_dtoa_r+0x8d4>)
 80087ac:	f7f7 fcdc 	bl	8000168 <__aeabi_dsub>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f8 f900 	bl	80009bc <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	f43f af1d 	beq.w	80085fc <_dtoa_r+0x474>
 80087c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80087c4:	1e7b      	subs	r3, r7, #1
 80087c6:	9314      	str	r3, [sp, #80]	; 0x50
 80087c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80087cc:	2b30      	cmp	r3, #48	; 0x30
 80087ce:	d0f8      	beq.n	80087c2 <_dtoa_r+0x63a>
 80087d0:	46c1      	mov	r9, r8
 80087d2:	e03a      	b.n	800884a <_dtoa_r+0x6c2>
 80087d4:	4ba2      	ldr	r3, [pc, #648]	; (8008a60 <_dtoa_r+0x8d8>)
 80087d6:	f7f7 fe7f 	bl	80004d8 <__aeabi_dmul>
 80087da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087de:	e7bc      	b.n	800875a <_dtoa_r+0x5d2>
 80087e0:	9f08      	ldr	r7, [sp, #32]
 80087e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ea:	f7f7 ff9f 	bl	800072c <__aeabi_ddiv>
 80087ee:	f7f8 f923 	bl	8000a38 <__aeabi_d2iz>
 80087f2:	4604      	mov	r4, r0
 80087f4:	f7f7 fe06 	bl	8000404 <__aeabi_i2d>
 80087f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087fc:	f7f7 fe6c 	bl	80004d8 <__aeabi_dmul>
 8008800:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008804:	460b      	mov	r3, r1
 8008806:	4602      	mov	r2, r0
 8008808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800880c:	f7f7 fcac 	bl	8000168 <__aeabi_dsub>
 8008810:	f807 6b01 	strb.w	r6, [r7], #1
 8008814:	9e08      	ldr	r6, [sp, #32]
 8008816:	9b02      	ldr	r3, [sp, #8]
 8008818:	1bbe      	subs	r6, r7, r6
 800881a:	42b3      	cmp	r3, r6
 800881c:	d13a      	bne.n	8008894 <_dtoa_r+0x70c>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	f7f7 fca3 	bl	800016c <__adddf3>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800882e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008832:	f7f8 f8e1 	bl	80009f8 <__aeabi_dcmpgt>
 8008836:	bb58      	cbnz	r0, 8008890 <_dtoa_r+0x708>
 8008838:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800883c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008840:	f7f8 f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 8008844:	b108      	cbz	r0, 800884a <_dtoa_r+0x6c2>
 8008846:	07e1      	lsls	r1, r4, #31
 8008848:	d422      	bmi.n	8008890 <_dtoa_r+0x708>
 800884a:	4628      	mov	r0, r5
 800884c:	4651      	mov	r1, sl
 800884e:	f000 fe69 	bl	8009524 <_Bfree>
 8008852:	2300      	movs	r3, #0
 8008854:	703b      	strb	r3, [r7, #0]
 8008856:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008858:	f109 0001 	add.w	r0, r9, #1
 800885c:	6018      	str	r0, [r3, #0]
 800885e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008860:	2b00      	cmp	r3, #0
 8008862:	f43f acdf 	beq.w	8008224 <_dtoa_r+0x9c>
 8008866:	601f      	str	r7, [r3, #0]
 8008868:	e4dc      	b.n	8008224 <_dtoa_r+0x9c>
 800886a:	4627      	mov	r7, r4
 800886c:	463b      	mov	r3, r7
 800886e:	461f      	mov	r7, r3
 8008870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008874:	2a39      	cmp	r2, #57	; 0x39
 8008876:	d107      	bne.n	8008888 <_dtoa_r+0x700>
 8008878:	9a08      	ldr	r2, [sp, #32]
 800887a:	429a      	cmp	r2, r3
 800887c:	d1f7      	bne.n	800886e <_dtoa_r+0x6e6>
 800887e:	2230      	movs	r2, #48	; 0x30
 8008880:	9908      	ldr	r1, [sp, #32]
 8008882:	f108 0801 	add.w	r8, r8, #1
 8008886:	700a      	strb	r2, [r1, #0]
 8008888:	781a      	ldrb	r2, [r3, #0]
 800888a:	3201      	adds	r2, #1
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	e79f      	b.n	80087d0 <_dtoa_r+0x648>
 8008890:	46c8      	mov	r8, r9
 8008892:	e7eb      	b.n	800886c <_dtoa_r+0x6e4>
 8008894:	2200      	movs	r2, #0
 8008896:	4b72      	ldr	r3, [pc, #456]	; (8008a60 <_dtoa_r+0x8d8>)
 8008898:	f7f7 fe1e 	bl	80004d8 <__aeabi_dmul>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088a4:	2200      	movs	r2, #0
 80088a6:	2300      	movs	r3, #0
 80088a8:	f7f8 f87e 	bl	80009a8 <__aeabi_dcmpeq>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d098      	beq.n	80087e2 <_dtoa_r+0x65a>
 80088b0:	e7cb      	b.n	800884a <_dtoa_r+0x6c2>
 80088b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088b4:	2a00      	cmp	r2, #0
 80088b6:	f000 80cd 	beq.w	8008a54 <_dtoa_r+0x8cc>
 80088ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088bc:	2a01      	cmp	r2, #1
 80088be:	f300 80af 	bgt.w	8008a20 <_dtoa_r+0x898>
 80088c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	f000 80a7 	beq.w	8008a18 <_dtoa_r+0x890>
 80088ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088d0:	9f06      	ldr	r7, [sp, #24]
 80088d2:	9a06      	ldr	r2, [sp, #24]
 80088d4:	2101      	movs	r1, #1
 80088d6:	441a      	add	r2, r3
 80088d8:	9206      	str	r2, [sp, #24]
 80088da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088dc:	4628      	mov	r0, r5
 80088de:	441a      	add	r2, r3
 80088e0:	9209      	str	r2, [sp, #36]	; 0x24
 80088e2:	f000 ff23 	bl	800972c <__i2b>
 80088e6:	4606      	mov	r6, r0
 80088e8:	2f00      	cmp	r7, #0
 80088ea:	dd0c      	ble.n	8008906 <_dtoa_r+0x77e>
 80088ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dd09      	ble.n	8008906 <_dtoa_r+0x77e>
 80088f2:	42bb      	cmp	r3, r7
 80088f4:	bfa8      	it	ge
 80088f6:	463b      	movge	r3, r7
 80088f8:	9a06      	ldr	r2, [sp, #24]
 80088fa:	1aff      	subs	r7, r7, r3
 80088fc:	1ad2      	subs	r2, r2, r3
 80088fe:	9206      	str	r2, [sp, #24]
 8008900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	9309      	str	r3, [sp, #36]	; 0x24
 8008906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008908:	b1f3      	cbz	r3, 8008948 <_dtoa_r+0x7c0>
 800890a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80a9 	beq.w	8008a64 <_dtoa_r+0x8dc>
 8008912:	2c00      	cmp	r4, #0
 8008914:	dd10      	ble.n	8008938 <_dtoa_r+0x7b0>
 8008916:	4631      	mov	r1, r6
 8008918:	4622      	mov	r2, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 ffc0 	bl	80098a0 <__pow5mult>
 8008920:	4652      	mov	r2, sl
 8008922:	4601      	mov	r1, r0
 8008924:	4606      	mov	r6, r0
 8008926:	4628      	mov	r0, r5
 8008928:	f000 ff16 	bl	8009758 <__multiply>
 800892c:	4680      	mov	r8, r0
 800892e:	4651      	mov	r1, sl
 8008930:	4628      	mov	r0, r5
 8008932:	f000 fdf7 	bl	8009524 <_Bfree>
 8008936:	46c2      	mov	sl, r8
 8008938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893a:	1b1a      	subs	r2, r3, r4
 800893c:	d004      	beq.n	8008948 <_dtoa_r+0x7c0>
 800893e:	4651      	mov	r1, sl
 8008940:	4628      	mov	r0, r5
 8008942:	f000 ffad 	bl	80098a0 <__pow5mult>
 8008946:	4682      	mov	sl, r0
 8008948:	2101      	movs	r1, #1
 800894a:	4628      	mov	r0, r5
 800894c:	f000 feee 	bl	800972c <__i2b>
 8008950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008952:	4604      	mov	r4, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	f340 8087 	ble.w	8008a68 <_dtoa_r+0x8e0>
 800895a:	461a      	mov	r2, r3
 800895c:	4601      	mov	r1, r0
 800895e:	4628      	mov	r0, r5
 8008960:	f000 ff9e 	bl	80098a0 <__pow5mult>
 8008964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008966:	4604      	mov	r4, r0
 8008968:	2b01      	cmp	r3, #1
 800896a:	f340 8080 	ble.w	8008a6e <_dtoa_r+0x8e6>
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008978:	6918      	ldr	r0, [r3, #16]
 800897a:	f000 fe89 	bl	8009690 <__hi0bits>
 800897e:	f1c0 0020 	rsb	r0, r0, #32
 8008982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008984:	4418      	add	r0, r3
 8008986:	f010 001f 	ands.w	r0, r0, #31
 800898a:	f000 8092 	beq.w	8008ab2 <_dtoa_r+0x92a>
 800898e:	f1c0 0320 	rsb	r3, r0, #32
 8008992:	2b04      	cmp	r3, #4
 8008994:	f340 808a 	ble.w	8008aac <_dtoa_r+0x924>
 8008998:	f1c0 001c 	rsb	r0, r0, #28
 800899c:	9b06      	ldr	r3, [sp, #24]
 800899e:	4407      	add	r7, r0
 80089a0:	4403      	add	r3, r0
 80089a2:	9306      	str	r3, [sp, #24]
 80089a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a6:	4403      	add	r3, r0
 80089a8:	9309      	str	r3, [sp, #36]	; 0x24
 80089aa:	9b06      	ldr	r3, [sp, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dd05      	ble.n	80089bc <_dtoa_r+0x834>
 80089b0:	4651      	mov	r1, sl
 80089b2:	461a      	mov	r2, r3
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 ffcd 	bl	8009954 <__lshift>
 80089ba:	4682      	mov	sl, r0
 80089bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	dd05      	ble.n	80089ce <_dtoa_r+0x846>
 80089c2:	4621      	mov	r1, r4
 80089c4:	461a      	mov	r2, r3
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 ffc4 	bl	8009954 <__lshift>
 80089cc:	4604      	mov	r4, r0
 80089ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d070      	beq.n	8008ab6 <_dtoa_r+0x92e>
 80089d4:	4621      	mov	r1, r4
 80089d6:	4650      	mov	r0, sl
 80089d8:	f001 f828 	bl	8009a2c <__mcmp>
 80089dc:	2800      	cmp	r0, #0
 80089de:	da6a      	bge.n	8008ab6 <_dtoa_r+0x92e>
 80089e0:	2300      	movs	r3, #0
 80089e2:	4651      	mov	r1, sl
 80089e4:	220a      	movs	r2, #10
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 fdbe 	bl	8009568 <__multadd>
 80089ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ee:	4682      	mov	sl, r0
 80089f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8193 	beq.w	8008d20 <_dtoa_r+0xb98>
 80089fa:	4631      	mov	r1, r6
 80089fc:	2300      	movs	r3, #0
 80089fe:	220a      	movs	r2, #10
 8008a00:	4628      	mov	r0, r5
 8008a02:	f000 fdb1 	bl	8009568 <__multadd>
 8008a06:	f1bb 0f00 	cmp.w	fp, #0
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	f300 8093 	bgt.w	8008b36 <_dtoa_r+0x9ae>
 8008a10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	dc57      	bgt.n	8008ac6 <_dtoa_r+0x93e>
 8008a16:	e08e      	b.n	8008b36 <_dtoa_r+0x9ae>
 8008a18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a1e:	e756      	b.n	80088ce <_dtoa_r+0x746>
 8008a20:	9b02      	ldr	r3, [sp, #8]
 8008a22:	1e5c      	subs	r4, r3, #1
 8008a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	bfb7      	itett	lt
 8008a2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a2c:	1b1c      	subge	r4, r3, r4
 8008a2e:	1ae2      	sublt	r2, r4, r3
 8008a30:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008a32:	bfbe      	ittt	lt
 8008a34:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008a36:	189b      	addlt	r3, r3, r2
 8008a38:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a3a:	9b02      	ldr	r3, [sp, #8]
 8008a3c:	bfb8      	it	lt
 8008a3e:	2400      	movlt	r4, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfbb      	ittet	lt
 8008a44:	9b06      	ldrlt	r3, [sp, #24]
 8008a46:	9a02      	ldrlt	r2, [sp, #8]
 8008a48:	9f06      	ldrge	r7, [sp, #24]
 8008a4a:	1a9f      	sublt	r7, r3, r2
 8008a4c:	bfac      	ite	ge
 8008a4e:	9b02      	ldrge	r3, [sp, #8]
 8008a50:	2300      	movlt	r3, #0
 8008a52:	e73e      	b.n	80088d2 <_dtoa_r+0x74a>
 8008a54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a56:	9f06      	ldr	r7, [sp, #24]
 8008a58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a5a:	e745      	b.n	80088e8 <_dtoa_r+0x760>
 8008a5c:	3fe00000 	.word	0x3fe00000
 8008a60:	40240000 	.word	0x40240000
 8008a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a66:	e76a      	b.n	800893e <_dtoa_r+0x7b6>
 8008a68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	dc19      	bgt.n	8008aa2 <_dtoa_r+0x91a>
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	b9bb      	cbnz	r3, 8008aa2 <_dtoa_r+0x91a>
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a78:	b99b      	cbnz	r3, 8008aa2 <_dtoa_r+0x91a>
 8008a7a:	9b05      	ldr	r3, [sp, #20]
 8008a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a80:	0d1b      	lsrs	r3, r3, #20
 8008a82:	051b      	lsls	r3, r3, #20
 8008a84:	b183      	cbz	r3, 8008aa8 <_dtoa_r+0x920>
 8008a86:	f04f 0801 	mov.w	r8, #1
 8008a8a:	9b06      	ldr	r3, [sp, #24]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	9306      	str	r3, [sp, #24]
 8008a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a92:	3301      	adds	r3, #1
 8008a94:	9309      	str	r3, [sp, #36]	; 0x24
 8008a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f47f af6a 	bne.w	8008972 <_dtoa_r+0x7ea>
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	e76f      	b.n	8008982 <_dtoa_r+0x7fa>
 8008aa2:	f04f 0800 	mov.w	r8, #0
 8008aa6:	e7f6      	b.n	8008a96 <_dtoa_r+0x90e>
 8008aa8:	4698      	mov	r8, r3
 8008aaa:	e7f4      	b.n	8008a96 <_dtoa_r+0x90e>
 8008aac:	f43f af7d 	beq.w	80089aa <_dtoa_r+0x822>
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	301c      	adds	r0, #28
 8008ab4:	e772      	b.n	800899c <_dtoa_r+0x814>
 8008ab6:	9b02      	ldr	r3, [sp, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dc36      	bgt.n	8008b2a <_dtoa_r+0x9a2>
 8008abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	dd33      	ble.n	8008b2a <_dtoa_r+0x9a2>
 8008ac2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008ac6:	f1bb 0f00 	cmp.w	fp, #0
 8008aca:	d10d      	bne.n	8008ae8 <_dtoa_r+0x960>
 8008acc:	4621      	mov	r1, r4
 8008ace:	465b      	mov	r3, fp
 8008ad0:	2205      	movs	r2, #5
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 fd48 	bl	8009568 <__multadd>
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4650      	mov	r0, sl
 8008ade:	f000 ffa5 	bl	8009a2c <__mcmp>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f73f adb6 	bgt.w	8008654 <_dtoa_r+0x4cc>
 8008ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008aea:	9f08      	ldr	r7, [sp, #32]
 8008aec:	ea6f 0903 	mvn.w	r9, r3
 8008af0:	f04f 0800 	mov.w	r8, #0
 8008af4:	4621      	mov	r1, r4
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 fd14 	bl	8009524 <_Bfree>
 8008afc:	2e00      	cmp	r6, #0
 8008afe:	f43f aea4 	beq.w	800884a <_dtoa_r+0x6c2>
 8008b02:	f1b8 0f00 	cmp.w	r8, #0
 8008b06:	d005      	beq.n	8008b14 <_dtoa_r+0x98c>
 8008b08:	45b0      	cmp	r8, r6
 8008b0a:	d003      	beq.n	8008b14 <_dtoa_r+0x98c>
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 fd08 	bl	8009524 <_Bfree>
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	f000 fd04 	bl	8009524 <_Bfree>
 8008b1c:	e695      	b.n	800884a <_dtoa_r+0x6c2>
 8008b1e:	2400      	movs	r4, #0
 8008b20:	4626      	mov	r6, r4
 8008b22:	e7e1      	b.n	8008ae8 <_dtoa_r+0x960>
 8008b24:	46c1      	mov	r9, r8
 8008b26:	4626      	mov	r6, r4
 8008b28:	e594      	b.n	8008654 <_dtoa_r+0x4cc>
 8008b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80fc 	beq.w	8008d2e <_dtoa_r+0xba6>
 8008b36:	2f00      	cmp	r7, #0
 8008b38:	dd05      	ble.n	8008b46 <_dtoa_r+0x9be>
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	463a      	mov	r2, r7
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 ff08 	bl	8009954 <__lshift>
 8008b44:	4606      	mov	r6, r0
 8008b46:	f1b8 0f00 	cmp.w	r8, #0
 8008b4a:	d05c      	beq.n	8008c06 <_dtoa_r+0xa7e>
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	6871      	ldr	r1, [r6, #4]
 8008b50:	f000 fca8 	bl	80094a4 <_Balloc>
 8008b54:	4607      	mov	r7, r0
 8008b56:	b928      	cbnz	r0, 8008b64 <_dtoa_r+0x9dc>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b5e:	4b7e      	ldr	r3, [pc, #504]	; (8008d58 <_dtoa_r+0xbd0>)
 8008b60:	f7ff bb26 	b.w	80081b0 <_dtoa_r+0x28>
 8008b64:	6932      	ldr	r2, [r6, #16]
 8008b66:	f106 010c 	add.w	r1, r6, #12
 8008b6a:	3202      	adds	r2, #2
 8008b6c:	0092      	lsls	r2, r2, #2
 8008b6e:	300c      	adds	r0, #12
 8008b70:	f000 fc8a 	bl	8009488 <memcpy>
 8008b74:	2201      	movs	r2, #1
 8008b76:	4639      	mov	r1, r7
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 feeb 	bl	8009954 <__lshift>
 8008b7e:	46b0      	mov	r8, r6
 8008b80:	4606      	mov	r6, r0
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	3301      	adds	r3, #1
 8008b86:	9302      	str	r3, [sp, #8]
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	445b      	add	r3, fp
 8008b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8e:	9b04      	ldr	r3, [sp, #16]
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	9309      	str	r3, [sp, #36]	; 0x24
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ba0:	f7ff fa64 	bl	800806c <quorem>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	4641      	mov	r1, r8
 8008ba8:	3330      	adds	r3, #48	; 0x30
 8008baa:	9004      	str	r0, [sp, #16]
 8008bac:	4650      	mov	r0, sl
 8008bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bb0:	f000 ff3c 	bl	8009a2c <__mcmp>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	9006      	str	r0, [sp, #24]
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 ff52 	bl	8009a64 <__mdiff>
 8008bc0:	68c2      	ldr	r2, [r0, #12]
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc6:	bb02      	cbnz	r2, 8008c0a <_dtoa_r+0xa82>
 8008bc8:	4601      	mov	r1, r0
 8008bca:	4650      	mov	r0, sl
 8008bcc:	f000 ff2e 	bl	8009a2c <__mcmp>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008bdc:	f000 fca2 	bl	8009524 <_Bfree>
 8008be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008be4:	9f02      	ldr	r7, [sp, #8]
 8008be6:	ea43 0102 	orr.w	r1, r3, r2
 8008bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bec:	430b      	orrs	r3, r1
 8008bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf0:	d10d      	bne.n	8008c0e <_dtoa_r+0xa86>
 8008bf2:	2b39      	cmp	r3, #57	; 0x39
 8008bf4:	d027      	beq.n	8008c46 <_dtoa_r+0xabe>
 8008bf6:	9a06      	ldr	r2, [sp, #24]
 8008bf8:	2a00      	cmp	r2, #0
 8008bfa:	dd01      	ble.n	8008c00 <_dtoa_r+0xa78>
 8008bfc:	9b04      	ldr	r3, [sp, #16]
 8008bfe:	3331      	adds	r3, #49	; 0x31
 8008c00:	f88b 3000 	strb.w	r3, [fp]
 8008c04:	e776      	b.n	8008af4 <_dtoa_r+0x96c>
 8008c06:	4630      	mov	r0, r6
 8008c08:	e7b9      	b.n	8008b7e <_dtoa_r+0x9f6>
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	e7e2      	b.n	8008bd4 <_dtoa_r+0xa4c>
 8008c0e:	9906      	ldr	r1, [sp, #24]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	db04      	blt.n	8008c1e <_dtoa_r+0xa96>
 8008c14:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008c16:	4301      	orrs	r1, r0
 8008c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c1a:	4301      	orrs	r1, r0
 8008c1c:	d120      	bne.n	8008c60 <_dtoa_r+0xad8>
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	ddee      	ble.n	8008c00 <_dtoa_r+0xa78>
 8008c22:	4651      	mov	r1, sl
 8008c24:	2201      	movs	r2, #1
 8008c26:	4628      	mov	r0, r5
 8008c28:	9302      	str	r3, [sp, #8]
 8008c2a:	f000 fe93 	bl	8009954 <__lshift>
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4682      	mov	sl, r0
 8008c32:	f000 fefb 	bl	8009a2c <__mcmp>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	dc02      	bgt.n	8008c42 <_dtoa_r+0xaba>
 8008c3c:	d1e0      	bne.n	8008c00 <_dtoa_r+0xa78>
 8008c3e:	07da      	lsls	r2, r3, #31
 8008c40:	d5de      	bpl.n	8008c00 <_dtoa_r+0xa78>
 8008c42:	2b39      	cmp	r3, #57	; 0x39
 8008c44:	d1da      	bne.n	8008bfc <_dtoa_r+0xa74>
 8008c46:	2339      	movs	r3, #57	; 0x39
 8008c48:	f88b 3000 	strb.w	r3, [fp]
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	461f      	mov	r7, r3
 8008c50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	2a39      	cmp	r2, #57	; 0x39
 8008c58:	d050      	beq.n	8008cfc <_dtoa_r+0xb74>
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	e749      	b.n	8008af4 <_dtoa_r+0x96c>
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	dd03      	ble.n	8008c6c <_dtoa_r+0xae4>
 8008c64:	2b39      	cmp	r3, #57	; 0x39
 8008c66:	d0ee      	beq.n	8008c46 <_dtoa_r+0xabe>
 8008c68:	3301      	adds	r3, #1
 8008c6a:	e7c9      	b.n	8008c00 <_dtoa_r+0xa78>
 8008c6c:	9a02      	ldr	r2, [sp, #8]
 8008c6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c70:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c74:	428a      	cmp	r2, r1
 8008c76:	d02a      	beq.n	8008cce <_dtoa_r+0xb46>
 8008c78:	4651      	mov	r1, sl
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	220a      	movs	r2, #10
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 fc72 	bl	8009568 <__multadd>
 8008c84:	45b0      	cmp	r8, r6
 8008c86:	4682      	mov	sl, r0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	f04f 020a 	mov.w	r2, #10
 8008c90:	4641      	mov	r1, r8
 8008c92:	4628      	mov	r0, r5
 8008c94:	d107      	bne.n	8008ca6 <_dtoa_r+0xb1e>
 8008c96:	f000 fc67 	bl	8009568 <__multadd>
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	e777      	b.n	8008b96 <_dtoa_r+0xa0e>
 8008ca6:	f000 fc5f 	bl	8009568 <__multadd>
 8008caa:	4631      	mov	r1, r6
 8008cac:	4680      	mov	r8, r0
 8008cae:	2300      	movs	r3, #0
 8008cb0:	220a      	movs	r2, #10
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 fc58 	bl	8009568 <__multadd>
 8008cb8:	4606      	mov	r6, r0
 8008cba:	e7f0      	b.n	8008c9e <_dtoa_r+0xb16>
 8008cbc:	f1bb 0f00 	cmp.w	fp, #0
 8008cc0:	bfcc      	ite	gt
 8008cc2:	465f      	movgt	r7, fp
 8008cc4:	2701      	movle	r7, #1
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	9a08      	ldr	r2, [sp, #32]
 8008ccc:	4417      	add	r7, r2
 8008cce:	4651      	mov	r1, sl
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	9302      	str	r3, [sp, #8]
 8008cd6:	f000 fe3d 	bl	8009954 <__lshift>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4682      	mov	sl, r0
 8008cde:	f000 fea5 	bl	8009a2c <__mcmp>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	dcb2      	bgt.n	8008c4c <_dtoa_r+0xac4>
 8008ce6:	d102      	bne.n	8008cee <_dtoa_r+0xb66>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	07db      	lsls	r3, r3, #31
 8008cec:	d4ae      	bmi.n	8008c4c <_dtoa_r+0xac4>
 8008cee:	463b      	mov	r3, r7
 8008cf0:	461f      	mov	r7, r3
 8008cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cf6:	2a30      	cmp	r2, #48	; 0x30
 8008cf8:	d0fa      	beq.n	8008cf0 <_dtoa_r+0xb68>
 8008cfa:	e6fb      	b.n	8008af4 <_dtoa_r+0x96c>
 8008cfc:	9a08      	ldr	r2, [sp, #32]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d1a5      	bne.n	8008c4e <_dtoa_r+0xac6>
 8008d02:	2331      	movs	r3, #49	; 0x31
 8008d04:	f109 0901 	add.w	r9, r9, #1
 8008d08:	7013      	strb	r3, [r2, #0]
 8008d0a:	e6f3      	b.n	8008af4 <_dtoa_r+0x96c>
 8008d0c:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <_dtoa_r+0xbd4>)
 8008d0e:	f7ff baa7 	b.w	8008260 <_dtoa_r+0xd8>
 8008d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f aa80 	bne.w	800821a <_dtoa_r+0x92>
 8008d1a:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <_dtoa_r+0xbd8>)
 8008d1c:	f7ff baa0 	b.w	8008260 <_dtoa_r+0xd8>
 8008d20:	f1bb 0f00 	cmp.w	fp, #0
 8008d24:	dc03      	bgt.n	8008d2e <_dtoa_r+0xba6>
 8008d26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	f73f aecc 	bgt.w	8008ac6 <_dtoa_r+0x93e>
 8008d2e:	9f08      	ldr	r7, [sp, #32]
 8008d30:	4621      	mov	r1, r4
 8008d32:	4650      	mov	r0, sl
 8008d34:	f7ff f99a 	bl	800806c <quorem>
 8008d38:	9a08      	ldr	r2, [sp, #32]
 8008d3a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d3e:	f807 3b01 	strb.w	r3, [r7], #1
 8008d42:	1aba      	subs	r2, r7, r2
 8008d44:	4593      	cmp	fp, r2
 8008d46:	ddb9      	ble.n	8008cbc <_dtoa_r+0xb34>
 8008d48:	4651      	mov	r1, sl
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	220a      	movs	r2, #10
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f000 fc0a 	bl	8009568 <__multadd>
 8008d54:	4682      	mov	sl, r0
 8008d56:	e7eb      	b.n	8008d30 <_dtoa_r+0xba8>
 8008d58:	0800b23c 	.word	0x0800b23c
 8008d5c:	0800b03c 	.word	0x0800b03c
 8008d60:	0800b1b9 	.word	0x0800b1b9

08008d64 <rshift>:
 8008d64:	6903      	ldr	r3, [r0, #16]
 8008d66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d6e:	f100 0414 	add.w	r4, r0, #20
 8008d72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d76:	dd46      	ble.n	8008e06 <rshift+0xa2>
 8008d78:	f011 011f 	ands.w	r1, r1, #31
 8008d7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d84:	d10c      	bne.n	8008da0 <rshift+0x3c>
 8008d86:	4629      	mov	r1, r5
 8008d88:	f100 0710 	add.w	r7, r0, #16
 8008d8c:	42b1      	cmp	r1, r6
 8008d8e:	d335      	bcc.n	8008dfc <rshift+0x98>
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	1eea      	subs	r2, r5, #3
 8008d96:	4296      	cmp	r6, r2
 8008d98:	bf38      	it	cc
 8008d9a:	2300      	movcc	r3, #0
 8008d9c:	4423      	add	r3, r4
 8008d9e:	e015      	b.n	8008dcc <rshift+0x68>
 8008da0:	46a1      	mov	r9, r4
 8008da2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008da6:	f1c1 0820 	rsb	r8, r1, #32
 8008daa:	40cf      	lsrs	r7, r1
 8008dac:	f105 0e04 	add.w	lr, r5, #4
 8008db0:	4576      	cmp	r6, lr
 8008db2:	46f4      	mov	ip, lr
 8008db4:	d816      	bhi.n	8008de4 <rshift+0x80>
 8008db6:	1a9b      	subs	r3, r3, r2
 8008db8:	009a      	lsls	r2, r3, #2
 8008dba:	3a04      	subs	r2, #4
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	42ae      	cmp	r6, r5
 8008dc0:	bf38      	it	cc
 8008dc2:	2200      	movcc	r2, #0
 8008dc4:	18a3      	adds	r3, r4, r2
 8008dc6:	50a7      	str	r7, [r4, r2]
 8008dc8:	b107      	cbz	r7, 8008dcc <rshift+0x68>
 8008dca:	3304      	adds	r3, #4
 8008dcc:	42a3      	cmp	r3, r4
 8008dce:	eba3 0204 	sub.w	r2, r3, r4
 8008dd2:	bf08      	it	eq
 8008dd4:	2300      	moveq	r3, #0
 8008dd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dda:	6102      	str	r2, [r0, #16]
 8008ddc:	bf08      	it	eq
 8008dde:	6143      	streq	r3, [r0, #20]
 8008de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008de4:	f8dc c000 	ldr.w	ip, [ip]
 8008de8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dec:	ea4c 0707 	orr.w	r7, ip, r7
 8008df0:	f849 7b04 	str.w	r7, [r9], #4
 8008df4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008df8:	40cf      	lsrs	r7, r1
 8008dfa:	e7d9      	b.n	8008db0 <rshift+0x4c>
 8008dfc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e00:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e04:	e7c2      	b.n	8008d8c <rshift+0x28>
 8008e06:	4623      	mov	r3, r4
 8008e08:	e7e0      	b.n	8008dcc <rshift+0x68>

08008e0a <__hexdig_fun>:
 8008e0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e0e:	2b09      	cmp	r3, #9
 8008e10:	d802      	bhi.n	8008e18 <__hexdig_fun+0xe>
 8008e12:	3820      	subs	r0, #32
 8008e14:	b2c0      	uxtb	r0, r0
 8008e16:	4770      	bx	lr
 8008e18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e1c:	2b05      	cmp	r3, #5
 8008e1e:	d801      	bhi.n	8008e24 <__hexdig_fun+0x1a>
 8008e20:	3847      	subs	r0, #71	; 0x47
 8008e22:	e7f7      	b.n	8008e14 <__hexdig_fun+0xa>
 8008e24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e28:	2b05      	cmp	r3, #5
 8008e2a:	d801      	bhi.n	8008e30 <__hexdig_fun+0x26>
 8008e2c:	3827      	subs	r0, #39	; 0x27
 8008e2e:	e7f1      	b.n	8008e14 <__hexdig_fun+0xa>
 8008e30:	2000      	movs	r0, #0
 8008e32:	4770      	bx	lr

08008e34 <__gethex>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	b08b      	sub	sp, #44	; 0x2c
 8008e3a:	9306      	str	r3, [sp, #24]
 8008e3c:	4bb9      	ldr	r3, [pc, #740]	; (8009124 <__gethex+0x2f0>)
 8008e3e:	9002      	str	r0, [sp, #8]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	468b      	mov	fp, r1
 8008e44:	4618      	mov	r0, r3
 8008e46:	4690      	mov	r8, r2
 8008e48:	9303      	str	r3, [sp, #12]
 8008e4a:	f7f7 f981 	bl	8000150 <strlen>
 8008e4e:	4682      	mov	sl, r0
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	f8db 2000 	ldr.w	r2, [fp]
 8008e56:	4403      	add	r3, r0
 8008e58:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	1c93      	adds	r3, r2, #2
 8008e60:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e64:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e68:	32fe      	adds	r2, #254	; 0xfe
 8008e6a:	18d1      	adds	r1, r2, r3
 8008e6c:	461f      	mov	r7, r3
 8008e6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e72:	9101      	str	r1, [sp, #4]
 8008e74:	2830      	cmp	r0, #48	; 0x30
 8008e76:	d0f8      	beq.n	8008e6a <__gethex+0x36>
 8008e78:	f7ff ffc7 	bl	8008e0a <__hexdig_fun>
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d13a      	bne.n	8008ef8 <__gethex+0xc4>
 8008e82:	4652      	mov	r2, sl
 8008e84:	4638      	mov	r0, r7
 8008e86:	9903      	ldr	r1, [sp, #12]
 8008e88:	f001 f9ea 	bl	800a260 <strncmp>
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d166      	bne.n	8008f60 <__gethex+0x12c>
 8008e92:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e96:	eb07 060a 	add.w	r6, r7, sl
 8008e9a:	f7ff ffb6 	bl	8008e0a <__hexdig_fun>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d060      	beq.n	8008f64 <__gethex+0x130>
 8008ea2:	4633      	mov	r3, r6
 8008ea4:	7818      	ldrb	r0, [r3, #0]
 8008ea6:	461f      	mov	r7, r3
 8008ea8:	2830      	cmp	r0, #48	; 0x30
 8008eaa:	f103 0301 	add.w	r3, r3, #1
 8008eae:	d0f9      	beq.n	8008ea4 <__gethex+0x70>
 8008eb0:	f7ff ffab 	bl	8008e0a <__hexdig_fun>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	fab0 f480 	clz	r4, r0
 8008eba:	4635      	mov	r5, r6
 8008ebc:	0964      	lsrs	r4, r4, #5
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	463a      	mov	r2, r7
 8008ec2:	4616      	mov	r6, r2
 8008ec4:	7830      	ldrb	r0, [r6, #0]
 8008ec6:	3201      	adds	r2, #1
 8008ec8:	f7ff ff9f 	bl	8008e0a <__hexdig_fun>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d1f8      	bne.n	8008ec2 <__gethex+0x8e>
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	9903      	ldr	r1, [sp, #12]
 8008ed6:	f001 f9c3 	bl	800a260 <strncmp>
 8008eda:	b980      	cbnz	r0, 8008efe <__gethex+0xca>
 8008edc:	b94d      	cbnz	r5, 8008ef2 <__gethex+0xbe>
 8008ede:	eb06 050a 	add.w	r5, r6, sl
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	7830      	ldrb	r0, [r6, #0]
 8008ee8:	3201      	adds	r2, #1
 8008eea:	f7ff ff8e 	bl	8008e0a <__hexdig_fun>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d1f8      	bne.n	8008ee4 <__gethex+0xb0>
 8008ef2:	1bad      	subs	r5, r5, r6
 8008ef4:	00ad      	lsls	r5, r5, #2
 8008ef6:	e004      	b.n	8008f02 <__gethex+0xce>
 8008ef8:	2400      	movs	r4, #0
 8008efa:	4625      	mov	r5, r4
 8008efc:	e7e0      	b.n	8008ec0 <__gethex+0x8c>
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	d1f7      	bne.n	8008ef2 <__gethex+0xbe>
 8008f02:	7833      	ldrb	r3, [r6, #0]
 8008f04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f08:	2b50      	cmp	r3, #80	; 0x50
 8008f0a:	d139      	bne.n	8008f80 <__gethex+0x14c>
 8008f0c:	7873      	ldrb	r3, [r6, #1]
 8008f0e:	2b2b      	cmp	r3, #43	; 0x2b
 8008f10:	d02a      	beq.n	8008f68 <__gethex+0x134>
 8008f12:	2b2d      	cmp	r3, #45	; 0x2d
 8008f14:	d02c      	beq.n	8008f70 <__gethex+0x13c>
 8008f16:	f04f 0900 	mov.w	r9, #0
 8008f1a:	1c71      	adds	r1, r6, #1
 8008f1c:	7808      	ldrb	r0, [r1, #0]
 8008f1e:	f7ff ff74 	bl	8008e0a <__hexdig_fun>
 8008f22:	1e43      	subs	r3, r0, #1
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b18      	cmp	r3, #24
 8008f28:	d82a      	bhi.n	8008f80 <__gethex+0x14c>
 8008f2a:	f1a0 0210 	sub.w	r2, r0, #16
 8008f2e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f32:	f7ff ff6a 	bl	8008e0a <__hexdig_fun>
 8008f36:	1e43      	subs	r3, r0, #1
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b18      	cmp	r3, #24
 8008f3c:	d91b      	bls.n	8008f76 <__gethex+0x142>
 8008f3e:	f1b9 0f00 	cmp.w	r9, #0
 8008f42:	d000      	beq.n	8008f46 <__gethex+0x112>
 8008f44:	4252      	negs	r2, r2
 8008f46:	4415      	add	r5, r2
 8008f48:	f8cb 1000 	str.w	r1, [fp]
 8008f4c:	b1d4      	cbz	r4, 8008f84 <__gethex+0x150>
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bf14      	ite	ne
 8008f54:	2700      	movne	r7, #0
 8008f56:	2706      	moveq	r7, #6
 8008f58:	4638      	mov	r0, r7
 8008f5a:	b00b      	add	sp, #44	; 0x2c
 8008f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f60:	463e      	mov	r6, r7
 8008f62:	4625      	mov	r5, r4
 8008f64:	2401      	movs	r4, #1
 8008f66:	e7cc      	b.n	8008f02 <__gethex+0xce>
 8008f68:	f04f 0900 	mov.w	r9, #0
 8008f6c:	1cb1      	adds	r1, r6, #2
 8008f6e:	e7d5      	b.n	8008f1c <__gethex+0xe8>
 8008f70:	f04f 0901 	mov.w	r9, #1
 8008f74:	e7fa      	b.n	8008f6c <__gethex+0x138>
 8008f76:	230a      	movs	r3, #10
 8008f78:	fb03 0202 	mla	r2, r3, r2, r0
 8008f7c:	3a10      	subs	r2, #16
 8008f7e:	e7d6      	b.n	8008f2e <__gethex+0xfa>
 8008f80:	4631      	mov	r1, r6
 8008f82:	e7e1      	b.n	8008f48 <__gethex+0x114>
 8008f84:	4621      	mov	r1, r4
 8008f86:	1bf3      	subs	r3, r6, r7
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	2b07      	cmp	r3, #7
 8008f8c:	dc0a      	bgt.n	8008fa4 <__gethex+0x170>
 8008f8e:	9802      	ldr	r0, [sp, #8]
 8008f90:	f000 fa88 	bl	80094a4 <_Balloc>
 8008f94:	4604      	mov	r4, r0
 8008f96:	b940      	cbnz	r0, 8008faa <__gethex+0x176>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	21de      	movs	r1, #222	; 0xde
 8008f9c:	4b62      	ldr	r3, [pc, #392]	; (8009128 <__gethex+0x2f4>)
 8008f9e:	4863      	ldr	r0, [pc, #396]	; (800912c <__gethex+0x2f8>)
 8008fa0:	f001 f97e 	bl	800a2a0 <__assert_func>
 8008fa4:	3101      	adds	r1, #1
 8008fa6:	105b      	asrs	r3, r3, #1
 8008fa8:	e7ef      	b.n	8008f8a <__gethex+0x156>
 8008faa:	f04f 0b00 	mov.w	fp, #0
 8008fae:	f100 0914 	add.w	r9, r0, #20
 8008fb2:	f1ca 0301 	rsb	r3, sl, #1
 8008fb6:	f8cd 9010 	str.w	r9, [sp, #16]
 8008fba:	f8cd b004 	str.w	fp, [sp, #4]
 8008fbe:	9308      	str	r3, [sp, #32]
 8008fc0:	42b7      	cmp	r7, r6
 8008fc2:	d33f      	bcc.n	8009044 <__gethex+0x210>
 8008fc4:	9f04      	ldr	r7, [sp, #16]
 8008fc6:	9b01      	ldr	r3, [sp, #4]
 8008fc8:	f847 3b04 	str.w	r3, [r7], #4
 8008fcc:	eba7 0709 	sub.w	r7, r7, r9
 8008fd0:	10bf      	asrs	r7, r7, #2
 8008fd2:	6127      	str	r7, [r4, #16]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fb5b 	bl	8009690 <__hi0bits>
 8008fda:	017f      	lsls	r7, r7, #5
 8008fdc:	f8d8 6000 	ldr.w	r6, [r8]
 8008fe0:	1a3f      	subs	r7, r7, r0
 8008fe2:	42b7      	cmp	r7, r6
 8008fe4:	dd62      	ble.n	80090ac <__gethex+0x278>
 8008fe6:	1bbf      	subs	r7, r7, r6
 8008fe8:	4639      	mov	r1, r7
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fef1 	bl	8009dd2 <__any_on>
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	b1a8      	cbz	r0, 8009020 <__gethex+0x1ec>
 8008ff4:	f04f 0a01 	mov.w	sl, #1
 8008ff8:	1e7b      	subs	r3, r7, #1
 8008ffa:	1159      	asrs	r1, r3, #5
 8008ffc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009000:	f003 021f 	and.w	r2, r3, #31
 8009004:	fa0a f202 	lsl.w	r2, sl, r2
 8009008:	420a      	tst	r2, r1
 800900a:	d009      	beq.n	8009020 <__gethex+0x1ec>
 800900c:	4553      	cmp	r3, sl
 800900e:	dd05      	ble.n	800901c <__gethex+0x1e8>
 8009010:	4620      	mov	r0, r4
 8009012:	1eb9      	subs	r1, r7, #2
 8009014:	f000 fedd 	bl	8009dd2 <__any_on>
 8009018:	2800      	cmp	r0, #0
 800901a:	d144      	bne.n	80090a6 <__gethex+0x272>
 800901c:	f04f 0a02 	mov.w	sl, #2
 8009020:	4639      	mov	r1, r7
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff fe9e 	bl	8008d64 <rshift>
 8009028:	443d      	add	r5, r7
 800902a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800902e:	42ab      	cmp	r3, r5
 8009030:	da4a      	bge.n	80090c8 <__gethex+0x294>
 8009032:	4621      	mov	r1, r4
 8009034:	9802      	ldr	r0, [sp, #8]
 8009036:	f000 fa75 	bl	8009524 <_Bfree>
 800903a:	2300      	movs	r3, #0
 800903c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800903e:	27a3      	movs	r7, #163	; 0xa3
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	e789      	b.n	8008f58 <__gethex+0x124>
 8009044:	1e73      	subs	r3, r6, #1
 8009046:	9a07      	ldr	r2, [sp, #28]
 8009048:	9305      	str	r3, [sp, #20]
 800904a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800904e:	4293      	cmp	r3, r2
 8009050:	d019      	beq.n	8009086 <__gethex+0x252>
 8009052:	f1bb 0f20 	cmp.w	fp, #32
 8009056:	d107      	bne.n	8009068 <__gethex+0x234>
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	9a01      	ldr	r2, [sp, #4]
 800905c:	f843 2b04 	str.w	r2, [r3], #4
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	2300      	movs	r3, #0
 8009064:	469b      	mov	fp, r3
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800906c:	f7ff fecd 	bl	8008e0a <__hexdig_fun>
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	f000 000f 	and.w	r0, r0, #15
 8009076:	fa00 f00b 	lsl.w	r0, r0, fp
 800907a:	4303      	orrs	r3, r0
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	f10b 0b04 	add.w	fp, fp, #4
 8009082:	9b05      	ldr	r3, [sp, #20]
 8009084:	e00d      	b.n	80090a2 <__gethex+0x26e>
 8009086:	9b05      	ldr	r3, [sp, #20]
 8009088:	9a08      	ldr	r2, [sp, #32]
 800908a:	4413      	add	r3, r2
 800908c:	42bb      	cmp	r3, r7
 800908e:	d3e0      	bcc.n	8009052 <__gethex+0x21e>
 8009090:	4618      	mov	r0, r3
 8009092:	4652      	mov	r2, sl
 8009094:	9903      	ldr	r1, [sp, #12]
 8009096:	9309      	str	r3, [sp, #36]	; 0x24
 8009098:	f001 f8e2 	bl	800a260 <strncmp>
 800909c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909e:	2800      	cmp	r0, #0
 80090a0:	d1d7      	bne.n	8009052 <__gethex+0x21e>
 80090a2:	461e      	mov	r6, r3
 80090a4:	e78c      	b.n	8008fc0 <__gethex+0x18c>
 80090a6:	f04f 0a03 	mov.w	sl, #3
 80090aa:	e7b9      	b.n	8009020 <__gethex+0x1ec>
 80090ac:	da09      	bge.n	80090c2 <__gethex+0x28e>
 80090ae:	1bf7      	subs	r7, r6, r7
 80090b0:	4621      	mov	r1, r4
 80090b2:	463a      	mov	r2, r7
 80090b4:	9802      	ldr	r0, [sp, #8]
 80090b6:	f000 fc4d 	bl	8009954 <__lshift>
 80090ba:	4604      	mov	r4, r0
 80090bc:	1bed      	subs	r5, r5, r7
 80090be:	f100 0914 	add.w	r9, r0, #20
 80090c2:	f04f 0a00 	mov.w	sl, #0
 80090c6:	e7b0      	b.n	800902a <__gethex+0x1f6>
 80090c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80090cc:	42a8      	cmp	r0, r5
 80090ce:	dd71      	ble.n	80091b4 <__gethex+0x380>
 80090d0:	1b45      	subs	r5, r0, r5
 80090d2:	42ae      	cmp	r6, r5
 80090d4:	dc34      	bgt.n	8009140 <__gethex+0x30c>
 80090d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d028      	beq.n	8009130 <__gethex+0x2fc>
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d02a      	beq.n	8009138 <__gethex+0x304>
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d115      	bne.n	8009112 <__gethex+0x2de>
 80090e6:	42ae      	cmp	r6, r5
 80090e8:	d113      	bne.n	8009112 <__gethex+0x2de>
 80090ea:	2e01      	cmp	r6, #1
 80090ec:	d10b      	bne.n	8009106 <__gethex+0x2d2>
 80090ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090f2:	9a06      	ldr	r2, [sp, #24]
 80090f4:	2762      	movs	r7, #98	; 0x62
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	2301      	movs	r3, #1
 80090fa:	6123      	str	r3, [r4, #16]
 80090fc:	f8c9 3000 	str.w	r3, [r9]
 8009100:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009102:	601c      	str	r4, [r3, #0]
 8009104:	e728      	b.n	8008f58 <__gethex+0x124>
 8009106:	4620      	mov	r0, r4
 8009108:	1e71      	subs	r1, r6, #1
 800910a:	f000 fe62 	bl	8009dd2 <__any_on>
 800910e:	2800      	cmp	r0, #0
 8009110:	d1ed      	bne.n	80090ee <__gethex+0x2ba>
 8009112:	4621      	mov	r1, r4
 8009114:	9802      	ldr	r0, [sp, #8]
 8009116:	f000 fa05 	bl	8009524 <_Bfree>
 800911a:	2300      	movs	r3, #0
 800911c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800911e:	2750      	movs	r7, #80	; 0x50
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	e719      	b.n	8008f58 <__gethex+0x124>
 8009124:	0800b2b8 	.word	0x0800b2b8
 8009128:	0800b23c 	.word	0x0800b23c
 800912c:	0800b24d 	.word	0x0800b24d
 8009130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1ed      	bne.n	8009112 <__gethex+0x2de>
 8009136:	e7da      	b.n	80090ee <__gethex+0x2ba>
 8009138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1d7      	bne.n	80090ee <__gethex+0x2ba>
 800913e:	e7e8      	b.n	8009112 <__gethex+0x2de>
 8009140:	1e6f      	subs	r7, r5, #1
 8009142:	f1ba 0f00 	cmp.w	sl, #0
 8009146:	d132      	bne.n	80091ae <__gethex+0x37a>
 8009148:	b127      	cbz	r7, 8009154 <__gethex+0x320>
 800914a:	4639      	mov	r1, r7
 800914c:	4620      	mov	r0, r4
 800914e:	f000 fe40 	bl	8009dd2 <__any_on>
 8009152:	4682      	mov	sl, r0
 8009154:	2101      	movs	r1, #1
 8009156:	117b      	asrs	r3, r7, #5
 8009158:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800915c:	f007 071f 	and.w	r7, r7, #31
 8009160:	fa01 f707 	lsl.w	r7, r1, r7
 8009164:	421f      	tst	r7, r3
 8009166:	f04f 0702 	mov.w	r7, #2
 800916a:	4629      	mov	r1, r5
 800916c:	4620      	mov	r0, r4
 800916e:	bf18      	it	ne
 8009170:	f04a 0a02 	orrne.w	sl, sl, #2
 8009174:	1b76      	subs	r6, r6, r5
 8009176:	f7ff fdf5 	bl	8008d64 <rshift>
 800917a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800917e:	f1ba 0f00 	cmp.w	sl, #0
 8009182:	d048      	beq.n	8009216 <__gethex+0x3e2>
 8009184:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009188:	2b02      	cmp	r3, #2
 800918a:	d015      	beq.n	80091b8 <__gethex+0x384>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d017      	beq.n	80091c0 <__gethex+0x38c>
 8009190:	2b01      	cmp	r3, #1
 8009192:	d109      	bne.n	80091a8 <__gethex+0x374>
 8009194:	f01a 0f02 	tst.w	sl, #2
 8009198:	d006      	beq.n	80091a8 <__gethex+0x374>
 800919a:	f8d9 0000 	ldr.w	r0, [r9]
 800919e:	ea4a 0a00 	orr.w	sl, sl, r0
 80091a2:	f01a 0f01 	tst.w	sl, #1
 80091a6:	d10e      	bne.n	80091c6 <__gethex+0x392>
 80091a8:	f047 0710 	orr.w	r7, r7, #16
 80091ac:	e033      	b.n	8009216 <__gethex+0x3e2>
 80091ae:	f04f 0a01 	mov.w	sl, #1
 80091b2:	e7cf      	b.n	8009154 <__gethex+0x320>
 80091b4:	2701      	movs	r7, #1
 80091b6:	e7e2      	b.n	800917e <__gethex+0x34a>
 80091b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ba:	f1c3 0301 	rsb	r3, r3, #1
 80091be:	9315      	str	r3, [sp, #84]	; 0x54
 80091c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f0      	beq.n	80091a8 <__gethex+0x374>
 80091c6:	f04f 0c00 	mov.w	ip, #0
 80091ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091ce:	f104 0314 	add.w	r3, r4, #20
 80091d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091da:	4618      	mov	r0, r3
 80091dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091e4:	d01c      	beq.n	8009220 <__gethex+0x3ec>
 80091e6:	3201      	adds	r2, #1
 80091e8:	6002      	str	r2, [r0, #0]
 80091ea:	2f02      	cmp	r7, #2
 80091ec:	f104 0314 	add.w	r3, r4, #20
 80091f0:	d13d      	bne.n	800926e <__gethex+0x43a>
 80091f2:	f8d8 2000 	ldr.w	r2, [r8]
 80091f6:	3a01      	subs	r2, #1
 80091f8:	42b2      	cmp	r2, r6
 80091fa:	d10a      	bne.n	8009212 <__gethex+0x3de>
 80091fc:	2201      	movs	r2, #1
 80091fe:	1171      	asrs	r1, r6, #5
 8009200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009204:	f006 061f 	and.w	r6, r6, #31
 8009208:	fa02 f606 	lsl.w	r6, r2, r6
 800920c:	421e      	tst	r6, r3
 800920e:	bf18      	it	ne
 8009210:	4617      	movne	r7, r2
 8009212:	f047 0720 	orr.w	r7, r7, #32
 8009216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009218:	601c      	str	r4, [r3, #0]
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	601d      	str	r5, [r3, #0]
 800921e:	e69b      	b.n	8008f58 <__gethex+0x124>
 8009220:	4299      	cmp	r1, r3
 8009222:	f843 cc04 	str.w	ip, [r3, #-4]
 8009226:	d8d8      	bhi.n	80091da <__gethex+0x3a6>
 8009228:	68a3      	ldr	r3, [r4, #8]
 800922a:	459b      	cmp	fp, r3
 800922c:	db17      	blt.n	800925e <__gethex+0x42a>
 800922e:	6861      	ldr	r1, [r4, #4]
 8009230:	9802      	ldr	r0, [sp, #8]
 8009232:	3101      	adds	r1, #1
 8009234:	f000 f936 	bl	80094a4 <_Balloc>
 8009238:	4681      	mov	r9, r0
 800923a:	b918      	cbnz	r0, 8009244 <__gethex+0x410>
 800923c:	4602      	mov	r2, r0
 800923e:	2184      	movs	r1, #132	; 0x84
 8009240:	4b19      	ldr	r3, [pc, #100]	; (80092a8 <__gethex+0x474>)
 8009242:	e6ac      	b.n	8008f9e <__gethex+0x16a>
 8009244:	6922      	ldr	r2, [r4, #16]
 8009246:	f104 010c 	add.w	r1, r4, #12
 800924a:	3202      	adds	r2, #2
 800924c:	0092      	lsls	r2, r2, #2
 800924e:	300c      	adds	r0, #12
 8009250:	f000 f91a 	bl	8009488 <memcpy>
 8009254:	4621      	mov	r1, r4
 8009256:	9802      	ldr	r0, [sp, #8]
 8009258:	f000 f964 	bl	8009524 <_Bfree>
 800925c:	464c      	mov	r4, r9
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	6122      	str	r2, [r4, #16]
 8009264:	2201      	movs	r2, #1
 8009266:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800926a:	615a      	str	r2, [r3, #20]
 800926c:	e7bd      	b.n	80091ea <__gethex+0x3b6>
 800926e:	6922      	ldr	r2, [r4, #16]
 8009270:	455a      	cmp	r2, fp
 8009272:	dd0b      	ble.n	800928c <__gethex+0x458>
 8009274:	2101      	movs	r1, #1
 8009276:	4620      	mov	r0, r4
 8009278:	f7ff fd74 	bl	8008d64 <rshift>
 800927c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009280:	3501      	adds	r5, #1
 8009282:	42ab      	cmp	r3, r5
 8009284:	f6ff aed5 	blt.w	8009032 <__gethex+0x1fe>
 8009288:	2701      	movs	r7, #1
 800928a:	e7c2      	b.n	8009212 <__gethex+0x3de>
 800928c:	f016 061f 	ands.w	r6, r6, #31
 8009290:	d0fa      	beq.n	8009288 <__gethex+0x454>
 8009292:	449a      	add	sl, r3
 8009294:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009298:	f000 f9fa 	bl	8009690 <__hi0bits>
 800929c:	f1c6 0620 	rsb	r6, r6, #32
 80092a0:	42b0      	cmp	r0, r6
 80092a2:	dbe7      	blt.n	8009274 <__gethex+0x440>
 80092a4:	e7f0      	b.n	8009288 <__gethex+0x454>
 80092a6:	bf00      	nop
 80092a8:	0800b23c 	.word	0x0800b23c

080092ac <L_shift>:
 80092ac:	f1c2 0208 	rsb	r2, r2, #8
 80092b0:	0092      	lsls	r2, r2, #2
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	f1c2 0620 	rsb	r6, r2, #32
 80092b8:	6843      	ldr	r3, [r0, #4]
 80092ba:	6804      	ldr	r4, [r0, #0]
 80092bc:	fa03 f506 	lsl.w	r5, r3, r6
 80092c0:	432c      	orrs	r4, r5
 80092c2:	40d3      	lsrs	r3, r2
 80092c4:	6004      	str	r4, [r0, #0]
 80092c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80092ca:	4288      	cmp	r0, r1
 80092cc:	d3f4      	bcc.n	80092b8 <L_shift+0xc>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}

080092d0 <__match>:
 80092d0:	b530      	push	{r4, r5, lr}
 80092d2:	6803      	ldr	r3, [r0, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092da:	b914      	cbnz	r4, 80092e2 <__match+0x12>
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	2001      	movs	r0, #1
 80092e0:	bd30      	pop	{r4, r5, pc}
 80092e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80092ea:	2d19      	cmp	r5, #25
 80092ec:	bf98      	it	ls
 80092ee:	3220      	addls	r2, #32
 80092f0:	42a2      	cmp	r2, r4
 80092f2:	d0f0      	beq.n	80092d6 <__match+0x6>
 80092f4:	2000      	movs	r0, #0
 80092f6:	e7f3      	b.n	80092e0 <__match+0x10>

080092f8 <__hexnan>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	2500      	movs	r5, #0
 80092fe:	680b      	ldr	r3, [r1, #0]
 8009300:	4682      	mov	sl, r0
 8009302:	115e      	asrs	r6, r3, #5
 8009304:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009308:	f013 031f 	ands.w	r3, r3, #31
 800930c:	bf18      	it	ne
 800930e:	3604      	addne	r6, #4
 8009310:	1f37      	subs	r7, r6, #4
 8009312:	4690      	mov	r8, r2
 8009314:	46b9      	mov	r9, r7
 8009316:	463c      	mov	r4, r7
 8009318:	46ab      	mov	fp, r5
 800931a:	b087      	sub	sp, #28
 800931c:	6801      	ldr	r1, [r0, #0]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	f846 5c04 	str.w	r5, [r6, #-4]
 8009324:	9502      	str	r5, [sp, #8]
 8009326:	784a      	ldrb	r2, [r1, #1]
 8009328:	1c4b      	adds	r3, r1, #1
 800932a:	9303      	str	r3, [sp, #12]
 800932c:	b342      	cbz	r2, 8009380 <__hexnan+0x88>
 800932e:	4610      	mov	r0, r2
 8009330:	9105      	str	r1, [sp, #20]
 8009332:	9204      	str	r2, [sp, #16]
 8009334:	f7ff fd69 	bl	8008e0a <__hexdig_fun>
 8009338:	2800      	cmp	r0, #0
 800933a:	d14f      	bne.n	80093dc <__hexnan+0xe4>
 800933c:	9a04      	ldr	r2, [sp, #16]
 800933e:	9905      	ldr	r1, [sp, #20]
 8009340:	2a20      	cmp	r2, #32
 8009342:	d818      	bhi.n	8009376 <__hexnan+0x7e>
 8009344:	9b02      	ldr	r3, [sp, #8]
 8009346:	459b      	cmp	fp, r3
 8009348:	dd13      	ble.n	8009372 <__hexnan+0x7a>
 800934a:	454c      	cmp	r4, r9
 800934c:	d206      	bcs.n	800935c <__hexnan+0x64>
 800934e:	2d07      	cmp	r5, #7
 8009350:	dc04      	bgt.n	800935c <__hexnan+0x64>
 8009352:	462a      	mov	r2, r5
 8009354:	4649      	mov	r1, r9
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff ffa8 	bl	80092ac <L_shift>
 800935c:	4544      	cmp	r4, r8
 800935e:	d950      	bls.n	8009402 <__hexnan+0x10a>
 8009360:	2300      	movs	r3, #0
 8009362:	f1a4 0904 	sub.w	r9, r4, #4
 8009366:	f844 3c04 	str.w	r3, [r4, #-4]
 800936a:	461d      	mov	r5, r3
 800936c:	464c      	mov	r4, r9
 800936e:	f8cd b008 	str.w	fp, [sp, #8]
 8009372:	9903      	ldr	r1, [sp, #12]
 8009374:	e7d7      	b.n	8009326 <__hexnan+0x2e>
 8009376:	2a29      	cmp	r2, #41	; 0x29
 8009378:	d156      	bne.n	8009428 <__hexnan+0x130>
 800937a:	3102      	adds	r1, #2
 800937c:	f8ca 1000 	str.w	r1, [sl]
 8009380:	f1bb 0f00 	cmp.w	fp, #0
 8009384:	d050      	beq.n	8009428 <__hexnan+0x130>
 8009386:	454c      	cmp	r4, r9
 8009388:	d206      	bcs.n	8009398 <__hexnan+0xa0>
 800938a:	2d07      	cmp	r5, #7
 800938c:	dc04      	bgt.n	8009398 <__hexnan+0xa0>
 800938e:	462a      	mov	r2, r5
 8009390:	4649      	mov	r1, r9
 8009392:	4620      	mov	r0, r4
 8009394:	f7ff ff8a 	bl	80092ac <L_shift>
 8009398:	4544      	cmp	r4, r8
 800939a:	d934      	bls.n	8009406 <__hexnan+0x10e>
 800939c:	4623      	mov	r3, r4
 800939e:	f1a8 0204 	sub.w	r2, r8, #4
 80093a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80093a6:	429f      	cmp	r7, r3
 80093a8:	f842 1f04 	str.w	r1, [r2, #4]!
 80093ac:	d2f9      	bcs.n	80093a2 <__hexnan+0xaa>
 80093ae:	1b3b      	subs	r3, r7, r4
 80093b0:	f023 0303 	bic.w	r3, r3, #3
 80093b4:	3304      	adds	r3, #4
 80093b6:	3401      	adds	r4, #1
 80093b8:	3e03      	subs	r6, #3
 80093ba:	42b4      	cmp	r4, r6
 80093bc:	bf88      	it	hi
 80093be:	2304      	movhi	r3, #4
 80093c0:	2200      	movs	r2, #0
 80093c2:	4443      	add	r3, r8
 80093c4:	f843 2b04 	str.w	r2, [r3], #4
 80093c8:	429f      	cmp	r7, r3
 80093ca:	d2fb      	bcs.n	80093c4 <__hexnan+0xcc>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	b91b      	cbnz	r3, 80093d8 <__hexnan+0xe0>
 80093d0:	4547      	cmp	r7, r8
 80093d2:	d127      	bne.n	8009424 <__hexnan+0x12c>
 80093d4:	2301      	movs	r3, #1
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	2005      	movs	r0, #5
 80093da:	e026      	b.n	800942a <__hexnan+0x132>
 80093dc:	3501      	adds	r5, #1
 80093de:	2d08      	cmp	r5, #8
 80093e0:	f10b 0b01 	add.w	fp, fp, #1
 80093e4:	dd06      	ble.n	80093f4 <__hexnan+0xfc>
 80093e6:	4544      	cmp	r4, r8
 80093e8:	d9c3      	bls.n	8009372 <__hexnan+0x7a>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2501      	movs	r5, #1
 80093ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80093f2:	3c04      	subs	r4, #4
 80093f4:	6822      	ldr	r2, [r4, #0]
 80093f6:	f000 000f 	and.w	r0, r0, #15
 80093fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80093fe:	6022      	str	r2, [r4, #0]
 8009400:	e7b7      	b.n	8009372 <__hexnan+0x7a>
 8009402:	2508      	movs	r5, #8
 8009404:	e7b5      	b.n	8009372 <__hexnan+0x7a>
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0df      	beq.n	80093cc <__hexnan+0xd4>
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	f1c3 0320 	rsb	r3, r3, #32
 8009414:	fa22 f303 	lsr.w	r3, r2, r3
 8009418:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800941c:	401a      	ands	r2, r3
 800941e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009422:	e7d3      	b.n	80093cc <__hexnan+0xd4>
 8009424:	3f04      	subs	r7, #4
 8009426:	e7d1      	b.n	80093cc <__hexnan+0xd4>
 8009428:	2004      	movs	r0, #4
 800942a:	b007      	add	sp, #28
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009430 <_localeconv_r>:
 8009430:	4800      	ldr	r0, [pc, #0]	; (8009434 <_localeconv_r+0x4>)
 8009432:	4770      	bx	lr
 8009434:	20000168 	.word	0x20000168

08009438 <malloc>:
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <malloc+0xc>)
 800943a:	4601      	mov	r1, r0
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	f000 bd43 	b.w	8009ec8 <_malloc_r>
 8009442:	bf00      	nop
 8009444:	20000010 	.word	0x20000010

08009448 <__ascii_mbtowc>:
 8009448:	b082      	sub	sp, #8
 800944a:	b901      	cbnz	r1, 800944e <__ascii_mbtowc+0x6>
 800944c:	a901      	add	r1, sp, #4
 800944e:	b142      	cbz	r2, 8009462 <__ascii_mbtowc+0x1a>
 8009450:	b14b      	cbz	r3, 8009466 <__ascii_mbtowc+0x1e>
 8009452:	7813      	ldrb	r3, [r2, #0]
 8009454:	600b      	str	r3, [r1, #0]
 8009456:	7812      	ldrb	r2, [r2, #0]
 8009458:	1e10      	subs	r0, r2, #0
 800945a:	bf18      	it	ne
 800945c:	2001      	movne	r0, #1
 800945e:	b002      	add	sp, #8
 8009460:	4770      	bx	lr
 8009462:	4610      	mov	r0, r2
 8009464:	e7fb      	b.n	800945e <__ascii_mbtowc+0x16>
 8009466:	f06f 0001 	mvn.w	r0, #1
 800946a:	e7f8      	b.n	800945e <__ascii_mbtowc+0x16>

0800946c <memchr>:
 800946c:	4603      	mov	r3, r0
 800946e:	b510      	push	{r4, lr}
 8009470:	b2c9      	uxtb	r1, r1
 8009472:	4402      	add	r2, r0
 8009474:	4293      	cmp	r3, r2
 8009476:	4618      	mov	r0, r3
 8009478:	d101      	bne.n	800947e <memchr+0x12>
 800947a:	2000      	movs	r0, #0
 800947c:	e003      	b.n	8009486 <memchr+0x1a>
 800947e:	7804      	ldrb	r4, [r0, #0]
 8009480:	3301      	adds	r3, #1
 8009482:	428c      	cmp	r4, r1
 8009484:	d1f6      	bne.n	8009474 <memchr+0x8>
 8009486:	bd10      	pop	{r4, pc}

08009488 <memcpy>:
 8009488:	440a      	add	r2, r1
 800948a:	4291      	cmp	r1, r2
 800948c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009490:	d100      	bne.n	8009494 <memcpy+0xc>
 8009492:	4770      	bx	lr
 8009494:	b510      	push	{r4, lr}
 8009496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800949a:	4291      	cmp	r1, r2
 800949c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094a0:	d1f9      	bne.n	8009496 <memcpy+0xe>
 80094a2:	bd10      	pop	{r4, pc}

080094a4 <_Balloc>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094a8:	4604      	mov	r4, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	b976      	cbnz	r6, 80094cc <_Balloc+0x28>
 80094ae:	2010      	movs	r0, #16
 80094b0:	f7ff ffc2 	bl	8009438 <malloc>
 80094b4:	4602      	mov	r2, r0
 80094b6:	6260      	str	r0, [r4, #36]	; 0x24
 80094b8:	b920      	cbnz	r0, 80094c4 <_Balloc+0x20>
 80094ba:	2166      	movs	r1, #102	; 0x66
 80094bc:	4b17      	ldr	r3, [pc, #92]	; (800951c <_Balloc+0x78>)
 80094be:	4818      	ldr	r0, [pc, #96]	; (8009520 <_Balloc+0x7c>)
 80094c0:	f000 feee 	bl	800a2a0 <__assert_func>
 80094c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094c8:	6006      	str	r6, [r0, #0]
 80094ca:	60c6      	str	r6, [r0, #12]
 80094cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094ce:	68f3      	ldr	r3, [r6, #12]
 80094d0:	b183      	cbz	r3, 80094f4 <_Balloc+0x50>
 80094d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094da:	b9b8      	cbnz	r0, 800950c <_Balloc+0x68>
 80094dc:	2101      	movs	r1, #1
 80094de:	fa01 f605 	lsl.w	r6, r1, r5
 80094e2:	1d72      	adds	r2, r6, #5
 80094e4:	4620      	mov	r0, r4
 80094e6:	0092      	lsls	r2, r2, #2
 80094e8:	f000 fc94 	bl	8009e14 <_calloc_r>
 80094ec:	b160      	cbz	r0, 8009508 <_Balloc+0x64>
 80094ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094f2:	e00e      	b.n	8009512 <_Balloc+0x6e>
 80094f4:	2221      	movs	r2, #33	; 0x21
 80094f6:	2104      	movs	r1, #4
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fc8b 	bl	8009e14 <_calloc_r>
 80094fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009500:	60f0      	str	r0, [r6, #12]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e4      	bne.n	80094d2 <_Balloc+0x2e>
 8009508:	2000      	movs	r0, #0
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	6802      	ldr	r2, [r0, #0]
 800950e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009512:	2300      	movs	r3, #0
 8009514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009518:	e7f7      	b.n	800950a <_Balloc+0x66>
 800951a:	bf00      	nop
 800951c:	0800b1c6 	.word	0x0800b1c6
 8009520:	0800b2cc 	.word	0x0800b2cc

08009524 <_Bfree>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009528:	4605      	mov	r5, r0
 800952a:	460c      	mov	r4, r1
 800952c:	b976      	cbnz	r6, 800954c <_Bfree+0x28>
 800952e:	2010      	movs	r0, #16
 8009530:	f7ff ff82 	bl	8009438 <malloc>
 8009534:	4602      	mov	r2, r0
 8009536:	6268      	str	r0, [r5, #36]	; 0x24
 8009538:	b920      	cbnz	r0, 8009544 <_Bfree+0x20>
 800953a:	218a      	movs	r1, #138	; 0x8a
 800953c:	4b08      	ldr	r3, [pc, #32]	; (8009560 <_Bfree+0x3c>)
 800953e:	4809      	ldr	r0, [pc, #36]	; (8009564 <_Bfree+0x40>)
 8009540:	f000 feae 	bl	800a2a0 <__assert_func>
 8009544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009548:	6006      	str	r6, [r0, #0]
 800954a:	60c6      	str	r6, [r0, #12]
 800954c:	b13c      	cbz	r4, 800955e <_Bfree+0x3a>
 800954e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009550:	6862      	ldr	r2, [r4, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009558:	6021      	str	r1, [r4, #0]
 800955a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	0800b1c6 	.word	0x0800b1c6
 8009564:	0800b2cc 	.word	0x0800b2cc

08009568 <__multadd>:
 8009568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956c:	4698      	mov	r8, r3
 800956e:	460c      	mov	r4, r1
 8009570:	2300      	movs	r3, #0
 8009572:	690e      	ldr	r6, [r1, #16]
 8009574:	4607      	mov	r7, r0
 8009576:	f101 0014 	add.w	r0, r1, #20
 800957a:	6805      	ldr	r5, [r0, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	b2a9      	uxth	r1, r5
 8009580:	fb02 8101 	mla	r1, r2, r1, r8
 8009584:	0c2d      	lsrs	r5, r5, #16
 8009586:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800958a:	fb02 c505 	mla	r5, r2, r5, ip
 800958e:	b289      	uxth	r1, r1
 8009590:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009594:	429e      	cmp	r6, r3
 8009596:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800959a:	f840 1b04 	str.w	r1, [r0], #4
 800959e:	dcec      	bgt.n	800957a <__multadd+0x12>
 80095a0:	f1b8 0f00 	cmp.w	r8, #0
 80095a4:	d022      	beq.n	80095ec <__multadd+0x84>
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	42b3      	cmp	r3, r6
 80095aa:	dc19      	bgt.n	80095e0 <__multadd+0x78>
 80095ac:	6861      	ldr	r1, [r4, #4]
 80095ae:	4638      	mov	r0, r7
 80095b0:	3101      	adds	r1, #1
 80095b2:	f7ff ff77 	bl	80094a4 <_Balloc>
 80095b6:	4605      	mov	r5, r0
 80095b8:	b928      	cbnz	r0, 80095c6 <__multadd+0x5e>
 80095ba:	4602      	mov	r2, r0
 80095bc:	21b5      	movs	r1, #181	; 0xb5
 80095be:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <__multadd+0x8c>)
 80095c0:	480d      	ldr	r0, [pc, #52]	; (80095f8 <__multadd+0x90>)
 80095c2:	f000 fe6d 	bl	800a2a0 <__assert_func>
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	f104 010c 	add.w	r1, r4, #12
 80095cc:	3202      	adds	r2, #2
 80095ce:	0092      	lsls	r2, r2, #2
 80095d0:	300c      	adds	r0, #12
 80095d2:	f7ff ff59 	bl	8009488 <memcpy>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff ffa3 	bl	8009524 <_Bfree>
 80095de:	462c      	mov	r4, r5
 80095e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80095e4:	3601      	adds	r6, #1
 80095e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80095ea:	6126      	str	r6, [r4, #16]
 80095ec:	4620      	mov	r0, r4
 80095ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f2:	bf00      	nop
 80095f4:	0800b23c 	.word	0x0800b23c
 80095f8:	0800b2cc 	.word	0x0800b2cc

080095fc <__s2b>:
 80095fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009600:	4615      	mov	r5, r2
 8009602:	2209      	movs	r2, #9
 8009604:	461f      	mov	r7, r3
 8009606:	3308      	adds	r3, #8
 8009608:	460c      	mov	r4, r1
 800960a:	fb93 f3f2 	sdiv	r3, r3, r2
 800960e:	4606      	mov	r6, r0
 8009610:	2201      	movs	r2, #1
 8009612:	2100      	movs	r1, #0
 8009614:	429a      	cmp	r2, r3
 8009616:	db09      	blt.n	800962c <__s2b+0x30>
 8009618:	4630      	mov	r0, r6
 800961a:	f7ff ff43 	bl	80094a4 <_Balloc>
 800961e:	b940      	cbnz	r0, 8009632 <__s2b+0x36>
 8009620:	4602      	mov	r2, r0
 8009622:	21ce      	movs	r1, #206	; 0xce
 8009624:	4b18      	ldr	r3, [pc, #96]	; (8009688 <__s2b+0x8c>)
 8009626:	4819      	ldr	r0, [pc, #100]	; (800968c <__s2b+0x90>)
 8009628:	f000 fe3a 	bl	800a2a0 <__assert_func>
 800962c:	0052      	lsls	r2, r2, #1
 800962e:	3101      	adds	r1, #1
 8009630:	e7f0      	b.n	8009614 <__s2b+0x18>
 8009632:	9b08      	ldr	r3, [sp, #32]
 8009634:	2d09      	cmp	r5, #9
 8009636:	6143      	str	r3, [r0, #20]
 8009638:	f04f 0301 	mov.w	r3, #1
 800963c:	6103      	str	r3, [r0, #16]
 800963e:	dd16      	ble.n	800966e <__s2b+0x72>
 8009640:	f104 0909 	add.w	r9, r4, #9
 8009644:	46c8      	mov	r8, r9
 8009646:	442c      	add	r4, r5
 8009648:	f818 3b01 	ldrb.w	r3, [r8], #1
 800964c:	4601      	mov	r1, r0
 800964e:	220a      	movs	r2, #10
 8009650:	4630      	mov	r0, r6
 8009652:	3b30      	subs	r3, #48	; 0x30
 8009654:	f7ff ff88 	bl	8009568 <__multadd>
 8009658:	45a0      	cmp	r8, r4
 800965a:	d1f5      	bne.n	8009648 <__s2b+0x4c>
 800965c:	f1a5 0408 	sub.w	r4, r5, #8
 8009660:	444c      	add	r4, r9
 8009662:	1b2d      	subs	r5, r5, r4
 8009664:	1963      	adds	r3, r4, r5
 8009666:	42bb      	cmp	r3, r7
 8009668:	db04      	blt.n	8009674 <__s2b+0x78>
 800966a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966e:	2509      	movs	r5, #9
 8009670:	340a      	adds	r4, #10
 8009672:	e7f6      	b.n	8009662 <__s2b+0x66>
 8009674:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009678:	4601      	mov	r1, r0
 800967a:	220a      	movs	r2, #10
 800967c:	4630      	mov	r0, r6
 800967e:	3b30      	subs	r3, #48	; 0x30
 8009680:	f7ff ff72 	bl	8009568 <__multadd>
 8009684:	e7ee      	b.n	8009664 <__s2b+0x68>
 8009686:	bf00      	nop
 8009688:	0800b23c 	.word	0x0800b23c
 800968c:	0800b2cc 	.word	0x0800b2cc

08009690 <__hi0bits>:
 8009690:	0c02      	lsrs	r2, r0, #16
 8009692:	0412      	lsls	r2, r2, #16
 8009694:	4603      	mov	r3, r0
 8009696:	b9ca      	cbnz	r2, 80096cc <__hi0bits+0x3c>
 8009698:	0403      	lsls	r3, r0, #16
 800969a:	2010      	movs	r0, #16
 800969c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80096a0:	bf04      	itt	eq
 80096a2:	021b      	lsleq	r3, r3, #8
 80096a4:	3008      	addeq	r0, #8
 80096a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80096aa:	bf04      	itt	eq
 80096ac:	011b      	lsleq	r3, r3, #4
 80096ae:	3004      	addeq	r0, #4
 80096b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80096b4:	bf04      	itt	eq
 80096b6:	009b      	lsleq	r3, r3, #2
 80096b8:	3002      	addeq	r0, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	db05      	blt.n	80096ca <__hi0bits+0x3a>
 80096be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80096c2:	f100 0001 	add.w	r0, r0, #1
 80096c6:	bf08      	it	eq
 80096c8:	2020      	moveq	r0, #32
 80096ca:	4770      	bx	lr
 80096cc:	2000      	movs	r0, #0
 80096ce:	e7e5      	b.n	800969c <__hi0bits+0xc>

080096d0 <__lo0bits>:
 80096d0:	6803      	ldr	r3, [r0, #0]
 80096d2:	4602      	mov	r2, r0
 80096d4:	f013 0007 	ands.w	r0, r3, #7
 80096d8:	d00b      	beq.n	80096f2 <__lo0bits+0x22>
 80096da:	07d9      	lsls	r1, r3, #31
 80096dc:	d422      	bmi.n	8009724 <__lo0bits+0x54>
 80096de:	0798      	lsls	r0, r3, #30
 80096e0:	bf49      	itett	mi
 80096e2:	085b      	lsrmi	r3, r3, #1
 80096e4:	089b      	lsrpl	r3, r3, #2
 80096e6:	2001      	movmi	r0, #1
 80096e8:	6013      	strmi	r3, [r2, #0]
 80096ea:	bf5c      	itt	pl
 80096ec:	2002      	movpl	r0, #2
 80096ee:	6013      	strpl	r3, [r2, #0]
 80096f0:	4770      	bx	lr
 80096f2:	b299      	uxth	r1, r3
 80096f4:	b909      	cbnz	r1, 80096fa <__lo0bits+0x2a>
 80096f6:	2010      	movs	r0, #16
 80096f8:	0c1b      	lsrs	r3, r3, #16
 80096fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096fe:	bf04      	itt	eq
 8009700:	0a1b      	lsreq	r3, r3, #8
 8009702:	3008      	addeq	r0, #8
 8009704:	0719      	lsls	r1, r3, #28
 8009706:	bf04      	itt	eq
 8009708:	091b      	lsreq	r3, r3, #4
 800970a:	3004      	addeq	r0, #4
 800970c:	0799      	lsls	r1, r3, #30
 800970e:	bf04      	itt	eq
 8009710:	089b      	lsreq	r3, r3, #2
 8009712:	3002      	addeq	r0, #2
 8009714:	07d9      	lsls	r1, r3, #31
 8009716:	d403      	bmi.n	8009720 <__lo0bits+0x50>
 8009718:	085b      	lsrs	r3, r3, #1
 800971a:	f100 0001 	add.w	r0, r0, #1
 800971e:	d003      	beq.n	8009728 <__lo0bits+0x58>
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	4770      	bx	lr
 8009724:	2000      	movs	r0, #0
 8009726:	4770      	bx	lr
 8009728:	2020      	movs	r0, #32
 800972a:	4770      	bx	lr

0800972c <__i2b>:
 800972c:	b510      	push	{r4, lr}
 800972e:	460c      	mov	r4, r1
 8009730:	2101      	movs	r1, #1
 8009732:	f7ff feb7 	bl	80094a4 <_Balloc>
 8009736:	4602      	mov	r2, r0
 8009738:	b928      	cbnz	r0, 8009746 <__i2b+0x1a>
 800973a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <__i2b+0x24>)
 8009740:	4804      	ldr	r0, [pc, #16]	; (8009754 <__i2b+0x28>)
 8009742:	f000 fdad 	bl	800a2a0 <__assert_func>
 8009746:	2301      	movs	r3, #1
 8009748:	6144      	str	r4, [r0, #20]
 800974a:	6103      	str	r3, [r0, #16]
 800974c:	bd10      	pop	{r4, pc}
 800974e:	bf00      	nop
 8009750:	0800b23c 	.word	0x0800b23c
 8009754:	0800b2cc 	.word	0x0800b2cc

08009758 <__multiply>:
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	4614      	mov	r4, r2
 800975e:	690a      	ldr	r2, [r1, #16]
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	460d      	mov	r5, r1
 8009764:	429a      	cmp	r2, r3
 8009766:	bfbe      	ittt	lt
 8009768:	460b      	movlt	r3, r1
 800976a:	4625      	movlt	r5, r4
 800976c:	461c      	movlt	r4, r3
 800976e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009772:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009776:	68ab      	ldr	r3, [r5, #8]
 8009778:	6869      	ldr	r1, [r5, #4]
 800977a:	eb0a 0709 	add.w	r7, sl, r9
 800977e:	42bb      	cmp	r3, r7
 8009780:	b085      	sub	sp, #20
 8009782:	bfb8      	it	lt
 8009784:	3101      	addlt	r1, #1
 8009786:	f7ff fe8d 	bl	80094a4 <_Balloc>
 800978a:	b930      	cbnz	r0, 800979a <__multiply+0x42>
 800978c:	4602      	mov	r2, r0
 800978e:	f240 115d 	movw	r1, #349	; 0x15d
 8009792:	4b41      	ldr	r3, [pc, #260]	; (8009898 <__multiply+0x140>)
 8009794:	4841      	ldr	r0, [pc, #260]	; (800989c <__multiply+0x144>)
 8009796:	f000 fd83 	bl	800a2a0 <__assert_func>
 800979a:	f100 0614 	add.w	r6, r0, #20
 800979e:	4633      	mov	r3, r6
 80097a0:	2200      	movs	r2, #0
 80097a2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80097a6:	4543      	cmp	r3, r8
 80097a8:	d31e      	bcc.n	80097e8 <__multiply+0x90>
 80097aa:	f105 0c14 	add.w	ip, r5, #20
 80097ae:	f104 0314 	add.w	r3, r4, #20
 80097b2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80097b6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80097ba:	9202      	str	r2, [sp, #8]
 80097bc:	ebac 0205 	sub.w	r2, ip, r5
 80097c0:	3a15      	subs	r2, #21
 80097c2:	f022 0203 	bic.w	r2, r2, #3
 80097c6:	3204      	adds	r2, #4
 80097c8:	f105 0115 	add.w	r1, r5, #21
 80097cc:	458c      	cmp	ip, r1
 80097ce:	bf38      	it	cc
 80097d0:	2204      	movcc	r2, #4
 80097d2:	9201      	str	r2, [sp, #4]
 80097d4:	9a02      	ldr	r2, [sp, #8]
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d808      	bhi.n	80097ee <__multiply+0x96>
 80097dc:	2f00      	cmp	r7, #0
 80097de:	dc55      	bgt.n	800988c <__multiply+0x134>
 80097e0:	6107      	str	r7, [r0, #16]
 80097e2:	b005      	add	sp, #20
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	f843 2b04 	str.w	r2, [r3], #4
 80097ec:	e7db      	b.n	80097a6 <__multiply+0x4e>
 80097ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80097f2:	f1ba 0f00 	cmp.w	sl, #0
 80097f6:	d020      	beq.n	800983a <__multiply+0xe2>
 80097f8:	46b1      	mov	r9, r6
 80097fa:	2200      	movs	r2, #0
 80097fc:	f105 0e14 	add.w	lr, r5, #20
 8009800:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009804:	f8d9 b000 	ldr.w	fp, [r9]
 8009808:	b2a1      	uxth	r1, r4
 800980a:	fa1f fb8b 	uxth.w	fp, fp
 800980e:	fb0a b101 	mla	r1, sl, r1, fp
 8009812:	4411      	add	r1, r2
 8009814:	f8d9 2000 	ldr.w	r2, [r9]
 8009818:	0c24      	lsrs	r4, r4, #16
 800981a:	0c12      	lsrs	r2, r2, #16
 800981c:	fb0a 2404 	mla	r4, sl, r4, r2
 8009820:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009824:	b289      	uxth	r1, r1
 8009826:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800982a:	45f4      	cmp	ip, lr
 800982c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009830:	f849 1b04 	str.w	r1, [r9], #4
 8009834:	d8e4      	bhi.n	8009800 <__multiply+0xa8>
 8009836:	9901      	ldr	r1, [sp, #4]
 8009838:	5072      	str	r2, [r6, r1]
 800983a:	9a03      	ldr	r2, [sp, #12]
 800983c:	3304      	adds	r3, #4
 800983e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009842:	f1b9 0f00 	cmp.w	r9, #0
 8009846:	d01f      	beq.n	8009888 <__multiply+0x130>
 8009848:	46b6      	mov	lr, r6
 800984a:	f04f 0a00 	mov.w	sl, #0
 800984e:	6834      	ldr	r4, [r6, #0]
 8009850:	f105 0114 	add.w	r1, r5, #20
 8009854:	880a      	ldrh	r2, [r1, #0]
 8009856:	f8be b002 	ldrh.w	fp, [lr, #2]
 800985a:	b2a4      	uxth	r4, r4
 800985c:	fb09 b202 	mla	r2, r9, r2, fp
 8009860:	4492      	add	sl, r2
 8009862:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009866:	f84e 4b04 	str.w	r4, [lr], #4
 800986a:	f851 4b04 	ldr.w	r4, [r1], #4
 800986e:	f8be 2000 	ldrh.w	r2, [lr]
 8009872:	0c24      	lsrs	r4, r4, #16
 8009874:	fb09 2404 	mla	r4, r9, r4, r2
 8009878:	458c      	cmp	ip, r1
 800987a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800987e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009882:	d8e7      	bhi.n	8009854 <__multiply+0xfc>
 8009884:	9a01      	ldr	r2, [sp, #4]
 8009886:	50b4      	str	r4, [r6, r2]
 8009888:	3604      	adds	r6, #4
 800988a:	e7a3      	b.n	80097d4 <__multiply+0x7c>
 800988c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1a5      	bne.n	80097e0 <__multiply+0x88>
 8009894:	3f01      	subs	r7, #1
 8009896:	e7a1      	b.n	80097dc <__multiply+0x84>
 8009898:	0800b23c 	.word	0x0800b23c
 800989c:	0800b2cc 	.word	0x0800b2cc

080098a0 <__pow5mult>:
 80098a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a4:	4615      	mov	r5, r2
 80098a6:	f012 0203 	ands.w	r2, r2, #3
 80098aa:	4606      	mov	r6, r0
 80098ac:	460f      	mov	r7, r1
 80098ae:	d007      	beq.n	80098c0 <__pow5mult+0x20>
 80098b0:	4c25      	ldr	r4, [pc, #148]	; (8009948 <__pow5mult+0xa8>)
 80098b2:	3a01      	subs	r2, #1
 80098b4:	2300      	movs	r3, #0
 80098b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098ba:	f7ff fe55 	bl	8009568 <__multadd>
 80098be:	4607      	mov	r7, r0
 80098c0:	10ad      	asrs	r5, r5, #2
 80098c2:	d03d      	beq.n	8009940 <__pow5mult+0xa0>
 80098c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098c6:	b97c      	cbnz	r4, 80098e8 <__pow5mult+0x48>
 80098c8:	2010      	movs	r0, #16
 80098ca:	f7ff fdb5 	bl	8009438 <malloc>
 80098ce:	4602      	mov	r2, r0
 80098d0:	6270      	str	r0, [r6, #36]	; 0x24
 80098d2:	b928      	cbnz	r0, 80098e0 <__pow5mult+0x40>
 80098d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80098d8:	4b1c      	ldr	r3, [pc, #112]	; (800994c <__pow5mult+0xac>)
 80098da:	481d      	ldr	r0, [pc, #116]	; (8009950 <__pow5mult+0xb0>)
 80098dc:	f000 fce0 	bl	800a2a0 <__assert_func>
 80098e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098e4:	6004      	str	r4, [r0, #0]
 80098e6:	60c4      	str	r4, [r0, #12]
 80098e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098f0:	b94c      	cbnz	r4, 8009906 <__pow5mult+0x66>
 80098f2:	f240 2171 	movw	r1, #625	; 0x271
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ff18 	bl	800972c <__i2b>
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	f8c8 0008 	str.w	r0, [r8, #8]
 8009904:	6003      	str	r3, [r0, #0]
 8009906:	f04f 0900 	mov.w	r9, #0
 800990a:	07eb      	lsls	r3, r5, #31
 800990c:	d50a      	bpl.n	8009924 <__pow5mult+0x84>
 800990e:	4639      	mov	r1, r7
 8009910:	4622      	mov	r2, r4
 8009912:	4630      	mov	r0, r6
 8009914:	f7ff ff20 	bl	8009758 <__multiply>
 8009918:	4680      	mov	r8, r0
 800991a:	4639      	mov	r1, r7
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff fe01 	bl	8009524 <_Bfree>
 8009922:	4647      	mov	r7, r8
 8009924:	106d      	asrs	r5, r5, #1
 8009926:	d00b      	beq.n	8009940 <__pow5mult+0xa0>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	b938      	cbnz	r0, 800993c <__pow5mult+0x9c>
 800992c:	4622      	mov	r2, r4
 800992e:	4621      	mov	r1, r4
 8009930:	4630      	mov	r0, r6
 8009932:	f7ff ff11 	bl	8009758 <__multiply>
 8009936:	6020      	str	r0, [r4, #0]
 8009938:	f8c0 9000 	str.w	r9, [r0]
 800993c:	4604      	mov	r4, r0
 800993e:	e7e4      	b.n	800990a <__pow5mult+0x6a>
 8009940:	4638      	mov	r0, r7
 8009942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009946:	bf00      	nop
 8009948:	0800b420 	.word	0x0800b420
 800994c:	0800b1c6 	.word	0x0800b1c6
 8009950:	0800b2cc 	.word	0x0800b2cc

08009954 <__lshift>:
 8009954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009958:	460c      	mov	r4, r1
 800995a:	4607      	mov	r7, r0
 800995c:	4691      	mov	r9, r2
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	6849      	ldr	r1, [r1, #4]
 8009962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800996c:	f108 0601 	add.w	r6, r8, #1
 8009970:	42b3      	cmp	r3, r6
 8009972:	db0b      	blt.n	800998c <__lshift+0x38>
 8009974:	4638      	mov	r0, r7
 8009976:	f7ff fd95 	bl	80094a4 <_Balloc>
 800997a:	4605      	mov	r5, r0
 800997c:	b948      	cbnz	r0, 8009992 <__lshift+0x3e>
 800997e:	4602      	mov	r2, r0
 8009980:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009984:	4b27      	ldr	r3, [pc, #156]	; (8009a24 <__lshift+0xd0>)
 8009986:	4828      	ldr	r0, [pc, #160]	; (8009a28 <__lshift+0xd4>)
 8009988:	f000 fc8a 	bl	800a2a0 <__assert_func>
 800998c:	3101      	adds	r1, #1
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	e7ee      	b.n	8009970 <__lshift+0x1c>
 8009992:	2300      	movs	r3, #0
 8009994:	f100 0114 	add.w	r1, r0, #20
 8009998:	f100 0210 	add.w	r2, r0, #16
 800999c:	4618      	mov	r0, r3
 800999e:	4553      	cmp	r3, sl
 80099a0:	db33      	blt.n	8009a0a <__lshift+0xb6>
 80099a2:	6920      	ldr	r0, [r4, #16]
 80099a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099a8:	f104 0314 	add.w	r3, r4, #20
 80099ac:	f019 091f 	ands.w	r9, r9, #31
 80099b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099b8:	d02b      	beq.n	8009a12 <__lshift+0xbe>
 80099ba:	468a      	mov	sl, r1
 80099bc:	2200      	movs	r2, #0
 80099be:	f1c9 0e20 	rsb	lr, r9, #32
 80099c2:	6818      	ldr	r0, [r3, #0]
 80099c4:	fa00 f009 	lsl.w	r0, r0, r9
 80099c8:	4302      	orrs	r2, r0
 80099ca:	f84a 2b04 	str.w	r2, [sl], #4
 80099ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d2:	459c      	cmp	ip, r3
 80099d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80099d8:	d8f3      	bhi.n	80099c2 <__lshift+0x6e>
 80099da:	ebac 0304 	sub.w	r3, ip, r4
 80099de:	3b15      	subs	r3, #21
 80099e0:	f023 0303 	bic.w	r3, r3, #3
 80099e4:	3304      	adds	r3, #4
 80099e6:	f104 0015 	add.w	r0, r4, #21
 80099ea:	4584      	cmp	ip, r0
 80099ec:	bf38      	it	cc
 80099ee:	2304      	movcc	r3, #4
 80099f0:	50ca      	str	r2, [r1, r3]
 80099f2:	b10a      	cbz	r2, 80099f8 <__lshift+0xa4>
 80099f4:	f108 0602 	add.w	r6, r8, #2
 80099f8:	3e01      	subs	r6, #1
 80099fa:	4638      	mov	r0, r7
 80099fc:	4621      	mov	r1, r4
 80099fe:	612e      	str	r6, [r5, #16]
 8009a00:	f7ff fd90 	bl	8009524 <_Bfree>
 8009a04:	4628      	mov	r0, r5
 8009a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a0e:	3301      	adds	r3, #1
 8009a10:	e7c5      	b.n	800999e <__lshift+0x4a>
 8009a12:	3904      	subs	r1, #4
 8009a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a18:	459c      	cmp	ip, r3
 8009a1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a1e:	d8f9      	bhi.n	8009a14 <__lshift+0xc0>
 8009a20:	e7ea      	b.n	80099f8 <__lshift+0xa4>
 8009a22:	bf00      	nop
 8009a24:	0800b23c 	.word	0x0800b23c
 8009a28:	0800b2cc 	.word	0x0800b2cc

08009a2c <__mcmp>:
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	690a      	ldr	r2, [r1, #16]
 8009a30:	6900      	ldr	r0, [r0, #16]
 8009a32:	b530      	push	{r4, r5, lr}
 8009a34:	1a80      	subs	r0, r0, r2
 8009a36:	d10d      	bne.n	8009a54 <__mcmp+0x28>
 8009a38:	3314      	adds	r3, #20
 8009a3a:	3114      	adds	r1, #20
 8009a3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a4c:	4295      	cmp	r5, r2
 8009a4e:	d002      	beq.n	8009a56 <__mcmp+0x2a>
 8009a50:	d304      	bcc.n	8009a5c <__mcmp+0x30>
 8009a52:	2001      	movs	r0, #1
 8009a54:	bd30      	pop	{r4, r5, pc}
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	d3f4      	bcc.n	8009a44 <__mcmp+0x18>
 8009a5a:	e7fb      	b.n	8009a54 <__mcmp+0x28>
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e7f8      	b.n	8009a54 <__mcmp+0x28>
	...

08009a64 <__mdiff>:
 8009a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	460c      	mov	r4, r1
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4692      	mov	sl, r2
 8009a72:	f7ff ffdb 	bl	8009a2c <__mcmp>
 8009a76:	1e05      	subs	r5, r0, #0
 8009a78:	d111      	bne.n	8009a9e <__mdiff+0x3a>
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7ff fd11 	bl	80094a4 <_Balloc>
 8009a82:	4602      	mov	r2, r0
 8009a84:	b928      	cbnz	r0, 8009a92 <__mdiff+0x2e>
 8009a86:	f240 2132 	movw	r1, #562	; 0x232
 8009a8a:	4b3c      	ldr	r3, [pc, #240]	; (8009b7c <__mdiff+0x118>)
 8009a8c:	483c      	ldr	r0, [pc, #240]	; (8009b80 <__mdiff+0x11c>)
 8009a8e:	f000 fc07 	bl	800a2a0 <__assert_func>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a98:	4610      	mov	r0, r2
 8009a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9e:	bfa4      	itt	ge
 8009aa0:	4653      	movge	r3, sl
 8009aa2:	46a2      	movge	sl, r4
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009aaa:	bfa6      	itte	ge
 8009aac:	461c      	movge	r4, r3
 8009aae:	2500      	movge	r5, #0
 8009ab0:	2501      	movlt	r5, #1
 8009ab2:	f7ff fcf7 	bl	80094a4 <_Balloc>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	b918      	cbnz	r0, 8009ac2 <__mdiff+0x5e>
 8009aba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009abe:	4b2f      	ldr	r3, [pc, #188]	; (8009b7c <__mdiff+0x118>)
 8009ac0:	e7e4      	b.n	8009a8c <__mdiff+0x28>
 8009ac2:	f100 0814 	add.w	r8, r0, #20
 8009ac6:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009aca:	60c5      	str	r5, [r0, #12]
 8009acc:	f04f 0c00 	mov.w	ip, #0
 8009ad0:	f10a 0514 	add.w	r5, sl, #20
 8009ad4:	f10a 0010 	add.w	r0, sl, #16
 8009ad8:	46c2      	mov	sl, r8
 8009ada:	6926      	ldr	r6, [r4, #16]
 8009adc:	f104 0914 	add.w	r9, r4, #20
 8009ae0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009ae4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ae8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009aec:	f859 3b04 	ldr.w	r3, [r9], #4
 8009af0:	fa1f f18b 	uxth.w	r1, fp
 8009af4:	4461      	add	r1, ip
 8009af6:	fa1f fc83 	uxth.w	ip, r3
 8009afa:	0c1b      	lsrs	r3, r3, #16
 8009afc:	eba1 010c 	sub.w	r1, r1, ip
 8009b00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b04:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b08:	b289      	uxth	r1, r1
 8009b0a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009b0e:	454e      	cmp	r6, r9
 8009b10:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b14:	f84a 3b04 	str.w	r3, [sl], #4
 8009b18:	d8e6      	bhi.n	8009ae8 <__mdiff+0x84>
 8009b1a:	1b33      	subs	r3, r6, r4
 8009b1c:	3b15      	subs	r3, #21
 8009b1e:	f023 0303 	bic.w	r3, r3, #3
 8009b22:	3415      	adds	r4, #21
 8009b24:	3304      	adds	r3, #4
 8009b26:	42a6      	cmp	r6, r4
 8009b28:	bf38      	it	cc
 8009b2a:	2304      	movcc	r3, #4
 8009b2c:	441d      	add	r5, r3
 8009b2e:	4443      	add	r3, r8
 8009b30:	461e      	mov	r6, r3
 8009b32:	462c      	mov	r4, r5
 8009b34:	4574      	cmp	r4, lr
 8009b36:	d30e      	bcc.n	8009b56 <__mdiff+0xf2>
 8009b38:	f10e 0103 	add.w	r1, lr, #3
 8009b3c:	1b49      	subs	r1, r1, r5
 8009b3e:	f021 0103 	bic.w	r1, r1, #3
 8009b42:	3d03      	subs	r5, #3
 8009b44:	45ae      	cmp	lr, r5
 8009b46:	bf38      	it	cc
 8009b48:	2100      	movcc	r1, #0
 8009b4a:	4419      	add	r1, r3
 8009b4c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009b50:	b18b      	cbz	r3, 8009b76 <__mdiff+0x112>
 8009b52:	6117      	str	r7, [r2, #16]
 8009b54:	e7a0      	b.n	8009a98 <__mdiff+0x34>
 8009b56:	f854 8b04 	ldr.w	r8, [r4], #4
 8009b5a:	fa1f f188 	uxth.w	r1, r8
 8009b5e:	4461      	add	r1, ip
 8009b60:	1408      	asrs	r0, r1, #16
 8009b62:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009b66:	b289      	uxth	r1, r1
 8009b68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b70:	f846 1b04 	str.w	r1, [r6], #4
 8009b74:	e7de      	b.n	8009b34 <__mdiff+0xd0>
 8009b76:	3f01      	subs	r7, #1
 8009b78:	e7e8      	b.n	8009b4c <__mdiff+0xe8>
 8009b7a:	bf00      	nop
 8009b7c:	0800b23c 	.word	0x0800b23c
 8009b80:	0800b2cc 	.word	0x0800b2cc

08009b84 <__ulp>:
 8009b84:	4b11      	ldr	r3, [pc, #68]	; (8009bcc <__ulp+0x48>)
 8009b86:	400b      	ands	r3, r1
 8009b88:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dd02      	ble.n	8009b96 <__ulp+0x12>
 8009b90:	2000      	movs	r0, #0
 8009b92:	4619      	mov	r1, r3
 8009b94:	4770      	bx	lr
 8009b96:	425b      	negs	r3, r3
 8009b98:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009b9c:	f04f 0000 	mov.w	r0, #0
 8009ba0:	f04f 0100 	mov.w	r1, #0
 8009ba4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ba8:	da04      	bge.n	8009bb4 <__ulp+0x30>
 8009baa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009bae:	fa43 f102 	asr.w	r1, r3, r2
 8009bb2:	4770      	bx	lr
 8009bb4:	f1a2 0314 	sub.w	r3, r2, #20
 8009bb8:	2b1e      	cmp	r3, #30
 8009bba:	bfd6      	itet	le
 8009bbc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009bc0:	2301      	movgt	r3, #1
 8009bc2:	fa22 f303 	lsrle.w	r3, r2, r3
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	7ff00000 	.word	0x7ff00000

08009bd0 <__b2d>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	6907      	ldr	r7, [r0, #16]
 8009bd6:	f100 0914 	add.w	r9, r0, #20
 8009bda:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009bde:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009be2:	f1a7 0804 	sub.w	r8, r7, #4
 8009be6:	4630      	mov	r0, r6
 8009be8:	f7ff fd52 	bl	8009690 <__hi0bits>
 8009bec:	f1c0 0320 	rsb	r3, r0, #32
 8009bf0:	280a      	cmp	r0, #10
 8009bf2:	600b      	str	r3, [r1, #0]
 8009bf4:	491f      	ldr	r1, [pc, #124]	; (8009c74 <__b2d+0xa4>)
 8009bf6:	dc17      	bgt.n	8009c28 <__b2d+0x58>
 8009bf8:	45c1      	cmp	r9, r8
 8009bfa:	bf28      	it	cs
 8009bfc:	2200      	movcs	r2, #0
 8009bfe:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c02:	fa26 f30c 	lsr.w	r3, r6, ip
 8009c06:	bf38      	it	cc
 8009c08:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009c0c:	ea43 0501 	orr.w	r5, r3, r1
 8009c10:	f100 0315 	add.w	r3, r0, #21
 8009c14:	fa06 f303 	lsl.w	r3, r6, r3
 8009c18:	fa22 f20c 	lsr.w	r2, r2, ip
 8009c1c:	ea43 0402 	orr.w	r4, r3, r2
 8009c20:	4620      	mov	r0, r4
 8009c22:	4629      	mov	r1, r5
 8009c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c28:	45c1      	cmp	r9, r8
 8009c2a:	bf2e      	itee	cs
 8009c2c:	2200      	movcs	r2, #0
 8009c2e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009c32:	f1a7 0808 	subcc.w	r8, r7, #8
 8009c36:	f1b0 030b 	subs.w	r3, r0, #11
 8009c3a:	d016      	beq.n	8009c6a <__b2d+0x9a>
 8009c3c:	f1c3 0720 	rsb	r7, r3, #32
 8009c40:	fa22 f107 	lsr.w	r1, r2, r7
 8009c44:	45c8      	cmp	r8, r9
 8009c46:	fa06 f603 	lsl.w	r6, r6, r3
 8009c4a:	ea46 0601 	orr.w	r6, r6, r1
 8009c4e:	bf94      	ite	ls
 8009c50:	2100      	movls	r1, #0
 8009c52:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009c56:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009c5a:	fa02 f003 	lsl.w	r0, r2, r3
 8009c5e:	40f9      	lsrs	r1, r7
 8009c60:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c64:	ea40 0401 	orr.w	r4, r0, r1
 8009c68:	e7da      	b.n	8009c20 <__b2d+0x50>
 8009c6a:	4614      	mov	r4, r2
 8009c6c:	ea46 0501 	orr.w	r5, r6, r1
 8009c70:	e7d6      	b.n	8009c20 <__b2d+0x50>
 8009c72:	bf00      	nop
 8009c74:	3ff00000 	.word	0x3ff00000

08009c78 <__d2b>:
 8009c78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009c82:	4690      	mov	r8, r2
 8009c84:	461d      	mov	r5, r3
 8009c86:	f7ff fc0d 	bl	80094a4 <_Balloc>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	b930      	cbnz	r0, 8009c9c <__d2b+0x24>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	f240 310a 	movw	r1, #778	; 0x30a
 8009c94:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <__d2b+0xb0>)
 8009c96:	4825      	ldr	r0, [pc, #148]	; (8009d2c <__d2b+0xb4>)
 8009c98:	f000 fb02 	bl	800a2a0 <__assert_func>
 8009c9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009ca0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009ca4:	bb2d      	cbnz	r5, 8009cf2 <__d2b+0x7a>
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	f1b8 0300 	subs.w	r3, r8, #0
 8009cac:	d026      	beq.n	8009cfc <__d2b+0x84>
 8009cae:	4668      	mov	r0, sp
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	f7ff fd0d 	bl	80096d0 <__lo0bits>
 8009cb6:	9900      	ldr	r1, [sp, #0]
 8009cb8:	b1f0      	cbz	r0, 8009cf8 <__d2b+0x80>
 8009cba:	9a01      	ldr	r2, [sp, #4]
 8009cbc:	f1c0 0320 	rsb	r3, r0, #32
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	40c2      	lsrs	r2, r0
 8009cc8:	6163      	str	r3, [r4, #20]
 8009cca:	9201      	str	r2, [sp, #4]
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bf14      	ite	ne
 8009cd2:	2102      	movne	r1, #2
 8009cd4:	2101      	moveq	r1, #1
 8009cd6:	61a3      	str	r3, [r4, #24]
 8009cd8:	6121      	str	r1, [r4, #16]
 8009cda:	b1c5      	cbz	r5, 8009d0e <__d2b+0x96>
 8009cdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ce0:	4405      	add	r5, r0
 8009ce2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ce6:	603d      	str	r5, [r7, #0]
 8009ce8:	6030      	str	r0, [r6, #0]
 8009cea:	4620      	mov	r0, r4
 8009cec:	b002      	add	sp, #8
 8009cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cf6:	e7d6      	b.n	8009ca6 <__d2b+0x2e>
 8009cf8:	6161      	str	r1, [r4, #20]
 8009cfa:	e7e7      	b.n	8009ccc <__d2b+0x54>
 8009cfc:	a801      	add	r0, sp, #4
 8009cfe:	f7ff fce7 	bl	80096d0 <__lo0bits>
 8009d02:	2101      	movs	r1, #1
 8009d04:	9b01      	ldr	r3, [sp, #4]
 8009d06:	6121      	str	r1, [r4, #16]
 8009d08:	6163      	str	r3, [r4, #20]
 8009d0a:	3020      	adds	r0, #32
 8009d0c:	e7e5      	b.n	8009cda <__d2b+0x62>
 8009d0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009d12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d16:	6038      	str	r0, [r7, #0]
 8009d18:	6918      	ldr	r0, [r3, #16]
 8009d1a:	f7ff fcb9 	bl	8009690 <__hi0bits>
 8009d1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009d22:	6031      	str	r1, [r6, #0]
 8009d24:	e7e1      	b.n	8009cea <__d2b+0x72>
 8009d26:	bf00      	nop
 8009d28:	0800b23c 	.word	0x0800b23c
 8009d2c:	0800b2cc 	.word	0x0800b2cc

08009d30 <__ratio>:
 8009d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d34:	4688      	mov	r8, r1
 8009d36:	4669      	mov	r1, sp
 8009d38:	4681      	mov	r9, r0
 8009d3a:	f7ff ff49 	bl	8009bd0 <__b2d>
 8009d3e:	460f      	mov	r7, r1
 8009d40:	4604      	mov	r4, r0
 8009d42:	460d      	mov	r5, r1
 8009d44:	4640      	mov	r0, r8
 8009d46:	a901      	add	r1, sp, #4
 8009d48:	f7ff ff42 	bl	8009bd0 <__b2d>
 8009d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d54:	468b      	mov	fp, r1
 8009d56:	eba3 0c02 	sub.w	ip, r3, r2
 8009d5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bfd5      	itete	le
 8009d68:	460a      	movle	r2, r1
 8009d6a:	462a      	movgt	r2, r5
 8009d6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d70:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d74:	bfd8      	it	le
 8009d76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d7a:	465b      	mov	r3, fp
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	4639      	mov	r1, r7
 8009d80:	4620      	mov	r0, r4
 8009d82:	f7f6 fcd3 	bl	800072c <__aeabi_ddiv>
 8009d86:	b003      	add	sp, #12
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d8c <__copybits>:
 8009d8c:	3901      	subs	r1, #1
 8009d8e:	b570      	push	{r4, r5, r6, lr}
 8009d90:	1149      	asrs	r1, r1, #5
 8009d92:	6914      	ldr	r4, [r2, #16]
 8009d94:	3101      	adds	r1, #1
 8009d96:	f102 0314 	add.w	r3, r2, #20
 8009d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009da2:	1f05      	subs	r5, r0, #4
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	d30c      	bcc.n	8009dc2 <__copybits+0x36>
 8009da8:	1aa3      	subs	r3, r4, r2
 8009daa:	3b11      	subs	r3, #17
 8009dac:	f023 0303 	bic.w	r3, r3, #3
 8009db0:	3211      	adds	r2, #17
 8009db2:	42a2      	cmp	r2, r4
 8009db4:	bf88      	it	hi
 8009db6:	2300      	movhi	r3, #0
 8009db8:	4418      	add	r0, r3
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4288      	cmp	r0, r1
 8009dbe:	d305      	bcc.n	8009dcc <__copybits+0x40>
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dca:	e7eb      	b.n	8009da4 <__copybits+0x18>
 8009dcc:	f840 3b04 	str.w	r3, [r0], #4
 8009dd0:	e7f4      	b.n	8009dbc <__copybits+0x30>

08009dd2 <__any_on>:
 8009dd2:	f100 0214 	add.w	r2, r0, #20
 8009dd6:	6900      	ldr	r0, [r0, #16]
 8009dd8:	114b      	asrs	r3, r1, #5
 8009dda:	4298      	cmp	r0, r3
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	db11      	blt.n	8009e04 <__any_on+0x32>
 8009de0:	dd0a      	ble.n	8009df8 <__any_on+0x26>
 8009de2:	f011 011f 	ands.w	r1, r1, #31
 8009de6:	d007      	beq.n	8009df8 <__any_on+0x26>
 8009de8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009dec:	fa24 f001 	lsr.w	r0, r4, r1
 8009df0:	fa00 f101 	lsl.w	r1, r0, r1
 8009df4:	428c      	cmp	r4, r1
 8009df6:	d10b      	bne.n	8009e10 <__any_on+0x3e>
 8009df8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d803      	bhi.n	8009e08 <__any_on+0x36>
 8009e00:	2000      	movs	r0, #0
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	4603      	mov	r3, r0
 8009e06:	e7f7      	b.n	8009df8 <__any_on+0x26>
 8009e08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d0f5      	beq.n	8009dfc <__any_on+0x2a>
 8009e10:	2001      	movs	r0, #1
 8009e12:	e7f6      	b.n	8009e02 <__any_on+0x30>

08009e14 <_calloc_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	fb02 f501 	mul.w	r5, r2, r1
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	f000 f854 	bl	8009ec8 <_malloc_r>
 8009e20:	4604      	mov	r4, r0
 8009e22:	b118      	cbz	r0, 8009e2c <_calloc_r+0x18>
 8009e24:	462a      	mov	r2, r5
 8009e26:	2100      	movs	r1, #0
 8009e28:	f7fc fbde 	bl	80065e8 <memset>
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}

08009e30 <_free_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4605      	mov	r5, r0
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d043      	beq.n	8009ec0 <_free_r+0x90>
 8009e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3c:	1f0c      	subs	r4, r1, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfb8      	it	lt
 8009e42:	18e4      	addlt	r4, r4, r3
 8009e44:	f000 fa76 	bl	800a334 <__malloc_lock>
 8009e48:	4a1e      	ldr	r2, [pc, #120]	; (8009ec4 <_free_r+0x94>)
 8009e4a:	6813      	ldr	r3, [r2, #0]
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	b933      	cbnz	r3, 8009e5e <_free_r+0x2e>
 8009e50:	6063      	str	r3, [r4, #4]
 8009e52:	6014      	str	r4, [r2, #0]
 8009e54:	4628      	mov	r0, r5
 8009e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e5a:	f000 ba71 	b.w	800a340 <__malloc_unlock>
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	d90a      	bls.n	8009e78 <_free_r+0x48>
 8009e62:	6821      	ldr	r1, [r4, #0]
 8009e64:	1862      	adds	r2, r4, r1
 8009e66:	4293      	cmp	r3, r2
 8009e68:	bf01      	itttt	eq
 8009e6a:	681a      	ldreq	r2, [r3, #0]
 8009e6c:	685b      	ldreq	r3, [r3, #4]
 8009e6e:	1852      	addeq	r2, r2, r1
 8009e70:	6022      	streq	r2, [r4, #0]
 8009e72:	6063      	str	r3, [r4, #4]
 8009e74:	6004      	str	r4, [r0, #0]
 8009e76:	e7ed      	b.n	8009e54 <_free_r+0x24>
 8009e78:	461a      	mov	r2, r3
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	b10b      	cbz	r3, 8009e82 <_free_r+0x52>
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	d9fa      	bls.n	8009e78 <_free_r+0x48>
 8009e82:	6811      	ldr	r1, [r2, #0]
 8009e84:	1850      	adds	r0, r2, r1
 8009e86:	42a0      	cmp	r0, r4
 8009e88:	d10b      	bne.n	8009ea2 <_free_r+0x72>
 8009e8a:	6820      	ldr	r0, [r4, #0]
 8009e8c:	4401      	add	r1, r0
 8009e8e:	1850      	adds	r0, r2, r1
 8009e90:	4283      	cmp	r3, r0
 8009e92:	6011      	str	r1, [r2, #0]
 8009e94:	d1de      	bne.n	8009e54 <_free_r+0x24>
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	4401      	add	r1, r0
 8009e9c:	6011      	str	r1, [r2, #0]
 8009e9e:	6053      	str	r3, [r2, #4]
 8009ea0:	e7d8      	b.n	8009e54 <_free_r+0x24>
 8009ea2:	d902      	bls.n	8009eaa <_free_r+0x7a>
 8009ea4:	230c      	movs	r3, #12
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	e7d4      	b.n	8009e54 <_free_r+0x24>
 8009eaa:	6820      	ldr	r0, [r4, #0]
 8009eac:	1821      	adds	r1, r4, r0
 8009eae:	428b      	cmp	r3, r1
 8009eb0:	bf01      	itttt	eq
 8009eb2:	6819      	ldreq	r1, [r3, #0]
 8009eb4:	685b      	ldreq	r3, [r3, #4]
 8009eb6:	1809      	addeq	r1, r1, r0
 8009eb8:	6021      	streq	r1, [r4, #0]
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	6054      	str	r4, [r2, #4]
 8009ebe:	e7c9      	b.n	8009e54 <_free_r+0x24>
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000204 	.word	0x20000204

08009ec8 <_malloc_r>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	1ccd      	adds	r5, r1, #3
 8009ecc:	f025 0503 	bic.w	r5, r5, #3
 8009ed0:	3508      	adds	r5, #8
 8009ed2:	2d0c      	cmp	r5, #12
 8009ed4:	bf38      	it	cc
 8009ed6:	250c      	movcc	r5, #12
 8009ed8:	2d00      	cmp	r5, #0
 8009eda:	4606      	mov	r6, r0
 8009edc:	db01      	blt.n	8009ee2 <_malloc_r+0x1a>
 8009ede:	42a9      	cmp	r1, r5
 8009ee0:	d903      	bls.n	8009eea <_malloc_r+0x22>
 8009ee2:	230c      	movs	r3, #12
 8009ee4:	6033      	str	r3, [r6, #0]
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eea:	f000 fa23 	bl	800a334 <__malloc_lock>
 8009eee:	4921      	ldr	r1, [pc, #132]	; (8009f74 <_malloc_r+0xac>)
 8009ef0:	680a      	ldr	r2, [r1, #0]
 8009ef2:	4614      	mov	r4, r2
 8009ef4:	b99c      	cbnz	r4, 8009f1e <_malloc_r+0x56>
 8009ef6:	4f20      	ldr	r7, [pc, #128]	; (8009f78 <_malloc_r+0xb0>)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	b923      	cbnz	r3, 8009f06 <_malloc_r+0x3e>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 f99e 	bl	800a240 <_sbrk_r>
 8009f04:	6038      	str	r0, [r7, #0]
 8009f06:	4629      	mov	r1, r5
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f000 f999 	bl	800a240 <_sbrk_r>
 8009f0e:	1c43      	adds	r3, r0, #1
 8009f10:	d123      	bne.n	8009f5a <_malloc_r+0x92>
 8009f12:	230c      	movs	r3, #12
 8009f14:	4630      	mov	r0, r6
 8009f16:	6033      	str	r3, [r6, #0]
 8009f18:	f000 fa12 	bl	800a340 <__malloc_unlock>
 8009f1c:	e7e3      	b.n	8009ee6 <_malloc_r+0x1e>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	1b5b      	subs	r3, r3, r5
 8009f22:	d417      	bmi.n	8009f54 <_malloc_r+0x8c>
 8009f24:	2b0b      	cmp	r3, #11
 8009f26:	d903      	bls.n	8009f30 <_malloc_r+0x68>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	441c      	add	r4, r3
 8009f2c:	6025      	str	r5, [r4, #0]
 8009f2e:	e004      	b.n	8009f3a <_malloc_r+0x72>
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	42a2      	cmp	r2, r4
 8009f34:	bf0c      	ite	eq
 8009f36:	600b      	streq	r3, [r1, #0]
 8009f38:	6053      	strne	r3, [r2, #4]
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f000 fa00 	bl	800a340 <__malloc_unlock>
 8009f40:	f104 000b 	add.w	r0, r4, #11
 8009f44:	1d23      	adds	r3, r4, #4
 8009f46:	f020 0007 	bic.w	r0, r0, #7
 8009f4a:	1ac2      	subs	r2, r0, r3
 8009f4c:	d0cc      	beq.n	8009ee8 <_malloc_r+0x20>
 8009f4e:	1a1b      	subs	r3, r3, r0
 8009f50:	50a3      	str	r3, [r4, r2]
 8009f52:	e7c9      	b.n	8009ee8 <_malloc_r+0x20>
 8009f54:	4622      	mov	r2, r4
 8009f56:	6864      	ldr	r4, [r4, #4]
 8009f58:	e7cc      	b.n	8009ef4 <_malloc_r+0x2c>
 8009f5a:	1cc4      	adds	r4, r0, #3
 8009f5c:	f024 0403 	bic.w	r4, r4, #3
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d0e3      	beq.n	8009f2c <_malloc_r+0x64>
 8009f64:	1a21      	subs	r1, r4, r0
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 f96a 	bl	800a240 <_sbrk_r>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d1dd      	bne.n	8009f2c <_malloc_r+0x64>
 8009f70:	e7cf      	b.n	8009f12 <_malloc_r+0x4a>
 8009f72:	bf00      	nop
 8009f74:	20000204 	.word	0x20000204
 8009f78:	20000208 	.word	0x20000208

08009f7c <__ssputs_r>:
 8009f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	688e      	ldr	r6, [r1, #8]
 8009f82:	4682      	mov	sl, r0
 8009f84:	429e      	cmp	r6, r3
 8009f86:	460c      	mov	r4, r1
 8009f88:	4690      	mov	r8, r2
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	d838      	bhi.n	800a000 <__ssputs_r+0x84>
 8009f8e:	898a      	ldrh	r2, [r1, #12]
 8009f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f94:	d032      	beq.n	8009ffc <__ssputs_r+0x80>
 8009f96:	6825      	ldr	r5, [r4, #0]
 8009f98:	6909      	ldr	r1, [r1, #16]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	eba5 0901 	sub.w	r9, r5, r1
 8009fa0:	6965      	ldr	r5, [r4, #20]
 8009fa2:	444b      	add	r3, r9
 8009fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fac:	106d      	asrs	r5, r5, #1
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	bf38      	it	cc
 8009fb2:	461d      	movcc	r5, r3
 8009fb4:	0553      	lsls	r3, r2, #21
 8009fb6:	d531      	bpl.n	800a01c <__ssputs_r+0xa0>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7ff ff85 	bl	8009ec8 <_malloc_r>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	b950      	cbnz	r0, 8009fd8 <__ssputs_r+0x5c>
 8009fc2:	230c      	movs	r3, #12
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	f8ca 3000 	str.w	r3, [sl]
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	464a      	mov	r2, r9
 8009fda:	6921      	ldr	r1, [r4, #16]
 8009fdc:	f7ff fa54 	bl	8009488 <memcpy>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	6126      	str	r6, [r4, #16]
 8009fee:	444e      	add	r6, r9
 8009ff0:	6026      	str	r6, [r4, #0]
 8009ff2:	463e      	mov	r6, r7
 8009ff4:	6165      	str	r5, [r4, #20]
 8009ff6:	eba5 0509 	sub.w	r5, r5, r9
 8009ffa:	60a5      	str	r5, [r4, #8]
 8009ffc:	42be      	cmp	r6, r7
 8009ffe:	d900      	bls.n	800a002 <__ssputs_r+0x86>
 800a000:	463e      	mov	r6, r7
 800a002:	4632      	mov	r2, r6
 800a004:	4641      	mov	r1, r8
 800a006:	6820      	ldr	r0, [r4, #0]
 800a008:	f000 f97a 	bl	800a300 <memmove>
 800a00c:	68a3      	ldr	r3, [r4, #8]
 800a00e:	6822      	ldr	r2, [r4, #0]
 800a010:	1b9b      	subs	r3, r3, r6
 800a012:	4432      	add	r2, r6
 800a014:	2000      	movs	r0, #0
 800a016:	60a3      	str	r3, [r4, #8]
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	e7db      	b.n	8009fd4 <__ssputs_r+0x58>
 800a01c:	462a      	mov	r2, r5
 800a01e:	f000 f995 	bl	800a34c <_realloc_r>
 800a022:	4606      	mov	r6, r0
 800a024:	2800      	cmp	r0, #0
 800a026:	d1e1      	bne.n	8009fec <__ssputs_r+0x70>
 800a028:	4650      	mov	r0, sl
 800a02a:	6921      	ldr	r1, [r4, #16]
 800a02c:	f7ff ff00 	bl	8009e30 <_free_r>
 800a030:	e7c7      	b.n	8009fc2 <__ssputs_r+0x46>
	...

0800a034 <_svfiprintf_r>:
 800a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a038:	4698      	mov	r8, r3
 800a03a:	898b      	ldrh	r3, [r1, #12]
 800a03c:	4607      	mov	r7, r0
 800a03e:	061b      	lsls	r3, r3, #24
 800a040:	460d      	mov	r5, r1
 800a042:	4614      	mov	r4, r2
 800a044:	b09d      	sub	sp, #116	; 0x74
 800a046:	d50e      	bpl.n	800a066 <_svfiprintf_r+0x32>
 800a048:	690b      	ldr	r3, [r1, #16]
 800a04a:	b963      	cbnz	r3, 800a066 <_svfiprintf_r+0x32>
 800a04c:	2140      	movs	r1, #64	; 0x40
 800a04e:	f7ff ff3b 	bl	8009ec8 <_malloc_r>
 800a052:	6028      	str	r0, [r5, #0]
 800a054:	6128      	str	r0, [r5, #16]
 800a056:	b920      	cbnz	r0, 800a062 <_svfiprintf_r+0x2e>
 800a058:	230c      	movs	r3, #12
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e0d1      	b.n	800a206 <_svfiprintf_r+0x1d2>
 800a062:	2340      	movs	r3, #64	; 0x40
 800a064:	616b      	str	r3, [r5, #20]
 800a066:	2300      	movs	r3, #0
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	2320      	movs	r3, #32
 800a06c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a070:	2330      	movs	r3, #48	; 0x30
 800a072:	f04f 0901 	mov.w	r9, #1
 800a076:	f8cd 800c 	str.w	r8, [sp, #12]
 800a07a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a220 <_svfiprintf_r+0x1ec>
 800a07e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a082:	4623      	mov	r3, r4
 800a084:	469a      	mov	sl, r3
 800a086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a08a:	b10a      	cbz	r2, 800a090 <_svfiprintf_r+0x5c>
 800a08c:	2a25      	cmp	r2, #37	; 0x25
 800a08e:	d1f9      	bne.n	800a084 <_svfiprintf_r+0x50>
 800a090:	ebba 0b04 	subs.w	fp, sl, r4
 800a094:	d00b      	beq.n	800a0ae <_svfiprintf_r+0x7a>
 800a096:	465b      	mov	r3, fp
 800a098:	4622      	mov	r2, r4
 800a09a:	4629      	mov	r1, r5
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff ff6d 	bl	8009f7c <__ssputs_r>
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	f000 80aa 	beq.w	800a1fc <_svfiprintf_r+0x1c8>
 800a0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0aa:	445a      	add	r2, fp
 800a0ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 80a2 	beq.w	800a1fc <_svfiprintf_r+0x1c8>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a0be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0c2:	f10a 0a01 	add.w	sl, sl, #1
 800a0c6:	9304      	str	r3, [sp, #16]
 800a0c8:	9307      	str	r3, [sp, #28]
 800a0ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a0d0:	4654      	mov	r4, sl
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d8:	4851      	ldr	r0, [pc, #324]	; (800a220 <_svfiprintf_r+0x1ec>)
 800a0da:	f7ff f9c7 	bl	800946c <memchr>
 800a0de:	9a04      	ldr	r2, [sp, #16]
 800a0e0:	b9d8      	cbnz	r0, 800a11a <_svfiprintf_r+0xe6>
 800a0e2:	06d0      	lsls	r0, r2, #27
 800a0e4:	bf44      	itt	mi
 800a0e6:	2320      	movmi	r3, #32
 800a0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ec:	0711      	lsls	r1, r2, #28
 800a0ee:	bf44      	itt	mi
 800a0f0:	232b      	movmi	r3, #43	; 0x2b
 800a0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a0fc:	d015      	beq.n	800a12a <_svfiprintf_r+0xf6>
 800a0fe:	4654      	mov	r4, sl
 800a100:	2000      	movs	r0, #0
 800a102:	f04f 0c0a 	mov.w	ip, #10
 800a106:	9a07      	ldr	r2, [sp, #28]
 800a108:	4621      	mov	r1, r4
 800a10a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10e:	3b30      	subs	r3, #48	; 0x30
 800a110:	2b09      	cmp	r3, #9
 800a112:	d94e      	bls.n	800a1b2 <_svfiprintf_r+0x17e>
 800a114:	b1b0      	cbz	r0, 800a144 <_svfiprintf_r+0x110>
 800a116:	9207      	str	r2, [sp, #28]
 800a118:	e014      	b.n	800a144 <_svfiprintf_r+0x110>
 800a11a:	eba0 0308 	sub.w	r3, r0, r8
 800a11e:	fa09 f303 	lsl.w	r3, r9, r3
 800a122:	4313      	orrs	r3, r2
 800a124:	46a2      	mov	sl, r4
 800a126:	9304      	str	r3, [sp, #16]
 800a128:	e7d2      	b.n	800a0d0 <_svfiprintf_r+0x9c>
 800a12a:	9b03      	ldr	r3, [sp, #12]
 800a12c:	1d19      	adds	r1, r3, #4
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	9103      	str	r1, [sp, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	bfbb      	ittet	lt
 800a136:	425b      	neglt	r3, r3
 800a138:	f042 0202 	orrlt.w	r2, r2, #2
 800a13c:	9307      	strge	r3, [sp, #28]
 800a13e:	9307      	strlt	r3, [sp, #28]
 800a140:	bfb8      	it	lt
 800a142:	9204      	strlt	r2, [sp, #16]
 800a144:	7823      	ldrb	r3, [r4, #0]
 800a146:	2b2e      	cmp	r3, #46	; 0x2e
 800a148:	d10c      	bne.n	800a164 <_svfiprintf_r+0x130>
 800a14a:	7863      	ldrb	r3, [r4, #1]
 800a14c:	2b2a      	cmp	r3, #42	; 0x2a
 800a14e:	d135      	bne.n	800a1bc <_svfiprintf_r+0x188>
 800a150:	9b03      	ldr	r3, [sp, #12]
 800a152:	3402      	adds	r4, #2
 800a154:	1d1a      	adds	r2, r3, #4
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	9203      	str	r2, [sp, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bfb8      	it	lt
 800a15e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a230 <_svfiprintf_r+0x1fc>
 800a168:	2203      	movs	r2, #3
 800a16a:	4650      	mov	r0, sl
 800a16c:	7821      	ldrb	r1, [r4, #0]
 800a16e:	f7ff f97d 	bl	800946c <memchr>
 800a172:	b140      	cbz	r0, 800a186 <_svfiprintf_r+0x152>
 800a174:	2340      	movs	r3, #64	; 0x40
 800a176:	eba0 000a 	sub.w	r0, r0, sl
 800a17a:	fa03 f000 	lsl.w	r0, r3, r0
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	3401      	adds	r4, #1
 800a182:	4303      	orrs	r3, r0
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18a:	2206      	movs	r2, #6
 800a18c:	4825      	ldr	r0, [pc, #148]	; (800a224 <_svfiprintf_r+0x1f0>)
 800a18e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a192:	f7ff f96b 	bl	800946c <memchr>
 800a196:	2800      	cmp	r0, #0
 800a198:	d038      	beq.n	800a20c <_svfiprintf_r+0x1d8>
 800a19a:	4b23      	ldr	r3, [pc, #140]	; (800a228 <_svfiprintf_r+0x1f4>)
 800a19c:	bb1b      	cbnz	r3, 800a1e6 <_svfiprintf_r+0x1b2>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	3307      	adds	r3, #7
 800a1a2:	f023 0307 	bic.w	r3, r3, #7
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ac:	4433      	add	r3, r6
 800a1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b0:	e767      	b.n	800a082 <_svfiprintf_r+0x4e>
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ba:	e7a5      	b.n	800a108 <_svfiprintf_r+0xd4>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f04f 0c0a 	mov.w	ip, #10
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	3401      	adds	r4, #1
 800a1c6:	9305      	str	r3, [sp, #20]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ce:	3a30      	subs	r2, #48	; 0x30
 800a1d0:	2a09      	cmp	r2, #9
 800a1d2:	d903      	bls.n	800a1dc <_svfiprintf_r+0x1a8>
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0c5      	beq.n	800a164 <_svfiprintf_r+0x130>
 800a1d8:	9105      	str	r1, [sp, #20]
 800a1da:	e7c3      	b.n	800a164 <_svfiprintf_r+0x130>
 800a1dc:	4604      	mov	r4, r0
 800a1de:	2301      	movs	r3, #1
 800a1e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1e4:	e7f0      	b.n	800a1c8 <_svfiprintf_r+0x194>
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <_svfiprintf_r+0x1f8>)
 800a1f0:	a904      	add	r1, sp, #16
 800a1f2:	f7fc fa9f 	bl	8006734 <_printf_float>
 800a1f6:	1c42      	adds	r2, r0, #1
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	d1d6      	bne.n	800a1aa <_svfiprintf_r+0x176>
 800a1fc:	89ab      	ldrh	r3, [r5, #12]
 800a1fe:	065b      	lsls	r3, r3, #25
 800a200:	f53f af2c 	bmi.w	800a05c <_svfiprintf_r+0x28>
 800a204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a206:	b01d      	add	sp, #116	; 0x74
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20c:	ab03      	add	r3, sp, #12
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	462a      	mov	r2, r5
 800a212:	4638      	mov	r0, r7
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <_svfiprintf_r+0x1f8>)
 800a216:	a904      	add	r1, sp, #16
 800a218:	f7fc fd28 	bl	8006c6c <_printf_i>
 800a21c:	e7eb      	b.n	800a1f6 <_svfiprintf_r+0x1c2>
 800a21e:	bf00      	nop
 800a220:	0800b42c 	.word	0x0800b42c
 800a224:	0800b436 	.word	0x0800b436
 800a228:	08006735 	.word	0x08006735
 800a22c:	08009f7d 	.word	0x08009f7d
 800a230:	0800b432 	.word	0x0800b432

0800a234 <nan>:
 800a234:	2000      	movs	r0, #0
 800a236:	4901      	ldr	r1, [pc, #4]	; (800a23c <nan+0x8>)
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	7ff80000 	.word	0x7ff80000

0800a240 <_sbrk_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	2300      	movs	r3, #0
 800a244:	4d05      	ldr	r5, [pc, #20]	; (800a25c <_sbrk_r+0x1c>)
 800a246:	4604      	mov	r4, r0
 800a248:	4608      	mov	r0, r1
 800a24a:	602b      	str	r3, [r5, #0]
 800a24c:	f7f8 fa10 	bl	8002670 <_sbrk>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_sbrk_r+0x1a>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_sbrk_r+0x1a>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	20000394 	.word	0x20000394

0800a260 <strncmp>:
 800a260:	b510      	push	{r4, lr}
 800a262:	b16a      	cbz	r2, 800a280 <strncmp+0x20>
 800a264:	3901      	subs	r1, #1
 800a266:	1884      	adds	r4, r0, r2
 800a268:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a26c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a270:	4293      	cmp	r3, r2
 800a272:	d103      	bne.n	800a27c <strncmp+0x1c>
 800a274:	42a0      	cmp	r0, r4
 800a276:	d001      	beq.n	800a27c <strncmp+0x1c>
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1f5      	bne.n	800a268 <strncmp+0x8>
 800a27c:	1a98      	subs	r0, r3, r2
 800a27e:	bd10      	pop	{r4, pc}
 800a280:	4610      	mov	r0, r2
 800a282:	e7fc      	b.n	800a27e <strncmp+0x1e>

0800a284 <__ascii_wctomb>:
 800a284:	4603      	mov	r3, r0
 800a286:	4608      	mov	r0, r1
 800a288:	b141      	cbz	r1, 800a29c <__ascii_wctomb+0x18>
 800a28a:	2aff      	cmp	r2, #255	; 0xff
 800a28c:	d904      	bls.n	800a298 <__ascii_wctomb+0x14>
 800a28e:	228a      	movs	r2, #138	; 0x8a
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	4770      	bx	lr
 800a298:	2001      	movs	r0, #1
 800a29a:	700a      	strb	r2, [r1, #0]
 800a29c:	4770      	bx	lr
	...

0800a2a0 <__assert_func>:
 800a2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <__assert_func+0x2c>)
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68d8      	ldr	r0, [r3, #12]
 800a2ae:	b14c      	cbz	r4, 800a2c4 <__assert_func+0x24>
 800a2b0:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <__assert_func+0x30>)
 800a2b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2b6:	9100      	str	r1, [sp, #0]
 800a2b8:	462b      	mov	r3, r5
 800a2ba:	4906      	ldr	r1, [pc, #24]	; (800a2d4 <__assert_func+0x34>)
 800a2bc:	f000 f80e 	bl	800a2dc <fiprintf>
 800a2c0:	f000 fa82 	bl	800a7c8 <abort>
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <__assert_func+0x38>)
 800a2c6:	461c      	mov	r4, r3
 800a2c8:	e7f3      	b.n	800a2b2 <__assert_func+0x12>
 800a2ca:	bf00      	nop
 800a2cc:	20000010 	.word	0x20000010
 800a2d0:	0800b43d 	.word	0x0800b43d
 800a2d4:	0800b44a 	.word	0x0800b44a
 800a2d8:	0800b478 	.word	0x0800b478

0800a2dc <fiprintf>:
 800a2dc:	b40e      	push	{r1, r2, r3}
 800a2de:	b503      	push	{r0, r1, lr}
 800a2e0:	4601      	mov	r1, r0
 800a2e2:	ab03      	add	r3, sp, #12
 800a2e4:	4805      	ldr	r0, [pc, #20]	; (800a2fc <fiprintf+0x20>)
 800a2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	f000 f87b 	bl	800a3e8 <_vfiprintf_r>
 800a2f2:	b002      	add	sp, #8
 800a2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f8:	b003      	add	sp, #12
 800a2fa:	4770      	bx	lr
 800a2fc:	20000010 	.word	0x20000010

0800a300 <memmove>:
 800a300:	4288      	cmp	r0, r1
 800a302:	b510      	push	{r4, lr}
 800a304:	eb01 0402 	add.w	r4, r1, r2
 800a308:	d902      	bls.n	800a310 <memmove+0x10>
 800a30a:	4284      	cmp	r4, r0
 800a30c:	4623      	mov	r3, r4
 800a30e:	d807      	bhi.n	800a320 <memmove+0x20>
 800a310:	1e43      	subs	r3, r0, #1
 800a312:	42a1      	cmp	r1, r4
 800a314:	d008      	beq.n	800a328 <memmove+0x28>
 800a316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a31e:	e7f8      	b.n	800a312 <memmove+0x12>
 800a320:	4601      	mov	r1, r0
 800a322:	4402      	add	r2, r0
 800a324:	428a      	cmp	r2, r1
 800a326:	d100      	bne.n	800a32a <memmove+0x2a>
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a332:	e7f7      	b.n	800a324 <memmove+0x24>

0800a334 <__malloc_lock>:
 800a334:	4801      	ldr	r0, [pc, #4]	; (800a33c <__malloc_lock+0x8>)
 800a336:	f000 bc07 	b.w	800ab48 <__retarget_lock_acquire_recursive>
 800a33a:	bf00      	nop
 800a33c:	2000039c 	.word	0x2000039c

0800a340 <__malloc_unlock>:
 800a340:	4801      	ldr	r0, [pc, #4]	; (800a348 <__malloc_unlock+0x8>)
 800a342:	f000 bc02 	b.w	800ab4a <__retarget_lock_release_recursive>
 800a346:	bf00      	nop
 800a348:	2000039c 	.word	0x2000039c

0800a34c <_realloc_r>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	4607      	mov	r7, r0
 800a350:	4614      	mov	r4, r2
 800a352:	460e      	mov	r6, r1
 800a354:	b921      	cbnz	r1, 800a360 <_realloc_r+0x14>
 800a356:	4611      	mov	r1, r2
 800a358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a35c:	f7ff bdb4 	b.w	8009ec8 <_malloc_r>
 800a360:	b922      	cbnz	r2, 800a36c <_realloc_r+0x20>
 800a362:	f7ff fd65 	bl	8009e30 <_free_r>
 800a366:	4625      	mov	r5, r4
 800a368:	4628      	mov	r0, r5
 800a36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a36c:	f000 fc52 	bl	800ac14 <_malloc_usable_size_r>
 800a370:	42a0      	cmp	r0, r4
 800a372:	d20f      	bcs.n	800a394 <_realloc_r+0x48>
 800a374:	4621      	mov	r1, r4
 800a376:	4638      	mov	r0, r7
 800a378:	f7ff fda6 	bl	8009ec8 <_malloc_r>
 800a37c:	4605      	mov	r5, r0
 800a37e:	2800      	cmp	r0, #0
 800a380:	d0f2      	beq.n	800a368 <_realloc_r+0x1c>
 800a382:	4631      	mov	r1, r6
 800a384:	4622      	mov	r2, r4
 800a386:	f7ff f87f 	bl	8009488 <memcpy>
 800a38a:	4631      	mov	r1, r6
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff fd4f 	bl	8009e30 <_free_r>
 800a392:	e7e9      	b.n	800a368 <_realloc_r+0x1c>
 800a394:	4635      	mov	r5, r6
 800a396:	e7e7      	b.n	800a368 <_realloc_r+0x1c>

0800a398 <__sfputc_r>:
 800a398:	6893      	ldr	r3, [r2, #8]
 800a39a:	b410      	push	{r4}
 800a39c:	3b01      	subs	r3, #1
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	6093      	str	r3, [r2, #8]
 800a3a2:	da07      	bge.n	800a3b4 <__sfputc_r+0x1c>
 800a3a4:	6994      	ldr	r4, [r2, #24]
 800a3a6:	42a3      	cmp	r3, r4
 800a3a8:	db01      	blt.n	800a3ae <__sfputc_r+0x16>
 800a3aa:	290a      	cmp	r1, #10
 800a3ac:	d102      	bne.n	800a3b4 <__sfputc_r+0x1c>
 800a3ae:	bc10      	pop	{r4}
 800a3b0:	f000 b94a 	b.w	800a648 <__swbuf_r>
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	1c58      	adds	r0, r3, #1
 800a3b8:	6010      	str	r0, [r2, #0]
 800a3ba:	7019      	strb	r1, [r3, #0]
 800a3bc:	4608      	mov	r0, r1
 800a3be:	bc10      	pop	{r4}
 800a3c0:	4770      	bx	lr

0800a3c2 <__sfputs_r>:
 800a3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	18d5      	adds	r5, r2, r3
 800a3cc:	42ac      	cmp	r4, r5
 800a3ce:	d101      	bne.n	800a3d4 <__sfputs_r+0x12>
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	e007      	b.n	800a3e4 <__sfputs_r+0x22>
 800a3d4:	463a      	mov	r2, r7
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3dc:	f7ff ffdc 	bl	800a398 <__sfputc_r>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d1f3      	bne.n	800a3cc <__sfputs_r+0xa>
 800a3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3e8 <_vfiprintf_r>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	4614      	mov	r4, r2
 800a3f0:	4698      	mov	r8, r3
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	b09d      	sub	sp, #116	; 0x74
 800a3f6:	b118      	cbz	r0, 800a400 <_vfiprintf_r+0x18>
 800a3f8:	6983      	ldr	r3, [r0, #24]
 800a3fa:	b90b      	cbnz	r3, 800a400 <_vfiprintf_r+0x18>
 800a3fc:	f000 fb06 	bl	800aa0c <__sinit>
 800a400:	4b89      	ldr	r3, [pc, #548]	; (800a628 <_vfiprintf_r+0x240>)
 800a402:	429d      	cmp	r5, r3
 800a404:	d11b      	bne.n	800a43e <_vfiprintf_r+0x56>
 800a406:	6875      	ldr	r5, [r6, #4]
 800a408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a40a:	07d9      	lsls	r1, r3, #31
 800a40c:	d405      	bmi.n	800a41a <_vfiprintf_r+0x32>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	059a      	lsls	r2, r3, #22
 800a412:	d402      	bmi.n	800a41a <_vfiprintf_r+0x32>
 800a414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a416:	f000 fb97 	bl	800ab48 <__retarget_lock_acquire_recursive>
 800a41a:	89ab      	ldrh	r3, [r5, #12]
 800a41c:	071b      	lsls	r3, r3, #28
 800a41e:	d501      	bpl.n	800a424 <_vfiprintf_r+0x3c>
 800a420:	692b      	ldr	r3, [r5, #16]
 800a422:	b9eb      	cbnz	r3, 800a460 <_vfiprintf_r+0x78>
 800a424:	4629      	mov	r1, r5
 800a426:	4630      	mov	r0, r6
 800a428:	f000 f960 	bl	800a6ec <__swsetup_r>
 800a42c:	b1c0      	cbz	r0, 800a460 <_vfiprintf_r+0x78>
 800a42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a430:	07dc      	lsls	r4, r3, #31
 800a432:	d50e      	bpl.n	800a452 <_vfiprintf_r+0x6a>
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	b01d      	add	sp, #116	; 0x74
 800a43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43e:	4b7b      	ldr	r3, [pc, #492]	; (800a62c <_vfiprintf_r+0x244>)
 800a440:	429d      	cmp	r5, r3
 800a442:	d101      	bne.n	800a448 <_vfiprintf_r+0x60>
 800a444:	68b5      	ldr	r5, [r6, #8]
 800a446:	e7df      	b.n	800a408 <_vfiprintf_r+0x20>
 800a448:	4b79      	ldr	r3, [pc, #484]	; (800a630 <_vfiprintf_r+0x248>)
 800a44a:	429d      	cmp	r5, r3
 800a44c:	bf08      	it	eq
 800a44e:	68f5      	ldreq	r5, [r6, #12]
 800a450:	e7da      	b.n	800a408 <_vfiprintf_r+0x20>
 800a452:	89ab      	ldrh	r3, [r5, #12]
 800a454:	0598      	lsls	r0, r3, #22
 800a456:	d4ed      	bmi.n	800a434 <_vfiprintf_r+0x4c>
 800a458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a45a:	f000 fb76 	bl	800ab4a <__retarget_lock_release_recursive>
 800a45e:	e7e9      	b.n	800a434 <_vfiprintf_r+0x4c>
 800a460:	2300      	movs	r3, #0
 800a462:	9309      	str	r3, [sp, #36]	; 0x24
 800a464:	2320      	movs	r3, #32
 800a466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a46a:	2330      	movs	r3, #48	; 0x30
 800a46c:	f04f 0901 	mov.w	r9, #1
 800a470:	f8cd 800c 	str.w	r8, [sp, #12]
 800a474:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a634 <_vfiprintf_r+0x24c>
 800a478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a47c:	4623      	mov	r3, r4
 800a47e:	469a      	mov	sl, r3
 800a480:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a484:	b10a      	cbz	r2, 800a48a <_vfiprintf_r+0xa2>
 800a486:	2a25      	cmp	r2, #37	; 0x25
 800a488:	d1f9      	bne.n	800a47e <_vfiprintf_r+0x96>
 800a48a:	ebba 0b04 	subs.w	fp, sl, r4
 800a48e:	d00b      	beq.n	800a4a8 <_vfiprintf_r+0xc0>
 800a490:	465b      	mov	r3, fp
 800a492:	4622      	mov	r2, r4
 800a494:	4629      	mov	r1, r5
 800a496:	4630      	mov	r0, r6
 800a498:	f7ff ff93 	bl	800a3c2 <__sfputs_r>
 800a49c:	3001      	adds	r0, #1
 800a49e:	f000 80aa 	beq.w	800a5f6 <_vfiprintf_r+0x20e>
 800a4a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a4:	445a      	add	r2, fp
 800a4a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80a2 	beq.w	800a5f6 <_vfiprintf_r+0x20e>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4bc:	f10a 0a01 	add.w	sl, sl, #1
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	9307      	str	r3, [sp, #28]
 800a4c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ca:	4654      	mov	r4, sl
 800a4cc:	2205      	movs	r2, #5
 800a4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d2:	4858      	ldr	r0, [pc, #352]	; (800a634 <_vfiprintf_r+0x24c>)
 800a4d4:	f7fe ffca 	bl	800946c <memchr>
 800a4d8:	9a04      	ldr	r2, [sp, #16]
 800a4da:	b9d8      	cbnz	r0, 800a514 <_vfiprintf_r+0x12c>
 800a4dc:	06d1      	lsls	r1, r2, #27
 800a4de:	bf44      	itt	mi
 800a4e0:	2320      	movmi	r3, #32
 800a4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e6:	0713      	lsls	r3, r2, #28
 800a4e8:	bf44      	itt	mi
 800a4ea:	232b      	movmi	r3, #43	; 0x2b
 800a4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f6:	d015      	beq.n	800a524 <_vfiprintf_r+0x13c>
 800a4f8:	4654      	mov	r4, sl
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	f04f 0c0a 	mov.w	ip, #10
 800a500:	9a07      	ldr	r2, [sp, #28]
 800a502:	4621      	mov	r1, r4
 800a504:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a508:	3b30      	subs	r3, #48	; 0x30
 800a50a:	2b09      	cmp	r3, #9
 800a50c:	d94e      	bls.n	800a5ac <_vfiprintf_r+0x1c4>
 800a50e:	b1b0      	cbz	r0, 800a53e <_vfiprintf_r+0x156>
 800a510:	9207      	str	r2, [sp, #28]
 800a512:	e014      	b.n	800a53e <_vfiprintf_r+0x156>
 800a514:	eba0 0308 	sub.w	r3, r0, r8
 800a518:	fa09 f303 	lsl.w	r3, r9, r3
 800a51c:	4313      	orrs	r3, r2
 800a51e:	46a2      	mov	sl, r4
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	e7d2      	b.n	800a4ca <_vfiprintf_r+0xe2>
 800a524:	9b03      	ldr	r3, [sp, #12]
 800a526:	1d19      	adds	r1, r3, #4
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	9103      	str	r1, [sp, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bfbb      	ittet	lt
 800a530:	425b      	neglt	r3, r3
 800a532:	f042 0202 	orrlt.w	r2, r2, #2
 800a536:	9307      	strge	r3, [sp, #28]
 800a538:	9307      	strlt	r3, [sp, #28]
 800a53a:	bfb8      	it	lt
 800a53c:	9204      	strlt	r2, [sp, #16]
 800a53e:	7823      	ldrb	r3, [r4, #0]
 800a540:	2b2e      	cmp	r3, #46	; 0x2e
 800a542:	d10c      	bne.n	800a55e <_vfiprintf_r+0x176>
 800a544:	7863      	ldrb	r3, [r4, #1]
 800a546:	2b2a      	cmp	r3, #42	; 0x2a
 800a548:	d135      	bne.n	800a5b6 <_vfiprintf_r+0x1ce>
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	3402      	adds	r4, #2
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	9203      	str	r2, [sp, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfb8      	it	lt
 800a558:	f04f 33ff 	movlt.w	r3, #4294967295
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a644 <_vfiprintf_r+0x25c>
 800a562:	2203      	movs	r2, #3
 800a564:	4650      	mov	r0, sl
 800a566:	7821      	ldrb	r1, [r4, #0]
 800a568:	f7fe ff80 	bl	800946c <memchr>
 800a56c:	b140      	cbz	r0, 800a580 <_vfiprintf_r+0x198>
 800a56e:	2340      	movs	r3, #64	; 0x40
 800a570:	eba0 000a 	sub.w	r0, r0, sl
 800a574:	fa03 f000 	lsl.w	r0, r3, r0
 800a578:	9b04      	ldr	r3, [sp, #16]
 800a57a:	3401      	adds	r4, #1
 800a57c:	4303      	orrs	r3, r0
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a584:	2206      	movs	r2, #6
 800a586:	482c      	ldr	r0, [pc, #176]	; (800a638 <_vfiprintf_r+0x250>)
 800a588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a58c:	f7fe ff6e 	bl	800946c <memchr>
 800a590:	2800      	cmp	r0, #0
 800a592:	d03f      	beq.n	800a614 <_vfiprintf_r+0x22c>
 800a594:	4b29      	ldr	r3, [pc, #164]	; (800a63c <_vfiprintf_r+0x254>)
 800a596:	bb1b      	cbnz	r3, 800a5e0 <_vfiprintf_r+0x1f8>
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	3307      	adds	r3, #7
 800a59c:	f023 0307 	bic.w	r3, r3, #7
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	9303      	str	r3, [sp, #12]
 800a5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a6:	443b      	add	r3, r7
 800a5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5aa:	e767      	b.n	800a47c <_vfiprintf_r+0x94>
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b4:	e7a5      	b.n	800a502 <_vfiprintf_r+0x11a>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f04f 0c0a 	mov.w	ip, #10
 800a5bc:	4619      	mov	r1, r3
 800a5be:	3401      	adds	r4, #1
 800a5c0:	9305      	str	r3, [sp, #20]
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5c8:	3a30      	subs	r2, #48	; 0x30
 800a5ca:	2a09      	cmp	r2, #9
 800a5cc:	d903      	bls.n	800a5d6 <_vfiprintf_r+0x1ee>
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0c5      	beq.n	800a55e <_vfiprintf_r+0x176>
 800a5d2:	9105      	str	r1, [sp, #20]
 800a5d4:	e7c3      	b.n	800a55e <_vfiprintf_r+0x176>
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	2301      	movs	r3, #1
 800a5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5de:	e7f0      	b.n	800a5c2 <_vfiprintf_r+0x1da>
 800a5e0:	ab03      	add	r3, sp, #12
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	462a      	mov	r2, r5
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	4b15      	ldr	r3, [pc, #84]	; (800a640 <_vfiprintf_r+0x258>)
 800a5ea:	a904      	add	r1, sp, #16
 800a5ec:	f7fc f8a2 	bl	8006734 <_printf_float>
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	1c78      	adds	r0, r7, #1
 800a5f4:	d1d6      	bne.n	800a5a4 <_vfiprintf_r+0x1bc>
 800a5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f8:	07d9      	lsls	r1, r3, #31
 800a5fa:	d405      	bmi.n	800a608 <_vfiprintf_r+0x220>
 800a5fc:	89ab      	ldrh	r3, [r5, #12]
 800a5fe:	059a      	lsls	r2, r3, #22
 800a600:	d402      	bmi.n	800a608 <_vfiprintf_r+0x220>
 800a602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a604:	f000 faa1 	bl	800ab4a <__retarget_lock_release_recursive>
 800a608:	89ab      	ldrh	r3, [r5, #12]
 800a60a:	065b      	lsls	r3, r3, #25
 800a60c:	f53f af12 	bmi.w	800a434 <_vfiprintf_r+0x4c>
 800a610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a612:	e711      	b.n	800a438 <_vfiprintf_r+0x50>
 800a614:	ab03      	add	r3, sp, #12
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	462a      	mov	r2, r5
 800a61a:	4630      	mov	r0, r6
 800a61c:	4b08      	ldr	r3, [pc, #32]	; (800a640 <_vfiprintf_r+0x258>)
 800a61e:	a904      	add	r1, sp, #16
 800a620:	f7fc fb24 	bl	8006c6c <_printf_i>
 800a624:	e7e4      	b.n	800a5f0 <_vfiprintf_r+0x208>
 800a626:	bf00      	nop
 800a628:	0800b49c 	.word	0x0800b49c
 800a62c:	0800b4bc 	.word	0x0800b4bc
 800a630:	0800b47c 	.word	0x0800b47c
 800a634:	0800b42c 	.word	0x0800b42c
 800a638:	0800b436 	.word	0x0800b436
 800a63c:	08006735 	.word	0x08006735
 800a640:	0800a3c3 	.word	0x0800a3c3
 800a644:	0800b432 	.word	0x0800b432

0800a648 <__swbuf_r>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	460e      	mov	r6, r1
 800a64c:	4614      	mov	r4, r2
 800a64e:	4605      	mov	r5, r0
 800a650:	b118      	cbz	r0, 800a65a <__swbuf_r+0x12>
 800a652:	6983      	ldr	r3, [r0, #24]
 800a654:	b90b      	cbnz	r3, 800a65a <__swbuf_r+0x12>
 800a656:	f000 f9d9 	bl	800aa0c <__sinit>
 800a65a:	4b21      	ldr	r3, [pc, #132]	; (800a6e0 <__swbuf_r+0x98>)
 800a65c:	429c      	cmp	r4, r3
 800a65e:	d12b      	bne.n	800a6b8 <__swbuf_r+0x70>
 800a660:	686c      	ldr	r4, [r5, #4]
 800a662:	69a3      	ldr	r3, [r4, #24]
 800a664:	60a3      	str	r3, [r4, #8]
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	071a      	lsls	r2, r3, #28
 800a66a:	d52f      	bpl.n	800a6cc <__swbuf_r+0x84>
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	b36b      	cbz	r3, 800a6cc <__swbuf_r+0x84>
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	6820      	ldr	r0, [r4, #0]
 800a674:	b2f6      	uxtb	r6, r6
 800a676:	1ac0      	subs	r0, r0, r3
 800a678:	6963      	ldr	r3, [r4, #20]
 800a67a:	4637      	mov	r7, r6
 800a67c:	4283      	cmp	r3, r0
 800a67e:	dc04      	bgt.n	800a68a <__swbuf_r+0x42>
 800a680:	4621      	mov	r1, r4
 800a682:	4628      	mov	r0, r5
 800a684:	f000 f92e 	bl	800a8e4 <_fflush_r>
 800a688:	bb30      	cbnz	r0, 800a6d8 <__swbuf_r+0x90>
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	3001      	adds	r0, #1
 800a68e:	3b01      	subs	r3, #1
 800a690:	60a3      	str	r3, [r4, #8]
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	1c5a      	adds	r2, r3, #1
 800a696:	6022      	str	r2, [r4, #0]
 800a698:	701e      	strb	r6, [r3, #0]
 800a69a:	6963      	ldr	r3, [r4, #20]
 800a69c:	4283      	cmp	r3, r0
 800a69e:	d004      	beq.n	800a6aa <__swbuf_r+0x62>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	07db      	lsls	r3, r3, #31
 800a6a4:	d506      	bpl.n	800a6b4 <__swbuf_r+0x6c>
 800a6a6:	2e0a      	cmp	r6, #10
 800a6a8:	d104      	bne.n	800a6b4 <__swbuf_r+0x6c>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f000 f919 	bl	800a8e4 <_fflush_r>
 800a6b2:	b988      	cbnz	r0, 800a6d8 <__swbuf_r+0x90>
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <__swbuf_r+0x9c>)
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d101      	bne.n	800a6c2 <__swbuf_r+0x7a>
 800a6be:	68ac      	ldr	r4, [r5, #8]
 800a6c0:	e7cf      	b.n	800a662 <__swbuf_r+0x1a>
 800a6c2:	4b09      	ldr	r3, [pc, #36]	; (800a6e8 <__swbuf_r+0xa0>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	bf08      	it	eq
 800a6c8:	68ec      	ldreq	r4, [r5, #12]
 800a6ca:	e7ca      	b.n	800a662 <__swbuf_r+0x1a>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 f80c 	bl	800a6ec <__swsetup_r>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d0cb      	beq.n	800a670 <__swbuf_r+0x28>
 800a6d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6dc:	e7ea      	b.n	800a6b4 <__swbuf_r+0x6c>
 800a6de:	bf00      	nop
 800a6e0:	0800b49c 	.word	0x0800b49c
 800a6e4:	0800b4bc 	.word	0x0800b4bc
 800a6e8:	0800b47c 	.word	0x0800b47c

0800a6ec <__swsetup_r>:
 800a6ec:	4b32      	ldr	r3, [pc, #200]	; (800a7b8 <__swsetup_r+0xcc>)
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	681d      	ldr	r5, [r3, #0]
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	b125      	cbz	r5, 800a702 <__swsetup_r+0x16>
 800a6f8:	69ab      	ldr	r3, [r5, #24]
 800a6fa:	b913      	cbnz	r3, 800a702 <__swsetup_r+0x16>
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f000 f985 	bl	800aa0c <__sinit>
 800a702:	4b2e      	ldr	r3, [pc, #184]	; (800a7bc <__swsetup_r+0xd0>)
 800a704:	429c      	cmp	r4, r3
 800a706:	d10f      	bne.n	800a728 <__swsetup_r+0x3c>
 800a708:	686c      	ldr	r4, [r5, #4]
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a710:	0719      	lsls	r1, r3, #28
 800a712:	d42c      	bmi.n	800a76e <__swsetup_r+0x82>
 800a714:	06dd      	lsls	r5, r3, #27
 800a716:	d411      	bmi.n	800a73c <__swsetup_r+0x50>
 800a718:	2309      	movs	r3, #9
 800a71a:	6033      	str	r3, [r6, #0]
 800a71c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a720:	f04f 30ff 	mov.w	r0, #4294967295
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	e03e      	b.n	800a7a6 <__swsetup_r+0xba>
 800a728:	4b25      	ldr	r3, [pc, #148]	; (800a7c0 <__swsetup_r+0xd4>)
 800a72a:	429c      	cmp	r4, r3
 800a72c:	d101      	bne.n	800a732 <__swsetup_r+0x46>
 800a72e:	68ac      	ldr	r4, [r5, #8]
 800a730:	e7eb      	b.n	800a70a <__swsetup_r+0x1e>
 800a732:	4b24      	ldr	r3, [pc, #144]	; (800a7c4 <__swsetup_r+0xd8>)
 800a734:	429c      	cmp	r4, r3
 800a736:	bf08      	it	eq
 800a738:	68ec      	ldreq	r4, [r5, #12]
 800a73a:	e7e6      	b.n	800a70a <__swsetup_r+0x1e>
 800a73c:	0758      	lsls	r0, r3, #29
 800a73e:	d512      	bpl.n	800a766 <__swsetup_r+0x7a>
 800a740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a742:	b141      	cbz	r1, 800a756 <__swsetup_r+0x6a>
 800a744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a748:	4299      	cmp	r1, r3
 800a74a:	d002      	beq.n	800a752 <__swsetup_r+0x66>
 800a74c:	4630      	mov	r0, r6
 800a74e:	f7ff fb6f 	bl	8009e30 <_free_r>
 800a752:	2300      	movs	r3, #0
 800a754:	6363      	str	r3, [r4, #52]	; 0x34
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a75c:	81a3      	strh	r3, [r4, #12]
 800a75e:	2300      	movs	r3, #0
 800a760:	6063      	str	r3, [r4, #4]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f043 0308 	orr.w	r3, r3, #8
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	b94b      	cbnz	r3, 800a786 <__swsetup_r+0x9a>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a77c:	d003      	beq.n	800a786 <__swsetup_r+0x9a>
 800a77e:	4621      	mov	r1, r4
 800a780:	4630      	mov	r0, r6
 800a782:	f000 fa07 	bl	800ab94 <__smakebuf_r>
 800a786:	89a0      	ldrh	r0, [r4, #12]
 800a788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a78c:	f010 0301 	ands.w	r3, r0, #1
 800a790:	d00a      	beq.n	800a7a8 <__swsetup_r+0xbc>
 800a792:	2300      	movs	r3, #0
 800a794:	60a3      	str	r3, [r4, #8]
 800a796:	6963      	ldr	r3, [r4, #20]
 800a798:	425b      	negs	r3, r3
 800a79a:	61a3      	str	r3, [r4, #24]
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	b943      	cbnz	r3, 800a7b2 <__swsetup_r+0xc6>
 800a7a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7a4:	d1ba      	bne.n	800a71c <__swsetup_r+0x30>
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	0781      	lsls	r1, r0, #30
 800a7aa:	bf58      	it	pl
 800a7ac:	6963      	ldrpl	r3, [r4, #20]
 800a7ae:	60a3      	str	r3, [r4, #8]
 800a7b0:	e7f4      	b.n	800a79c <__swsetup_r+0xb0>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e7f7      	b.n	800a7a6 <__swsetup_r+0xba>
 800a7b6:	bf00      	nop
 800a7b8:	20000010 	.word	0x20000010
 800a7bc:	0800b49c 	.word	0x0800b49c
 800a7c0:	0800b4bc 	.word	0x0800b4bc
 800a7c4:	0800b47c 	.word	0x0800b47c

0800a7c8 <abort>:
 800a7c8:	2006      	movs	r0, #6
 800a7ca:	b508      	push	{r3, lr}
 800a7cc:	f000 fa52 	bl	800ac74 <raise>
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f7f7 feda 	bl	800258a <_exit>
	...

0800a7d8 <__sflush_r>:
 800a7d8:	898a      	ldrh	r2, [r1, #12]
 800a7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7de:	4605      	mov	r5, r0
 800a7e0:	0710      	lsls	r0, r2, #28
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	d458      	bmi.n	800a898 <__sflush_r+0xc0>
 800a7e6:	684b      	ldr	r3, [r1, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dc05      	bgt.n	800a7f8 <__sflush_r+0x20>
 800a7ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	dc02      	bgt.n	800a7f8 <__sflush_r+0x20>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	d0f9      	beq.n	800a7f2 <__sflush_r+0x1a>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a804:	682f      	ldr	r7, [r5, #0]
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	d032      	beq.n	800a870 <__sflush_r+0x98>
 800a80a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	075a      	lsls	r2, r3, #29
 800a810:	d505      	bpl.n	800a81e <__sflush_r+0x46>
 800a812:	6863      	ldr	r3, [r4, #4]
 800a814:	1ac0      	subs	r0, r0, r3
 800a816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a818:	b10b      	cbz	r3, 800a81e <__sflush_r+0x46>
 800a81a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a81c:	1ac0      	subs	r0, r0, r3
 800a81e:	2300      	movs	r3, #0
 800a820:	4602      	mov	r2, r0
 800a822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a824:	4628      	mov	r0, r5
 800a826:	6a21      	ldr	r1, [r4, #32]
 800a828:	47b0      	blx	r6
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	d106      	bne.n	800a83e <__sflush_r+0x66>
 800a830:	6829      	ldr	r1, [r5, #0]
 800a832:	291d      	cmp	r1, #29
 800a834:	d82c      	bhi.n	800a890 <__sflush_r+0xb8>
 800a836:	4a2a      	ldr	r2, [pc, #168]	; (800a8e0 <__sflush_r+0x108>)
 800a838:	40ca      	lsrs	r2, r1
 800a83a:	07d6      	lsls	r6, r2, #31
 800a83c:	d528      	bpl.n	800a890 <__sflush_r+0xb8>
 800a83e:	2200      	movs	r2, #0
 800a840:	6062      	str	r2, [r4, #4]
 800a842:	6922      	ldr	r2, [r4, #16]
 800a844:	04d9      	lsls	r1, r3, #19
 800a846:	6022      	str	r2, [r4, #0]
 800a848:	d504      	bpl.n	800a854 <__sflush_r+0x7c>
 800a84a:	1c42      	adds	r2, r0, #1
 800a84c:	d101      	bne.n	800a852 <__sflush_r+0x7a>
 800a84e:	682b      	ldr	r3, [r5, #0]
 800a850:	b903      	cbnz	r3, 800a854 <__sflush_r+0x7c>
 800a852:	6560      	str	r0, [r4, #84]	; 0x54
 800a854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a856:	602f      	str	r7, [r5, #0]
 800a858:	2900      	cmp	r1, #0
 800a85a:	d0ca      	beq.n	800a7f2 <__sflush_r+0x1a>
 800a85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a860:	4299      	cmp	r1, r3
 800a862:	d002      	beq.n	800a86a <__sflush_r+0x92>
 800a864:	4628      	mov	r0, r5
 800a866:	f7ff fae3 	bl	8009e30 <_free_r>
 800a86a:	2000      	movs	r0, #0
 800a86c:	6360      	str	r0, [r4, #52]	; 0x34
 800a86e:	e7c1      	b.n	800a7f4 <__sflush_r+0x1c>
 800a870:	6a21      	ldr	r1, [r4, #32]
 800a872:	2301      	movs	r3, #1
 800a874:	4628      	mov	r0, r5
 800a876:	47b0      	blx	r6
 800a878:	1c41      	adds	r1, r0, #1
 800a87a:	d1c7      	bne.n	800a80c <__sflush_r+0x34>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0c4      	beq.n	800a80c <__sflush_r+0x34>
 800a882:	2b1d      	cmp	r3, #29
 800a884:	d001      	beq.n	800a88a <__sflush_r+0xb2>
 800a886:	2b16      	cmp	r3, #22
 800a888:	d101      	bne.n	800a88e <__sflush_r+0xb6>
 800a88a:	602f      	str	r7, [r5, #0]
 800a88c:	e7b1      	b.n	800a7f2 <__sflush_r+0x1a>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	e7ad      	b.n	800a7f4 <__sflush_r+0x1c>
 800a898:	690f      	ldr	r7, [r1, #16]
 800a89a:	2f00      	cmp	r7, #0
 800a89c:	d0a9      	beq.n	800a7f2 <__sflush_r+0x1a>
 800a89e:	0793      	lsls	r3, r2, #30
 800a8a0:	bf18      	it	ne
 800a8a2:	2300      	movne	r3, #0
 800a8a4:	680e      	ldr	r6, [r1, #0]
 800a8a6:	bf08      	it	eq
 800a8a8:	694b      	ldreq	r3, [r1, #20]
 800a8aa:	eba6 0807 	sub.w	r8, r6, r7
 800a8ae:	600f      	str	r7, [r1, #0]
 800a8b0:	608b      	str	r3, [r1, #8]
 800a8b2:	f1b8 0f00 	cmp.w	r8, #0
 800a8b6:	dd9c      	ble.n	800a7f2 <__sflush_r+0x1a>
 800a8b8:	4643      	mov	r3, r8
 800a8ba:	463a      	mov	r2, r7
 800a8bc:	4628      	mov	r0, r5
 800a8be:	6a21      	ldr	r1, [r4, #32]
 800a8c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8c2:	47b0      	blx	r6
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	dc06      	bgt.n	800a8d6 <__sflush_r+0xfe>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	e78e      	b.n	800a7f4 <__sflush_r+0x1c>
 800a8d6:	4407      	add	r7, r0
 800a8d8:	eba8 0800 	sub.w	r8, r8, r0
 800a8dc:	e7e9      	b.n	800a8b2 <__sflush_r+0xda>
 800a8de:	bf00      	nop
 800a8e0:	20400001 	.word	0x20400001

0800a8e4 <_fflush_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	690b      	ldr	r3, [r1, #16]
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	b913      	cbnz	r3, 800a8f4 <_fflush_r+0x10>
 800a8ee:	2500      	movs	r5, #0
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	b118      	cbz	r0, 800a8fe <_fflush_r+0x1a>
 800a8f6:	6983      	ldr	r3, [r0, #24]
 800a8f8:	b90b      	cbnz	r3, 800a8fe <_fflush_r+0x1a>
 800a8fa:	f000 f887 	bl	800aa0c <__sinit>
 800a8fe:	4b14      	ldr	r3, [pc, #80]	; (800a950 <_fflush_r+0x6c>)
 800a900:	429c      	cmp	r4, r3
 800a902:	d11b      	bne.n	800a93c <_fflush_r+0x58>
 800a904:	686c      	ldr	r4, [r5, #4]
 800a906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0ef      	beq.n	800a8ee <_fflush_r+0xa>
 800a90e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a910:	07d0      	lsls	r0, r2, #31
 800a912:	d404      	bmi.n	800a91e <_fflush_r+0x3a>
 800a914:	0599      	lsls	r1, r3, #22
 800a916:	d402      	bmi.n	800a91e <_fflush_r+0x3a>
 800a918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91a:	f000 f915 	bl	800ab48 <__retarget_lock_acquire_recursive>
 800a91e:	4628      	mov	r0, r5
 800a920:	4621      	mov	r1, r4
 800a922:	f7ff ff59 	bl	800a7d8 <__sflush_r>
 800a926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a928:	4605      	mov	r5, r0
 800a92a:	07da      	lsls	r2, r3, #31
 800a92c:	d4e0      	bmi.n	800a8f0 <_fflush_r+0xc>
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	059b      	lsls	r3, r3, #22
 800a932:	d4dd      	bmi.n	800a8f0 <_fflush_r+0xc>
 800a934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a936:	f000 f908 	bl	800ab4a <__retarget_lock_release_recursive>
 800a93a:	e7d9      	b.n	800a8f0 <_fflush_r+0xc>
 800a93c:	4b05      	ldr	r3, [pc, #20]	; (800a954 <_fflush_r+0x70>)
 800a93e:	429c      	cmp	r4, r3
 800a940:	d101      	bne.n	800a946 <_fflush_r+0x62>
 800a942:	68ac      	ldr	r4, [r5, #8]
 800a944:	e7df      	b.n	800a906 <_fflush_r+0x22>
 800a946:	4b04      	ldr	r3, [pc, #16]	; (800a958 <_fflush_r+0x74>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	bf08      	it	eq
 800a94c:	68ec      	ldreq	r4, [r5, #12]
 800a94e:	e7da      	b.n	800a906 <_fflush_r+0x22>
 800a950:	0800b49c 	.word	0x0800b49c
 800a954:	0800b4bc 	.word	0x0800b4bc
 800a958:	0800b47c 	.word	0x0800b47c

0800a95c <std>:
 800a95c:	2300      	movs	r3, #0
 800a95e:	b510      	push	{r4, lr}
 800a960:	4604      	mov	r4, r0
 800a962:	e9c0 3300 	strd	r3, r3, [r0]
 800a966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a96a:	6083      	str	r3, [r0, #8]
 800a96c:	8181      	strh	r1, [r0, #12]
 800a96e:	6643      	str	r3, [r0, #100]	; 0x64
 800a970:	81c2      	strh	r2, [r0, #14]
 800a972:	6183      	str	r3, [r0, #24]
 800a974:	4619      	mov	r1, r3
 800a976:	2208      	movs	r2, #8
 800a978:	305c      	adds	r0, #92	; 0x5c
 800a97a:	f7fb fe35 	bl	80065e8 <memset>
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <std+0x38>)
 800a980:	6224      	str	r4, [r4, #32]
 800a982:	6263      	str	r3, [r4, #36]	; 0x24
 800a984:	4b04      	ldr	r3, [pc, #16]	; (800a998 <std+0x3c>)
 800a986:	62a3      	str	r3, [r4, #40]	; 0x28
 800a988:	4b04      	ldr	r3, [pc, #16]	; (800a99c <std+0x40>)
 800a98a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a98c:	4b04      	ldr	r3, [pc, #16]	; (800a9a0 <std+0x44>)
 800a98e:	6323      	str	r3, [r4, #48]	; 0x30
 800a990:	bd10      	pop	{r4, pc}
 800a992:	bf00      	nop
 800a994:	0800acad 	.word	0x0800acad
 800a998:	0800accf 	.word	0x0800accf
 800a99c:	0800ad07 	.word	0x0800ad07
 800a9a0:	0800ad2b 	.word	0x0800ad2b

0800a9a4 <_cleanup_r>:
 800a9a4:	4901      	ldr	r1, [pc, #4]	; (800a9ac <_cleanup_r+0x8>)
 800a9a6:	f000 b8af 	b.w	800ab08 <_fwalk_reent>
 800a9aa:	bf00      	nop
 800a9ac:	0800a8e5 	.word	0x0800a8e5

0800a9b0 <__sfmoreglue>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	2568      	movs	r5, #104	; 0x68
 800a9b4:	1e4a      	subs	r2, r1, #1
 800a9b6:	4355      	muls	r5, r2
 800a9b8:	460e      	mov	r6, r1
 800a9ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9be:	f7ff fa83 	bl	8009ec8 <_malloc_r>
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	b140      	cbz	r0, 800a9d8 <__sfmoreglue+0x28>
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9cc:	300c      	adds	r0, #12
 800a9ce:	60a0      	str	r0, [r4, #8]
 800a9d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9d4:	f7fb fe08 	bl	80065e8 <memset>
 800a9d8:	4620      	mov	r0, r4
 800a9da:	bd70      	pop	{r4, r5, r6, pc}

0800a9dc <__sfp_lock_acquire>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__sfp_lock_acquire+0x8>)
 800a9de:	f000 b8b3 	b.w	800ab48 <__retarget_lock_acquire_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	200003a0 	.word	0x200003a0

0800a9e8 <__sfp_lock_release>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__sfp_lock_release+0x8>)
 800a9ea:	f000 b8ae 	b.w	800ab4a <__retarget_lock_release_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	200003a0 	.word	0x200003a0

0800a9f4 <__sinit_lock_acquire>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__sinit_lock_acquire+0x8>)
 800a9f6:	f000 b8a7 	b.w	800ab48 <__retarget_lock_acquire_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	2000039b 	.word	0x2000039b

0800aa00 <__sinit_lock_release>:
 800aa00:	4801      	ldr	r0, [pc, #4]	; (800aa08 <__sinit_lock_release+0x8>)
 800aa02:	f000 b8a2 	b.w	800ab4a <__retarget_lock_release_recursive>
 800aa06:	bf00      	nop
 800aa08:	2000039b 	.word	0x2000039b

0800aa0c <__sinit>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	4604      	mov	r4, r0
 800aa10:	f7ff fff0 	bl	800a9f4 <__sinit_lock_acquire>
 800aa14:	69a3      	ldr	r3, [r4, #24]
 800aa16:	b11b      	cbz	r3, 800aa20 <__sinit+0x14>
 800aa18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa1c:	f7ff bff0 	b.w	800aa00 <__sinit_lock_release>
 800aa20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa24:	6523      	str	r3, [r4, #80]	; 0x50
 800aa26:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <__sinit+0x68>)
 800aa28:	4a13      	ldr	r2, [pc, #76]	; (800aa78 <__sinit+0x6c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	bf08      	it	eq
 800aa32:	2301      	moveq	r3, #1
 800aa34:	4620      	mov	r0, r4
 800aa36:	bf08      	it	eq
 800aa38:	61a3      	streq	r3, [r4, #24]
 800aa3a:	f000 f81f 	bl	800aa7c <__sfp>
 800aa3e:	6060      	str	r0, [r4, #4]
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 f81b 	bl	800aa7c <__sfp>
 800aa46:	60a0      	str	r0, [r4, #8]
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 f817 	bl	800aa7c <__sfp>
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2104      	movs	r1, #4
 800aa52:	60e0      	str	r0, [r4, #12]
 800aa54:	6860      	ldr	r0, [r4, #4]
 800aa56:	f7ff ff81 	bl	800a95c <std>
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	2109      	movs	r1, #9
 800aa5e:	68a0      	ldr	r0, [r4, #8]
 800aa60:	f7ff ff7c 	bl	800a95c <std>
 800aa64:	2202      	movs	r2, #2
 800aa66:	2112      	movs	r1, #18
 800aa68:	68e0      	ldr	r0, [r4, #12]
 800aa6a:	f7ff ff77 	bl	800a95c <std>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	61a3      	str	r3, [r4, #24]
 800aa72:	e7d1      	b.n	800aa18 <__sinit+0xc>
 800aa74:	0800b028 	.word	0x0800b028
 800aa78:	0800a9a5 	.word	0x0800a9a5

0800aa7c <__sfp>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	4607      	mov	r7, r0
 800aa80:	f7ff ffac 	bl	800a9dc <__sfp_lock_acquire>
 800aa84:	4b1e      	ldr	r3, [pc, #120]	; (800ab00 <__sfp+0x84>)
 800aa86:	681e      	ldr	r6, [r3, #0]
 800aa88:	69b3      	ldr	r3, [r6, #24]
 800aa8a:	b913      	cbnz	r3, 800aa92 <__sfp+0x16>
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	f7ff ffbd 	bl	800aa0c <__sinit>
 800aa92:	3648      	adds	r6, #72	; 0x48
 800aa94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	d503      	bpl.n	800aaa4 <__sfp+0x28>
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	b30b      	cbz	r3, 800aae4 <__sfp+0x68>
 800aaa0:	6836      	ldr	r6, [r6, #0]
 800aaa2:	e7f7      	b.n	800aa94 <__sfp+0x18>
 800aaa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aaa8:	b9d5      	cbnz	r5, 800aae0 <__sfp+0x64>
 800aaaa:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <__sfp+0x88>)
 800aaac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aab0:	60e3      	str	r3, [r4, #12]
 800aab2:	6665      	str	r5, [r4, #100]	; 0x64
 800aab4:	f000 f847 	bl	800ab46 <__retarget_lock_init_recursive>
 800aab8:	f7ff ff96 	bl	800a9e8 <__sfp_lock_release>
 800aabc:	2208      	movs	r2, #8
 800aabe:	4629      	mov	r1, r5
 800aac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aac8:	6025      	str	r5, [r4, #0]
 800aaca:	61a5      	str	r5, [r4, #24]
 800aacc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aad0:	f7fb fd8a 	bl	80065e8 <memset>
 800aad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aadc:	4620      	mov	r0, r4
 800aade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae0:	3468      	adds	r4, #104	; 0x68
 800aae2:	e7d9      	b.n	800aa98 <__sfp+0x1c>
 800aae4:	2104      	movs	r1, #4
 800aae6:	4638      	mov	r0, r7
 800aae8:	f7ff ff62 	bl	800a9b0 <__sfmoreglue>
 800aaec:	4604      	mov	r4, r0
 800aaee:	6030      	str	r0, [r6, #0]
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d1d5      	bne.n	800aaa0 <__sfp+0x24>
 800aaf4:	f7ff ff78 	bl	800a9e8 <__sfp_lock_release>
 800aaf8:	230c      	movs	r3, #12
 800aafa:	603b      	str	r3, [r7, #0]
 800aafc:	e7ee      	b.n	800aadc <__sfp+0x60>
 800aafe:	bf00      	nop
 800ab00:	0800b028 	.word	0x0800b028
 800ab04:	ffff0001 	.word	0xffff0001

0800ab08 <_fwalk_reent>:
 800ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	4688      	mov	r8, r1
 800ab10:	2700      	movs	r7, #0
 800ab12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab1e:	d505      	bpl.n	800ab2c <_fwalk_reent+0x24>
 800ab20:	6824      	ldr	r4, [r4, #0]
 800ab22:	2c00      	cmp	r4, #0
 800ab24:	d1f7      	bne.n	800ab16 <_fwalk_reent+0xe>
 800ab26:	4638      	mov	r0, r7
 800ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab2c:	89ab      	ldrh	r3, [r5, #12]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d907      	bls.n	800ab42 <_fwalk_reent+0x3a>
 800ab32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab36:	3301      	adds	r3, #1
 800ab38:	d003      	beq.n	800ab42 <_fwalk_reent+0x3a>
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	47c0      	blx	r8
 800ab40:	4307      	orrs	r7, r0
 800ab42:	3568      	adds	r5, #104	; 0x68
 800ab44:	e7e9      	b.n	800ab1a <_fwalk_reent+0x12>

0800ab46 <__retarget_lock_init_recursive>:
 800ab46:	4770      	bx	lr

0800ab48 <__retarget_lock_acquire_recursive>:
 800ab48:	4770      	bx	lr

0800ab4a <__retarget_lock_release_recursive>:
 800ab4a:	4770      	bx	lr

0800ab4c <__swhatbuf_r>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	460e      	mov	r6, r1
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	4614      	mov	r4, r2
 800ab56:	2900      	cmp	r1, #0
 800ab58:	461d      	mov	r5, r3
 800ab5a:	b096      	sub	sp, #88	; 0x58
 800ab5c:	da07      	bge.n	800ab6e <__swhatbuf_r+0x22>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	602b      	str	r3, [r5, #0]
 800ab62:	89b3      	ldrh	r3, [r6, #12]
 800ab64:	061a      	lsls	r2, r3, #24
 800ab66:	d410      	bmi.n	800ab8a <__swhatbuf_r+0x3e>
 800ab68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab6c:	e00e      	b.n	800ab8c <__swhatbuf_r+0x40>
 800ab6e:	466a      	mov	r2, sp
 800ab70:	f000 f902 	bl	800ad78 <_fstat_r>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	dbf2      	blt.n	800ab5e <__swhatbuf_r+0x12>
 800ab78:	9a01      	ldr	r2, [sp, #4]
 800ab7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab82:	425a      	negs	r2, r3
 800ab84:	415a      	adcs	r2, r3
 800ab86:	602a      	str	r2, [r5, #0]
 800ab88:	e7ee      	b.n	800ab68 <__swhatbuf_r+0x1c>
 800ab8a:	2340      	movs	r3, #64	; 0x40
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	b016      	add	sp, #88	; 0x58
 800ab92:	bd70      	pop	{r4, r5, r6, pc}

0800ab94 <__smakebuf_r>:
 800ab94:	898b      	ldrh	r3, [r1, #12]
 800ab96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab98:	079d      	lsls	r5, r3, #30
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	d507      	bpl.n	800abb0 <__smakebuf_r+0x1c>
 800aba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	6123      	str	r3, [r4, #16]
 800aba8:	2301      	movs	r3, #1
 800abaa:	6163      	str	r3, [r4, #20]
 800abac:	b002      	add	sp, #8
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	466a      	mov	r2, sp
 800abb2:	ab01      	add	r3, sp, #4
 800abb4:	f7ff ffca 	bl	800ab4c <__swhatbuf_r>
 800abb8:	9900      	ldr	r1, [sp, #0]
 800abba:	4605      	mov	r5, r0
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7ff f983 	bl	8009ec8 <_malloc_r>
 800abc2:	b948      	cbnz	r0, 800abd8 <__smakebuf_r+0x44>
 800abc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc8:	059a      	lsls	r2, r3, #22
 800abca:	d4ef      	bmi.n	800abac <__smakebuf_r+0x18>
 800abcc:	f023 0303 	bic.w	r3, r3, #3
 800abd0:	f043 0302 	orr.w	r3, r3, #2
 800abd4:	81a3      	strh	r3, [r4, #12]
 800abd6:	e7e3      	b.n	800aba0 <__smakebuf_r+0xc>
 800abd8:	4b0d      	ldr	r3, [pc, #52]	; (800ac10 <__smakebuf_r+0x7c>)
 800abda:	62b3      	str	r3, [r6, #40]	; 0x28
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	6020      	str	r0, [r4, #0]
 800abe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe4:	81a3      	strh	r3, [r4, #12]
 800abe6:	9b00      	ldr	r3, [sp, #0]
 800abe8:	6120      	str	r0, [r4, #16]
 800abea:	6163      	str	r3, [r4, #20]
 800abec:	9b01      	ldr	r3, [sp, #4]
 800abee:	b15b      	cbz	r3, 800ac08 <__smakebuf_r+0x74>
 800abf0:	4630      	mov	r0, r6
 800abf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abf6:	f000 f8d1 	bl	800ad9c <_isatty_r>
 800abfa:	b128      	cbz	r0, 800ac08 <__smakebuf_r+0x74>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	f023 0303 	bic.w	r3, r3, #3
 800ac02:	f043 0301 	orr.w	r3, r3, #1
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	89a0      	ldrh	r0, [r4, #12]
 800ac0a:	4305      	orrs	r5, r0
 800ac0c:	81a5      	strh	r5, [r4, #12]
 800ac0e:	e7cd      	b.n	800abac <__smakebuf_r+0x18>
 800ac10:	0800a9a5 	.word	0x0800a9a5

0800ac14 <_malloc_usable_size_r>:
 800ac14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac18:	1f18      	subs	r0, r3, #4
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	bfbc      	itt	lt
 800ac1e:	580b      	ldrlt	r3, [r1, r0]
 800ac20:	18c0      	addlt	r0, r0, r3
 800ac22:	4770      	bx	lr

0800ac24 <_raise_r>:
 800ac24:	291f      	cmp	r1, #31
 800ac26:	b538      	push	{r3, r4, r5, lr}
 800ac28:	4604      	mov	r4, r0
 800ac2a:	460d      	mov	r5, r1
 800ac2c:	d904      	bls.n	800ac38 <_raise_r+0x14>
 800ac2e:	2316      	movs	r3, #22
 800ac30:	6003      	str	r3, [r0, #0]
 800ac32:	f04f 30ff 	mov.w	r0, #4294967295
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac3a:	b112      	cbz	r2, 800ac42 <_raise_r+0x1e>
 800ac3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac40:	b94b      	cbnz	r3, 800ac56 <_raise_r+0x32>
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f830 	bl	800aca8 <_getpid_r>
 800ac48:	462a      	mov	r2, r5
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac52:	f000 b817 	b.w	800ac84 <_kill_r>
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d00a      	beq.n	800ac70 <_raise_r+0x4c>
 800ac5a:	1c59      	adds	r1, r3, #1
 800ac5c:	d103      	bne.n	800ac66 <_raise_r+0x42>
 800ac5e:	2316      	movs	r3, #22
 800ac60:	6003      	str	r3, [r0, #0]
 800ac62:	2001      	movs	r0, #1
 800ac64:	e7e7      	b.n	800ac36 <_raise_r+0x12>
 800ac66:	2400      	movs	r4, #0
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac6e:	4798      	blx	r3
 800ac70:	2000      	movs	r0, #0
 800ac72:	e7e0      	b.n	800ac36 <_raise_r+0x12>

0800ac74 <raise>:
 800ac74:	4b02      	ldr	r3, [pc, #8]	; (800ac80 <raise+0xc>)
 800ac76:	4601      	mov	r1, r0
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	f7ff bfd3 	b.w	800ac24 <_raise_r>
 800ac7e:	bf00      	nop
 800ac80:	20000010 	.word	0x20000010

0800ac84 <_kill_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	2300      	movs	r3, #0
 800ac88:	4d06      	ldr	r5, [pc, #24]	; (800aca4 <_kill_r+0x20>)
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	4611      	mov	r1, r2
 800ac90:	602b      	str	r3, [r5, #0]
 800ac92:	f7f7 fc6a 	bl	800256a <_kill>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d102      	bne.n	800aca0 <_kill_r+0x1c>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	b103      	cbz	r3, 800aca0 <_kill_r+0x1c>
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	bd38      	pop	{r3, r4, r5, pc}
 800aca2:	bf00      	nop
 800aca4:	20000394 	.word	0x20000394

0800aca8 <_getpid_r>:
 800aca8:	f7f7 bc58 	b.w	800255c <_getpid>

0800acac <__sread>:
 800acac:	b510      	push	{r4, lr}
 800acae:	460c      	mov	r4, r1
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	f000 f894 	bl	800ade0 <_read_r>
 800acb8:	2800      	cmp	r0, #0
 800acba:	bfab      	itete	ge
 800acbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acbe:	89a3      	ldrhlt	r3, [r4, #12]
 800acc0:	181b      	addge	r3, r3, r0
 800acc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acc6:	bfac      	ite	ge
 800acc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acca:	81a3      	strhlt	r3, [r4, #12]
 800accc:	bd10      	pop	{r4, pc}

0800acce <__swrite>:
 800acce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	461f      	mov	r7, r3
 800acd4:	898b      	ldrh	r3, [r1, #12]
 800acd6:	4605      	mov	r5, r0
 800acd8:	05db      	lsls	r3, r3, #23
 800acda:	460c      	mov	r4, r1
 800acdc:	4616      	mov	r6, r2
 800acde:	d505      	bpl.n	800acec <__swrite+0x1e>
 800ace0:	2302      	movs	r3, #2
 800ace2:	2200      	movs	r2, #0
 800ace4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace8:	f000 f868 	bl	800adbc <_lseek_r>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	4632      	mov	r2, r6
 800acf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	4628      	mov	r0, r5
 800acf8:	463b      	mov	r3, r7
 800acfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	f000 b817 	b.w	800ad34 <_write_r>

0800ad06 <__sseek>:
 800ad06:	b510      	push	{r4, lr}
 800ad08:	460c      	mov	r4, r1
 800ad0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0e:	f000 f855 	bl	800adbc <_lseek_r>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	bf15      	itete	ne
 800ad18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad22:	81a3      	strheq	r3, [r4, #12]
 800ad24:	bf18      	it	ne
 800ad26:	81a3      	strhne	r3, [r4, #12]
 800ad28:	bd10      	pop	{r4, pc}

0800ad2a <__sclose>:
 800ad2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2e:	f000 b813 	b.w	800ad58 <_close_r>
	...

0800ad34 <_write_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4d05      	ldr	r5, [pc, #20]	; (800ad54 <_write_r+0x20>)
 800ad40:	602a      	str	r2, [r5, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f7f7 fc48 	bl	80025d8 <_write>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_write_r+0x1e>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_write_r+0x1e>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	20000394 	.word	0x20000394

0800ad58 <_close_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4d05      	ldr	r5, [pc, #20]	; (800ad74 <_close_r+0x1c>)
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f7f7 fc54 	bl	8002610 <_close>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_close_r+0x1a>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_close_r+0x1a>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	20000394 	.word	0x20000394

0800ad78 <_fstat_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4d06      	ldr	r5, [pc, #24]	; (800ad98 <_fstat_r+0x20>)
 800ad7e:	4604      	mov	r4, r0
 800ad80:	4608      	mov	r0, r1
 800ad82:	4611      	mov	r1, r2
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	f7f7 fc4e 	bl	8002626 <_fstat>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d102      	bne.n	800ad94 <_fstat_r+0x1c>
 800ad8e:	682b      	ldr	r3, [r5, #0]
 800ad90:	b103      	cbz	r3, 800ad94 <_fstat_r+0x1c>
 800ad92:	6023      	str	r3, [r4, #0]
 800ad94:	bd38      	pop	{r3, r4, r5, pc}
 800ad96:	bf00      	nop
 800ad98:	20000394 	.word	0x20000394

0800ad9c <_isatty_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4d05      	ldr	r5, [pc, #20]	; (800adb8 <_isatty_r+0x1c>)
 800ada2:	4604      	mov	r4, r0
 800ada4:	4608      	mov	r0, r1
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	f7f7 fc4c 	bl	8002644 <_isatty>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d102      	bne.n	800adb6 <_isatty_r+0x1a>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	b103      	cbz	r3, 800adb6 <_isatty_r+0x1a>
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	20000394 	.word	0x20000394

0800adbc <_lseek_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4604      	mov	r4, r0
 800adc0:	4608      	mov	r0, r1
 800adc2:	4611      	mov	r1, r2
 800adc4:	2200      	movs	r2, #0
 800adc6:	4d05      	ldr	r5, [pc, #20]	; (800addc <_lseek_r+0x20>)
 800adc8:	602a      	str	r2, [r5, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	f7f7 fc44 	bl	8002658 <_lseek>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_lseek_r+0x1e>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_lseek_r+0x1e>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	20000394 	.word	0x20000394

0800ade0 <_read_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4604      	mov	r4, r0
 800ade4:	4608      	mov	r0, r1
 800ade6:	4611      	mov	r1, r2
 800ade8:	2200      	movs	r2, #0
 800adea:	4d05      	ldr	r5, [pc, #20]	; (800ae00 <_read_r+0x20>)
 800adec:	602a      	str	r2, [r5, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	f7f7 fbd5 	bl	800259e <_read>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_read_r+0x1e>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_read_r+0x1e>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	20000394 	.word	0x20000394

0800ae04 <_init>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	bf00      	nop
 800ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0a:	bc08      	pop	{r3}
 800ae0c:	469e      	mov	lr, r3
 800ae0e:	4770      	bx	lr

0800ae10 <_fini>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr
